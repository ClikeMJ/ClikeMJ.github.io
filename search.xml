<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JavaWeb · JavaScript</title>
      <link href="/2022/04/15/JAVA/2.JavaWeb/JavaWeb%20%C2%B7%20JavaScript/"/>
      <url>/2022/04/15/JAVA/2.JavaWeb/JavaWeb%20%C2%B7%20JavaScript/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb · CSS</title>
      <link href="/2022/04/14/JAVA/2.JavaWeb/JavaWeb%20%C2%B7%20CSS/"/>
      <url>/2022/04/14/JAVA/2.JavaWeb/JavaWeb%20%C2%B7%20CSS/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaWeb · HTML</title>
      <link href="/2022/04/13/JAVA/2.JavaWeb/JavaWeb%20%C2%B7%20HTML/"/>
      <url>/2022/04/13/JAVA/2.JavaWeb/JavaWeb%20%C2%B7%20HTML/</url>
      
        <content type="html"><![CDATA[<h1 id="01-HTML简介"><a href="#01-HTML简介" class="headerlink" title="01 HTML简介"></a>01 HTML简介</h1><ul><li><p>HTML（HyperText Markup Language）：</p><ul><li>超文本标记语言，是用来描述网页的一种语言</li><li>不是一种编程语言，而是一种标记语言，是一套标记标签</li></ul></li><li><p>HTML 标签 （HTML tag）：</p><ul><li>由尖括号包围的关键词，通常是成对出现的</li><li>标签对中有开始标签和结束标签，也被称为开放标签和闭合标签</li></ul></li><li><p>HTML 文档：</p><ul><li>包含了HTML 标签及文本内</li><li>HTML文档也叫做 web 页面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>教程<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我的第一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="02-HTML基础"><a href="#02-HTML基础" class="headerlink" title="02 HTML基础"></a>02 HTML基础</h1><ul><li><p>HTML 标题（Heading）：是通过&lt;h1&gt; - &lt;h6&gt; 标签来定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>This is a heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>HTML 段落：是通过 &lt;p&gt; 标签进行定义的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is another paragraph.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaWeb </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC · 入门到精通</title>
      <link href="/2022/04/12/JAVA/1.Java/MySQL/JDBC%20%C2%B7%20%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/"/>
      <url>/2022/04/12/JAVA/1.Java/MySQL/JDBC%20%C2%B7%20%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%E9%80%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC概述"><a href="#JDBC概述" class="headerlink" title="JDBC概述"></a>JDBC概述</h1><h2 id="1-1-JDBC的本质"><a href="#1-1-JDBC的本质" class="headerlink" title="1.1 JDBC的本质"></a>1.1 JDBC的本质</h2><ul><li><p>JDBC：（Java DataBase Connectivity：Java语言连接数据库）：是SUN公司制定的一套接口（interface）</p><ul><li><p>java.sql.*;  这个软件包下有很多接口，接口都有调用者和实现者</p></li><li><p>面向接口调用、面向接口写实现类，都属于面向接口编程</p></li></ul></li><li><p>JDBC的作用：</p><ul><li>每一个数据库的底层实现原理都不一样</li><li>通过JDBC来操纵不同的数据库</li></ul></li><li><p>JDBC开发前的准备：</p><ul><li>SUN公司：制定JDBC接口，在java.sql.*中</li><li>数据库：编写java.sql.* 下的实现类，mysql-connector-java-5.1.23-bin.jar</li><li>Java程序员：面向JDBC接口编写代码</li></ul></li><li><p>jar包：专业术语称为MySQL&#x2F;Oracle的驱动</p><ul><li>先从官网下载对应的驱动jar包，然后将其配置到环境变量classpath当中</li><li>jar包中有很多class字节码文件，这些是mysql数据库厂家写的接口实现</li></ul></li><li><p>classpath：是一个环境变量，被操作系统用于寻找class类库</p><ul><li><p>用于在编译时定位所有的class文件，Java虚拟机的类加载器会加载class文件</p></li><li><p>如果没有配置，默认从当前路径下载class；若配置了，只能从固定位置下载</p></li><li><p>classpath&#x3D;.;D:\course\JDBC\resources\mysql-connector-java-5.1.23-bin.jar</p></li><li><p>“.;”表示当前路径，来加载Java程序员编写的class文件，“D盘”表示固定路径，来加载jar包</p></li><li><p>jar包使用时不需要解压，并且在IDEA中不用配置classpath，它有自己的配置</p></li></ul></li></ul><h2 id="1-2-JDBC编程六步"><a href="#1-2-JDBC编程六步" class="headerlink" title="1.2 JDBC编程六步"></a>1.2 JDBC编程六步</h2><ul><li>第一步：注册驱动（告诉Java程序，即将要连接的是哪个的数据库）</li><li>第二步：获取连接（表示JVM的进程和MySQL数据库进程之间的通道打开了。这属于进程之间的通信，重量级的，使用完之后一定要关闭通道）</li><li>第三步：获取数据库操作对象（专门执行sql语句的对象）</li><li>第四步：执行SQL语句（执行CRUD操作、DQL DML….）</li><li>第五步：处理查询结果集（只有当第四步执行的是select语句的时候，才有这第五步处理查询结果集）</li><li>第六步：释放资源（使用完资源之后一定要关闭资源。Java和数据库属于进程间的通信，开启之后一定要关闭）</li></ul><h1 id="01-注册驱动"><a href="#01-注册驱动" class="headerlink" title="01 注册驱动"></a>01 注册驱动</h1><h2 id="Driver-driver-x3D-new-com-mysql-cj-jdbc-Driver"><a href="#Driver-driver-x3D-new-com-mysql-cj-jdbc-Driver" class="headerlink" title="Driver driver &#x3D; new com.mysql.cj.jdbc.Driver();"></a>Driver driver &#x3D; new com.mysql.cj.jdbc.Driver();</h2><ul><li>MySQL驱动：父类型java.sql.Driver引用指向子类型com.mysql.cj.jdbc.Driver对象</li><li>import java.sql.*; 省略父类的java.sql.Driver为Driver，但mysql子类不能导包省略为Driver</li><li>Oracle的驱动：(java.sql.)Driver driver &#x3D; new oracle.jdbc.driver.OracleDriver();</li><li>Oracle就可以省略为Driver driver &#x3D; new OracleDriver();</li></ul><h2 id="DriverManager-registerDriver-driver"><a href="#DriverManager-registerDriver-driver" class="headerlink" title="DriverManager.registerDriver(driver);"></a>DriverManager.registerDriver(driver);</h2><ul><li>类：DriverManager，管理一组JDBC驱动程序的基本服务</li><li>方法：static void registerDriver(Driver driver)，向DriverManager注册给定应用程序</li></ul><h2 id="1-1-Class-forName-“com-mysql-cj-jdbc-Driver”"><a href="#1-1-Class-forName-“com-mysql-cj-jdbc-Driver”" class="headerlink" title="1.1 Class.forName(“com.mysql.cj.jdbc.Driver”);"></a>1.1 Class.forName(“com.mysql.cj.jdbc.Driver”);</h2><ul><li>方法二：用静态代码块static注册驱动，需要类加载</li><li>此方法常用，因为参数是一个字符串，字符串可以写到xxx.properties配置文件中</li><li>不需要接收返回值，因为我们只想用它的类加载动作</li><li>Oracle数据库：Class.forName(“oralce.jdbc.driver.OracleDriver”);</li></ul><h1 id="02-获取连接"><a href="#02-获取连接" class="headerlink" title="02 获取连接"></a>02 获取连接</h1><h2 id="2-1-String-url-x3D-“jdbc-mysql-x2F-x2F-localhost-3306-x2F-mydb”"><a href="#2-1-String-url-x3D-“jdbc-mysql-x2F-x2F-localhost-3306-x2F-mydb”" class="headerlink" title="2.1 String url &#x3D; “jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mydb”;"></a>2.1 String url &#x3D; “jdbc:mysql:&#x2F;&#x2F;localhost:3306&#x2F;mydb”;</h2><ul><li>url：统一资源定位符（网络中某个资源的绝对路径）包括协议、IP、PORT端口号、资源名<ul><li>协议：是一个提前规定好的数据传输格式</li><li>IP地址：网络当中定位某台计算机的</li><li>PORT端口号：定位这台计算机上某个服务的</li><li>资源名：这个服务下的某个资源</li></ul></li><li>“jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;bjpowernode”<ul><li>jdbc:mysql:&#x2F;&#x2F;：是java程序和mysql通信的协议</li><li>localhost：本机IP地址，还可以写成127.0.0.1</li><li>3306：mysql数据库端口号</li><li>mydb：mysql数据库的名称</li></ul></li><li>oracle的url：jdbc:oracle:thin:@localhost:1521:myorcl</li></ul><h2 id="2-2-String-user-x3D-“root”"><a href="#2-2-String-user-x3D-“root”" class="headerlink" title="2.2 String user &#x3D; “root”;"></a>2.2 String user &#x3D; “root”;</h2><h2 id="2-3-String-password-x3D-“123456”"><a href="#2-3-String-password-x3D-“123456”" class="headerlink" title="2.3 String password &#x3D; “123456”;"></a>2.3 String password &#x3D; “123456”;</h2><h2 id="2-4-Connection-conn-x3D-DriverManager-getConnection-url-user-password"><a href="#2-4-Connection-conn-x3D-DriverManager-getConnection-url-user-password" class="headerlink" title="2.4 Connection conn &#x3D; DriverManager.getConnection(url, user, password);"></a>2.4 Connection conn &#x3D; DriverManager.getConnection(url, user, password);</h2><ul><li>类：DriverManager，管理一组JDBC驱动程序的基本服务</li><li>方法：public static Connection getConnection(String url,String user,String password) throws SQLException，试图建立到给定数据库URL的连接，DriverManager试图从已注册的JDBC驱动程序集中选择一个适当的驱动程序</li><li>测试：System.out.println(“数据库连接对象&#x3D;” + conn); 输出连接对象的内存地址：com.mysql.JDBC4Connection@2aaf7cc2（类名@十六进制）</li><li>Connection是一个接口</li></ul><h1 id="03-获取数据库操作对象"><a href="#03-获取数据库操作对象" class="headerlink" title="03 获取数据库操作对象"></a>03 获取数据库操作对象</h1><h2 id="3-1-Statement-stmt-x3D-conn-createStatement"><a href="#3-1-Statement-stmt-x3D-conn-createStatement" class="headerlink" title="3.1 Statement stmt &#x3D; conn.createStatement();"></a>3.1 Statement stmt &#x3D; conn.createStatement();</h2><ul><li>接口：Connection，与特定数据库的连接或对话，在连接上下文中执行SQL语句并返回结果</li><li>方法：Statement createStatement()，创建一个Statement对象将SQL语句发送到数据库</li><li>通过一个连接对象Connection是可以创建多个Statement对象的</li></ul><h1 id="04-执行SQL语句"><a href="#04-执行SQL语句" class="headerlink" title="04 执行SQL语句"></a>04 执行SQL语句</h1><h2 id="4-1-String-sql-x3D-“……”"><a href="#4-1-String-sql-x3D-“……”" class="headerlink" title="4.1 String sql &#x3D; “……”"></a>4.1 String sql &#x3D; “……”</h2><ul><li>专门执行DML语句的（insert delete update）</li><li>JDBC中的SQL语句不需要以分号; 结尾</li></ul><h2 id="4-2-int-count-x3D-stmt-executeUpdate-sql"><a href="#4-2-int-count-x3D-stmt-executeUpdate-sql" class="headerlink" title="4.2 int count &#x3D; stmt.executeUpdate(sql);"></a>4.2 int count &#x3D; stmt.executeUpdate(sql);</h2><ul><li>接口：Statement，用于执行静态SQL语句并返回它所生成结果的对象</li><li>方法：int executeUpdate(String sql)，执行给定的sql语句，该语句可能为insert，update或delete语句，或者不返回任何内容的sql语句（如SQL DDL语句）</li><li>方法：ResuleSet executeQuery(String sql)，执行给定的sql语句，该语句返回单个ResuleSet对象（如查询语句SELECT）</li><li>返回值：影响数据库中的记录条数，eg：删除三条返回3，更新两条返回2</li><li>测试：System.out.println(count&#x3D;&#x3D;1?”保存成功”:”保存失败”);</li></ul><h1 id="05-处理查询结果集"><a href="#05-处理查询结果集" class="headerlink" title="05 处理查询结果集"></a>05 处理查询结果集</h1><h2 id="5-1-（rs-next-）"><a href="#5-1-（rs-next-）" class="headerlink" title="5.1 （rs.next()）"></a>5.1 （rs.next()）</h2><ul><li>只有当第四步执行的是select语句的时候，才有这第五步处理查询结果集</li><li>boolean has &#x3D; re.next(); 结果集遍历<ul><li>next()方法作用：将光标向前移动一位，指向位置有数据返回true</li><li>返回false表示光标指向的位置没有数据了</li></ul></li></ul><h2 id="5-2-（rs-getString-i-）"><a href="#5-2-（rs-getString-i-）" class="headerlink" title="5.2 （rs.getString(i)）"></a>5.2 （rs.getString(i)）</h2><ul><li>String empno &#x3D; rs.getString(i); 取当前行的第i个值<ul><li>getString()方法不管底层数据库表中什么类型，统一返回String类型</li><li>JDBC所有的下标都是从1开始，i&#x3D;1表示取当前行第一个值</li></ul></li><li>getInt(i)、getDouble(i)类似</li></ul><h1 id="06-释放资源"><a href="#06-释放资源" class="headerlink" title="06 释放资源"></a>06 释放资源</h1><h2 id="6-1-if-…-x3D-null"><a href="#6-1-if-…-x3D-null" class="headerlink" title="6.1 if (… !&#x3D; null) {"></a>6.1 if (… !&#x3D; null) {</h2><pre><code>            try&#123;                 ...close();            &#125; catch(SQLException e) &#123;                 e.printStackTrace();            &#125;  &#125;</code></pre><ul><li>遵循从小到大依次关闭，先关闭ResultSet，再关闭Statement，最后关闭Connection</li><li>分别进行try…catch处理</li><li>为了保证资源一定释放，在finally语句块中关闭资源</li></ul><h1 id="JDBC完整代码"><a href="#JDBC完整代码" class="headerlink" title="JDBC完整代码"></a>JDBC完整代码</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbc01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">stmt</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// ResultSet rs = null;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1、注册驱动</span></span><br><span class="line">            <span class="comment">/* 方法一：</span></span><br><span class="line"><span class="comment">                Driver driver = new com.mysql.cj.jdbc.Driver();</span></span><br><span class="line"><span class="comment">                DriverManager.registerDriver(driver);</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 2、获取连接</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/mydb&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">            conn = DriverManager.getConnection(url, user, password);  <span class="comment">// Connection conn = DriverManager.getConnection(url, user, password);</span></span><br><span class="line">            <span class="comment">// System.out.println(&quot;数据库连接对象=&quot; + conn);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3、获取数据库操作对象</span></span><br><span class="line">            stmt = conn.createStatement();  <span class="comment">// Statement stmt = conn.createStatement();</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">// 4、执行sql</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into dept(deptno,dname,loc) values(40,&#x27;人事部&#x27;,&#x27;北京&#x27;)&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> stmt.executeUpdate(sql);</span><br><span class="line">            <span class="comment">// count = stmt.executeQuery(sql);  // ResuleSet count = stmt.executeQuery(sql); 其中executeQuery：查询结果集，ResuleSet：执行查询语句</span></span><br><span class="line">            <span class="comment">// System.out.println(count==1?&quot;保存成功&quot;:&quot;保存失败&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5、处理查询结果集</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                当执行sql语句为查询语句时：SELECT</span></span><br><span class="line"><span class="comment">                eg：把结果集中的数据遍历输出，调用ResultSet接口中相应方法遍历</span></span><br><span class="line"><span class="comment">                while (rs.next()) &#123;  </span></span><br><span class="line"><span class="comment">                String empno = rs.getString(&quot;empno&quot;);  </span></span><br><span class="line"><span class="comment">                String ename = rs.getString(&quot;ename&quot;);</span></span><br><span class="line"><span class="comment">                String sal = rs.getString(&quot;sal&quot;);</span></span><br><span class="line"><span class="comment">                // 等同于String empno = rs.getString(1);但不健壮，注意此处的sal等不是字段的名称，是查询结果的名称，如果起了别名要使用查询结果的别名</span></span><br><span class="line"><span class="comment">                System.out.println(empno + &quot;,&quot; + ename + &quot;,&quot; + sal);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                eg：根据下标取值，以特定类型取出，查询三行更改为：</span></span><br><span class="line"><span class="comment">                         int empno = rs.getInt(1);</span></span><br><span class="line"><span class="comment">                         String ename = rs.getString(2);</span></span><br><span class="line"><span class="comment">                         double sal = rs.getDouble(3);</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6、释放资源</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                if (rs != null) &#123;</span></span><br><span class="line"><span class="comment">                    try&#123;</span></span><br><span class="line"><span class="comment">                        rs.close();</span></span><br><span class="line"><span class="comment">                    &#125; catch(SQLException e) &#123;</span></span><br><span class="line"><span class="comment">                        e.printStackTrace();</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">         <span class="keyword">if</span> (stmt != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                 stmt.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">            &#125;</span><br><span class="line">         <span class="keyword">if</span> (conn != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    conn.close();</span><br><span class="line">                 &#125; <span class="keyword">catch</span>(SQLException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="01-读取配置文件"><a href="#01-读取配置文件" class="headerlink" title="01 读取配置文件"></a>01 读取配置文件</h1>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JDBC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL · 高级篇②</title>
      <link href="/2022/04/08/JAVA/1.Java/MySQL/MySQL%20%C2%B7%20%E9%AB%98%E7%BA%A7%E7%AF%87%E2%91%A1/"/>
      <url>/2022/04/08/JAVA/1.Java/MySQL/MySQL%20%C2%B7%20%E9%AB%98%E7%BA%A7%E7%AF%87%E2%91%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="21-事务"><a href="#21-事务" class="headerlink" title="21 事务"></a>21 事务</h1><h2 id="21-1-事务的概念"><a href="#21-1-事务的概念" class="headerlink" title="21.1 事务的概念"></a>21.1 事务的概念</h2><ul><li>事务：一个事务是一个完整的业务逻辑单元，不可再分</li><li>事务相关的语句：DML（insert delete update）因为这三个语句都是和数据库表当中的“数据”相关的，事务的存在是为了保证数据的完整性，安全性</li><li>InnoDB存储引擎：提供一组用来记录事务性活动的日志文件</li></ul><h2 id="21-2-提交、回滚事务"><a href="#21-2-提交、回滚事务" class="headerlink" title="21.2 提交、回滚事务"></a>21.2 提交、回滚事务</h2><ul><li>在事物的执行过程中，我们可以提交事物、回滚事务（见演示事务21.4）<ul><li>提交事物 commit;   清空事务性活动的日志文件，将数据全部彻底持久化到数据表中，标志着一种全部成功的事务结束</li><li>回滚事务 rollback;   将之前的所有DML操作全部撤销，并且清空事务性活动的日志文件，标志着一种全部失败的事务结束</li></ul></li><li>mysql默认情况下，支持自动提交事务：<ul><li>每执行一条mysql语句，则提交一次</li><li>关闭自动提交：start transaction;</li></ul></li></ul><h2 id="21-3-事务的特性"><a href="#21-3-事务的特性" class="headerlink" title="21.3 事务的特性"></a>21.3 事务的特性</h2><ul><li><p>事务的特性：包括四大特性（ACID）</p><ul><li>A   原子性：事务是最小的工作单元，不可再分</li><li>C   一致性：事务必须保证多条DML语句同时成功或者同时失败</li><li>I   隔离性：事务A与事务B之间具有隔离，和多线程并发访问同一张表一样</li><li>D   持久性：最终数据必须持久化到硬盘文件中，事务成功结束的保障</li></ul></li><li><p>事务之间的隔离性：存在4个隔离级别：</p><ul><li>第一级别：读未提交（read uncommitted）<ul><li>对方事务还没有提交，我方当前事务就可以读取到对方未提交的数据，这种隔离级别一般都是理论上的</li><li>读未提交存在脏读（Dirty Read）现象：表示读到了脏数据</li></ul></li><li>第二级别：读已提交（read committed）<ul><li>对方事务提交之后的数据我方可以读取到，但每次读取的数据是会不一样的，这种隔离级别读到的数据是真实的</li><li>解决了：脏读现象问题</li><li>存在的问题：不可重复读取</li></ul></li><li>第三级别：可重复读（repeatable read）<ul><li>对方事务开启后，我方每次在事务中读取到的数据都是一致的，永远读取的都是刚开启时的事务，这种隔离级别可能出现幻影读</li><li>解决了：不可重复读问题</li><li>存在的问题：读取到的数据是幻象</li></ul></li><li>第四级别：序列化读&#x2F;串行化读（serializable） <ul><li>这种隔离级别表示事务排队，不能并发，读到的数据都是真实的</li><li>解决了：所有问题</li><li>存在的问题：效率低，需要事务排队</li></ul></li><li>oracle数据库默认的隔离级别是：读已提交</li><li>mysql数据库默认的隔离级别是：可重复读</li></ul></li><li><p>演示事务隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 第一级别：读未提交</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read uncommitted;</span><br><span class="line"><span class="comment">-- 第二级别：读已提交</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level read committed;</span><br><span class="line"><span class="comment">-- 第三级别：可重复读</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level repeatable read;</span><br><span class="line"><span class="comment">-- 第四级别：序列化/串行化</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> transaction isolation level serializable;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- mysql远程登录：</span></span><br><span class="line">mysql <span class="operator">-</span>h192<span class="number">.168</span><span class="number">.151</span><span class="number">.18</span> <span class="operator">-</span>uroot <span class="operator">-</span>p444</span><br></pre></td></tr></table></figure></li></ul><h2 id="21-4-演示事务"><a href="#21-4-演示事务" class="headerlink" title="21.4 演示事务"></a>21.4 演示事务</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 演示事务的准备表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> t_user;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">username <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示：mysql中的事务是支持自动提交的，只要执行一条DML则提交一次</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t_user(username) <span class="keyword">values</span>(<span class="string">&#x27;zs&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.03</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> zs       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> zs       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 演示：使用start transaction;关闭自动提交机制</span></span><br><span class="line"><span class="comment">---------------------- 提交事务：commit; -----------------------------</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;  </span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t_user(username) <span class="keyword">values</span>(<span class="string">&#x27;lisi&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> zs       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> lisi     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="number">2</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t_user(username) <span class="keyword">values</span>(<span class="string">&#x27;wangwu&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> zs       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">2</span> <span class="operator">|</span> lisi     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">3</span> <span class="operator">|</span> wangwu   <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="number">3</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.02</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> zs       <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="number">1</span> <span class="type">row</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line"><span class="comment">---------------------- 回滚事务：rollback; ----------------------------</span></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">start</span> transaction;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t_user(username) <span class="keyword">values</span>(<span class="string">&#x27;wangwu&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t_user(username) <span class="keyword">values</span>(<span class="string">&#x27;rose&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">insert</span> <span class="keyword">into</span> t_user(username) <span class="keyword">values</span>(<span class="string">&#x27;jack&#x27;</span>);</span><br><span class="line">Query OK, <span class="number">1</span> <span class="type">row</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> zs       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> wangwu   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> rose     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> jack     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">commit</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> zs       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> wangwu   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> rose     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> jack     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">rollback</span>;</span><br><span class="line">Query OK, <span class="number">0</span> <span class="keyword">rows</span> affected (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> t_user;</span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span> id <span class="operator">|</span> username <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">1</span> <span class="operator">|</span> zs       <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">4</span> <span class="operator">|</span> wangwu   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">5</span> <span class="operator">|</span> rose     <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span>  <span class="number">6</span> <span class="operator">|</span> jack     <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">----+----------+</span></span><br><span class="line"><span class="number">4</span> <span class="keyword">rows</span> <span class="keyword">in</span> <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure><h1 id="22-索引"><a href="#22-索引" class="headerlink" title="22 索引"></a>22 索引</h1><h2 id="22-1-索引的概念"><a href="#22-1-索引的概念" class="headerlink" title="22.1 索引的概念"></a>22.1 索引的概念</h2><ul><li><p>索引的概念及作用：</p><ul><li>索引在数据库表的字段上添加的，时为了提高查询效率存在的一种机制</li><li>一张表的一个字段可以添加一个索引，多个字段联合起来也可以添加索引</li><li>索引底层采用的数据结构是：B树，遵循左小右大原则存放，类似中序遍历方式取数据</li></ul></li><li><p>在数据库方面，查询一张表的时候有两种检索方式：</p><ul><li>第一种方式：全表顺序扫描</li><li>第二种方式：根据索引检索（效率很高）</li></ul></li><li><p>索引的注意事项：</p><ul><li>索引不能随意的添加索引，因为索引也是数据库当中的对象，有维护成本的</li><li>表中的数据经常被修改就不适合添加，因为数据一旦修改，索引就需要重新排序，进行维护</li><li>在mysql中，主键上、以及具有unique约束的字段自动会添加索引</li><li>在唯一性比较弱的字段上添加索引用处不大</li></ul></li><li><p>需要添加索引的条件：</p><ul><li>数据量庞大（根据客户的需求，根据线上的环境）</li><li>该字段很少的DML操作（因为字段经常进行修改操作，索引也经常需要维护）</li></ul><ul><li>该字段经常出现在where子句中（根据哪个字段常使用查询）</li></ul></li></ul><h2 id="22-2-索引的使用"><a href="#22-2-索引的使用" class="headerlink" title="22.2 索引的使用"></a>22.2 索引的使用</h2><ul><li><p>索引的创建和删除：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建索引对象：</span></span><br><span class="line"><span class="keyword">create</span> index 索引名称 <span class="keyword">on</span> 表名(字段名);</span><br><span class="line"><span class="comment">-- 删除索引对象：</span></span><br><span class="line"><span class="keyword">drop</span> index 索引名称 <span class="keyword">on</span> 表名;</span><br><span class="line"><span class="comment">-- 查看索引：根据扫描记录,zhiyo</span></span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp wwhere ename <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span>;</span><br></pre></td></tr></table></figure></li><li><p>索引的失效：索引是各种数据库进行优化的各种手段，所以尽量避免索引失效的情况是一种优化的策略</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.模糊查询的时候，第一个通配符使用的是%，索引就无法比对</span></span><br><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="keyword">like</span> <span class="string">&#x27;%A%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.使用or时，必须两边字段都有索引，否则会失效</span></span><br><span class="line"><span class="comment">-- 建议使用union</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp wwhere ename <span class="operator">=</span> <span class="string">&#x27;KING&#x27;</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span>; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.使用复合索引（两个字段构成的索引）的时候，没有使用左侧的列查找</span></span><br><span class="line"><span class="keyword">create</span> index emp_job_sal_index <span class="keyword">on</span> emp(job, sal);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">=</span> <span class="number">800</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.where中索引列参加了运算</span></span><br><span class="line"><span class="keyword">create</span> index emp_sal _index <span class="keyword">on</span> emp(sal);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">=</span> <span class="number">800</span>;  <span class="comment">-- 索引可以使用</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">+</span><span class="number">1</span> <span class="operator">=</span> <span class="number">800</span>;  <span class="comment">-- 索引失效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.where中索引列使用了函数</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> <span class="built_in">lower</span>(ename) <span class="operator">=</span> <span class="string">&#x27;smith&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="22-3-原理和分类"><a href="#22-3-原理和分类" class="headerlink" title="22.3 原理和分类"></a>22.3 原理和分类</h2><ul><li><p>索引的原理：</p><ul><li>索引在mysql中通过B树的形式存在，来缩小扫描范围，底层索引进行了排序和分区</li><li>索引会携带数据在表中的“物理地址”，最终通过索引检索到数据之后，获取到关联的物理地址</li><li>通过物理地址定位表中的数据，效率是最高的</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> ename <span class="operator">=</span> <span class="string">&#x27;SMITH&#x27;</span>;</span><br><span class="line"><span class="comment">-- 通过索引转换为：</span></span><br><span class="line"><span class="keyword">select</span> ename <span class="keyword">from</span> emp <span class="keyword">where</span> 物理地址 <span class="operator">=</span> <span class="number">0x3</span>;</span><br></pre></td></tr></table></figure></li><li><p>索引的分类：</p><ul><li>单一索引：给单个字段添加索引</li><li>复合索引：给多个字段联合起来添加1个索引</li><li>主键索引：主键上会自动添加索引</li><li>唯一性索引：有unique约束的字段上会自动添加索引</li><li>……</li></ul></li></ul><h1 id="23-视图"><a href="#23-视图" class="headerlink" title="23 视图"></a>23 视图</h1><h2 id="23-1-视图的概念"><a href="#23-1-视图的概念" class="headerlink" title="23.1 视图的概念"></a>23.1 视图的概念</h2><ul><li>视图（view）：站在不同的角度去看一份数据</li><li>注意事项：只有DQL语句才能以视图对象的方式创建出来</li></ul><h2 id="23-2-视图的使用"><a href="#23-2-视图的使用" class="headerlink" title="23.2 视图的使用"></a>23.2 视图的使用</h2><ul><li><p>视图的创建和删除：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建视图对象：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> myview <span class="keyword">as</span> <span class="keyword">select</span> empno,ename <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 删除视图对象：</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">view</span> myview;</span><br></pre></td></tr></table></figure></li><li><p>对视图进行增删改查：会影响到原表数据（通过视图影响原表数据的，而不是直接操作的原表）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> emp_bak <span class="keyword">as</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建视图对象：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> myview1 <span class="keyword">as</span> <span class="keyword">select</span> empno,ename,sal <span class="keyword">from</span> emp_bak;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过视图修改原表数据：</span></span><br><span class="line"><span class="keyword">update</span> myview1 <span class="keyword">set</span> ename<span class="operator">=</span><span class="string">&#x27;hehe&#x27;</span>,sal<span class="operator">=</span><span class="number">1</span> <span class="keyword">where</span> empno <span class="operator">=</span> <span class="number">7369</span>; </span><br><span class="line"><span class="comment">-- 通过视图删除原表数据：</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> myview1 <span class="keyword">where</span> empno <span class="operator">=</span> <span class="number">7369</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="23-3-视图的作用"><a href="#23-3-视图的作用" class="headerlink" title="23.3 视图的作用"></a>23.3 视图的作用</h2><ul><li>视图的作用：<ul><li>简化select语句，当select语言需在多处反复使用时，可以创建其视图对象来使用</li><li>视图可以隐藏表的实现细节，保密级别较高的系统，数据库只对外提供相关的视图</li><li>程序员只能对视图对象进行CRUD（术语：增删改查）</li></ul></li></ul><h1 id="24-DBA命令"><a href="#24-DBA命令" class="headerlink" title="24 DBA命令"></a>24 DBA命令</h1><h2 id="24-1-导入导出数据"><a href="#24-1-导入导出数据" class="headerlink" title="24.1 导入导出数据"></a>24.1 导入导出数据</h2><ul><li><p>导入数据：在windows的dos命令窗口中执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 导出整个库：</span></span><br><span class="line">mysqldump bjpowernode<span class="operator">&gt;</span>D:\bjpowernode.sql <span class="operator">-</span>uroot <span class="operator">-</span>p333</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出指定数据库当中的指定表：</span></span><br><span class="line">mysqldump bjpowernode emp<span class="operator">&gt;</span>D:\bjpowernode.sql <span class="operator">-</span>uroot –p123</span><br></pre></td></tr></table></figure></li><li><p>导出数据：需要先登录到mysql数据库服务器上</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database bjpowernode;</span><br><span class="line">use bjpowernode;</span><br><span class="line">source D:\bjpowernode.sql</span><br></pre></td></tr></table></figure></li></ul><h2 id="24-2-其他常用命令"><a href="#24-2-其他常用命令" class="headerlink" title="24.2 其他常用命令"></a>24.2 其他常用命令</h2><ul><li>新建用户：create user …（用户名） identif by …（密码）;</li><li>授权：grant …</li><li>回收：revoke … from …</li></ul><h1 id="25-数据库设计"><a href="#25-数据库设计" class="headerlink" title="25 数据库设计"></a>25 数据库设计</h1><h2 id="25-1-数据库设计范式"><a href="#25-1-数据库设计范式" class="headerlink" title="25.1 数据库设计范式"></a>25.1 数据库设计范式</h2><ul><li>数据库设计范式：数据库表的设计依据</li><li>数据库设计范式的作用：按照三范式设计的表，可以避免表中的数据的冗余、空间的浪费</li></ul><h2 id="25-2-数据库设计三范式"><a href="#25-2-数据库设计三范式" class="headerlink" title="25.2 数据库设计三范式"></a>25.2 数据库设计三范式</h2><ul><li><p>第一范式：任何一张表都应该有主键（包括联合主键），并且每一个字段原子性不可再分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">sno    sname       tno    tname</span><br><span class="line"><span class="comment">-------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>张三         <span class="number">001</span>   王老师</span><br><span class="line"><span class="number">1002</span>李四         <span class="number">002</span>         赵老师</span><br><span class="line"><span class="number">1003</span>王五         <span class="number">001</span>   王老师</span><br><span class="line"><span class="number">1001</span>   张三         <span class="number">002</span>         赵老师</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不满足第一范式，没有主键</span></span><br><span class="line"><span class="comment">-- 解决：增加联合主键 sno和tno</span></span><br><span class="line">sno(pk)   tno(pk)sname      tname</span><br><span class="line"><span class="comment">-------------------------------------------</span></span><br><span class="line"><span class="number">1001</span><span class="number">001</span>         张三         王老师</span><br><span class="line"><span class="number">1002</span><span class="number">002</span>李四         赵老师</span><br><span class="line"><span class="number">1003</span><span class="number">001</span>   王五         王老师</span><br><span class="line"><span class="number">1001</span>   <span class="number">002</span>张三         赵老师</span><br></pre></td></tr></table></figure></li><li><p>第二范式（多对多，复合主键）：建立在第一范式的基础之上，所有非主键字段完全依赖主键，不能产生部分依赖</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不满足第一范式，没有主键</span></span><br><span class="line"><span class="comment">-- 解决：增加联合主键 sno和tno</span></span><br><span class="line">sno(pk)   tno(pk)sname      tname</span><br><span class="line"><span class="comment">-------------------------------------------</span></span><br><span class="line"><span class="number">1001</span><span class="number">001</span>         张三         王老师</span><br><span class="line"><span class="number">1002</span><span class="number">002</span>李四         赵老师</span><br><span class="line"><span class="number">1003</span><span class="number">001</span>   王五         王老师</span><br><span class="line"><span class="number">1001</span>   <span class="number">002</span>张三         赵老师</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不满足第二范式：产生了部分依赖，数据冗余、空间浪费</span></span><br><span class="line"><span class="comment">-- 问题：非主键字段tname部分依赖tno，sname部分依赖sno</span></span><br><span class="line"><span class="comment">-- 解决：多对多，三张表，关系表两个外键</span></span><br><span class="line">sno(pk)  sname     </span><br><span class="line"><span class="comment">-------------------</span></span><br><span class="line"><span class="number">1001</span>     张三        </span><br><span class="line"><span class="number">1002</span> 李四        </span><br><span class="line"><span class="number">1003</span> 王五          </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">tno(pk)    tname</span><br><span class="line"><span class="comment">-------------------</span></span><br><span class="line"><span class="number">001</span>    王老师</span><br><span class="line"><span class="number">002</span>         赵老师</span><br><span class="line"></span><br><span class="line">id(pk)     sno(pk)    tno(pk)</span><br><span class="line"><span class="comment">-----------------------------</span></span><br><span class="line"><span class="number">1</span>       <span class="number">1001</span><span class="number">001</span></span><br><span class="line"><span class="number">2</span><span class="number">1002</span>      <span class="number">002</span></span><br><span class="line"><span class="number">3</span><span class="number">1003</span><span class="number">001</span></span><br><span class="line"><span class="number">4</span><span class="number">1001</span><span class="number">002</span></span><br></pre></td></tr></table></figure></li><li><p>第三范式（一对多，单一主键）：建立在第二范式的基础之上，所有非主键字段直接依赖主键，不能产生传递依赖</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">sno(pk)  sname       cno         cname</span><br><span class="line"><span class="comment">-------------------------------------------</span></span><br><span class="line"><span class="number">1001</span>张三         <span class="number">01</span> 一年一班</span><br><span class="line"><span class="number">1002</span>李四         <span class="number">02</span>        一年二班</span><br><span class="line"><span class="number">1003</span>王五         <span class="number">03</span> 一年三班</span><br><span class="line"><span class="number">1004</span>   赵六         <span class="number">03</span>        一年三班</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 不满足第三范式：产生了传递依赖，产生了数据冗余</span></span><br><span class="line"><span class="comment">-- 问题：一年一班依赖01，01依赖1001</span></span><br><span class="line"><span class="comment">-- 解决：一对多，两张表，多的表加外键</span></span><br><span class="line">sno(pk)  sname       cno(fk)</span><br><span class="line"><span class="comment">-------------------------------</span></span><br><span class="line"><span class="number">1001</span>张三         <span class="number">01</span></span><br><span class="line"><span class="number">1002</span>李四         <span class="number">02</span>      </span><br><span class="line"><span class="number">1003</span>王五         <span class="number">03</span></span><br><span class="line"><span class="number">1004</span>   赵六         <span class="number">03</span>      </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> cno(pk)     cname</span><br><span class="line"><span class="comment">---------------------</span></span><br><span class="line"> <span class="number">01</span>    一年一班</span><br><span class="line"> <span class="number">02</span>         一年二班</span><br><span class="line"> <span class="number">03</span>    一年三班</span><br></pre></td></tr></table></figure></li></ul><h2 id="25-2-数据库设计总结"><a href="#25-2-数据库设计总结" class="headerlink" title="25.2 数据库设计总结"></a>25.2 数据库设计总结</h2><ul><li><p>多对多：三张表，关系表两个外键</p></li><li><p>一对多：两张表，多的表加外键</p></li><li><p>一对一：字段多，表庞大，需要拆分表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 方案一：一对一，外键唯一（添加外键，并且外键唯一约束）</span></span><br><span class="line"><span class="comment">-- 用户登录表t_user_login </span></span><br><span class="line">id(pk)  username  password</span><br><span class="line"><span class="comment">--------------------------------------</span></span><br><span class="line"><span class="number">1</span>zs<span class="number">123</span></span><br><span class="line"><span class="number">2</span>ls<span class="number">456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户登录表t_user_login </span></span><br><span class="line">id(pk)   realnametel  userid(fk<span class="operator">+</span><span class="keyword">unique</span>)....</span><br><span class="line"><span class="comment">-----------------------------------------------------------</span></span><br><span class="line"><span class="number">1</span>张三<span class="number">1111111111</span><span class="number">2</span></span><br><span class="line"><span class="number">2</span>李四<span class="number">1111415621</span><span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方案二：一对一，主键共享</span></span><br><span class="line"><span class="comment">-- 用户登录表t_user_login  </span></span><br><span class="line">id(pk)  username      password</span><br><span class="line"><span class="comment">------------------------------------</span></span><br><span class="line"><span class="number">1</span>zs<span class="number">123</span></span><br><span class="line"><span class="number">2</span>ls<span class="number">456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 用户详细信息表t_user_detail </span></span><br><span class="line">id(pk<span class="operator">+</span>fk)realnametel....</span><br><span class="line"><span class="comment">------------------------------------------------</span></span><br><span class="line"><span class="number">1</span>张三<span class="number">1111111111</span></span><br><span class="line"><span class="number">2</span>李四<span class="number">1111415621</span></span><br></pre></td></tr></table></figure></li><li><p>注意事项：</p><ul><li>在实际的开发中，以满足客户的需求为主，有的时候会拿冗余换执行速度</li><li>表和表之间连接次数越多，效率越低（笛卡尔积）</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL · 基础篇①</title>
      <link href="/2022/04/07/JAVA/1.Java/MySQL/MySQL%20%C2%B7%20%E5%9F%BA%E7%A1%80%E7%AF%87%E2%91%A0/"/>
      <url>/2022/04/07/JAVA/1.Java/MySQL/MySQL%20%C2%B7%20%E5%9F%BA%E7%A1%80%E7%AF%87%E2%91%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="01-数据库概述"><a href="#01-数据库概述" class="headerlink" title="01 数据库概述"></a>01 数据库概述</h1><h2 id="1-1-数据库"><a href="#1-1-数据库" class="headerlink" title="1.1 数据库"></a>1.1 数据库</h2><ul><li>DataBase，简称DB：数据库，是按照一定格式存储数据的一些文件的组合</li><li>三者之间的关系：DBMS——（执行）——&gt;SQL——（操作）——&gt;DB</li></ul><h2 id="1-2-数据库管理系统"><a href="#1-2-数据库管理系统" class="headerlink" title="1.2 数据库管理系统"></a>1.2 数据库管理系统</h2><ul><li>DataBase Management System，简称DBMS：数据库管理系统，是专门用来管理数据库中数据的，对数据库当中的数据进行增删改查</li><li>eg：MySQL、Oracle、DB2、Sybase SqlServer…</li></ul><h2 id="1-3-SQL简述"><a href="#1-3-SQL简述" class="headerlink" title="1.3 SQL简述"></a>1.3 SQL简述</h2><ul><li><p>Structure Query Language，简称SQL：结构化查询语言，数据库管理系统可以通过SQL管理数据库，定义和操作数据，维护数据的完整性和安全性</p></li><li><p>SQL的优点：</p><ul><li>简单易学，具有很强的操作性</li><li>绝大多数重要的数据库管理系统均支持SQL</li><li>高度非过程化；用SQL操作数据库时大部分的工作由DBMS自动完成</li></ul></li><li><p>SQL的分类：</p><ul><li><p>DDL(Data Definition Language) 数据定义语言，用来操作数据库、表、列等</p><p>eg：CREATE（创建）、ALTER（删除结构）、DROP（修改）</p></li><li><p>DML(Data Manipulation Language) 数据操作语言，用来操作数据库中表里的数据</p><p>eg；INSERT（添加）、DELETE（删除数据）、UPDATE（修改）</p></li><li><p>DQL(Data Query Language) 数据查询语言，用来查询数据</p><p>eg：SELECT（查询）</p></li><li><p>DCL(Data Control Language) 数据控制语言，用来操作访问权限和安全级别</p><p>eg：COMMIT（提交）、ROLLBACK（撤销）、SAVEPOINT（保存点）、GRANT（赋予权限）、REVOKE（回收权限）</p></li></ul></li></ul><h2 id="1-4-SQL语言规则与规范"><a href="#1-4-SQL语言规则与规范" class="headerlink" title="1.4 SQL语言规则与规范"></a>1.4 SQL语言规则与规范</h2><ul><li><p>SQL的基本规则：</p><ul><li>SQL 可以写在一行或者多行。为了提高可读性，各子句分行写，必要时使用缩进</li><li>每条命令以 ; 或 \g 或 \G 结束（\g和\G：调换行列）</li><li>关键字不能被缩写也不能分行</li><li>关于标点符号：<ul><li>必须保证所有的()、单引号、双引号是成对结束的</li><li>必须使用英文状态下的半角输入方式</li><li>字符串型和日期时间类型的数据可以使用单引号（’ ‘）表示</li><li>列的别名，尽量使用双引号（” “），而且不建议省略as</li></ul></li></ul></li><li><p>SQL的大小写规范（建议遵守）：</p><ul><li>MySQL 在 Windows 环境下是大小写不敏感的</li><li>MySQL 在 Linux 环境下是大小写敏感的<ul><li>数据库名、表名、表的别名、变量名是严格区分大小写的</li><li>关键字、函数名、列名(或字段名)、列的别名(字段的别名) 是忽略大小写的</li></ul></li><li>推荐采用统一的书写规范：<ul><li>数据库名、表名、表别名、字段名、字段别名等都小写</li><li>SQL 关键字、函数名、绑定变量等都大写</li></ul></li></ul></li><li><p>SQL的注释：</p><ul><li>单行注释：– 注释文字（–后面必须包含一个空格）、#注释文字（MySQL特有的方式）</li><li>多行注释：&#x2F;* 注释文字  *&#x2F;（不能嵌套）</li></ul></li><li><p>SQL的命名规则：</p><ul><li>数据库、表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含 A–Z， a–z，0–9， _共63个字符</li><li>数据库名、表名、字段名等对象名中间不要包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>必须保证你的字段没有和保留字、数据库系统或常用方法冲突。如果坚持使用，请在SQL语句中使用&#96;（着重号）引起来</li><li>保持字段名和类型的一致性，在命名字段并为其指定数据类型的时候一定要保证一致性</li></ul></li></ul><h2 id="1-5-数据库的三大范式"><a href="#1-5-数据库的三大范式" class="headerlink" title="1.5 数据库的三大范式"></a>1.5 数据库的三大范式</h2><ul><li>第一范式(1NF)是指数据库表的每一列都是不可分割的基本数据线；也就是说：每列的值具有原子性，不可再分割</li><li>第二范式(2NF)是在第一范式(1NF)的基础上建立起来得，满足第二范式(2NF)必须先满足第一范式(1NF)。如果表是单主键，那么主键以外的列必须完全依赖于主键；如果表是复合主键，那么主键以外的列必须完全依赖于主键，不能仅依赖主键的一部分</li><li>第三范式(3NF)是在第二范式的基础上建立起来的，即满足第三范式必须要先满足第二范式。第三范式(3NF)要求：表中的非主键列必须和主键直接相关而不能间接相关；也就是说：非主键列之间不能相关依赖</li></ul><h1 id="02数据库的数据类型"><a href="#02数据库的数据类型" class="headerlink" title="02数据库的数据类型"></a>02数据库的数据类型</h1><ul><li>MySQL数据库的数据类型：整数类型、浮点数类型、定点 数类型、日期和时间类型、字符串类型、二进制…</li></ul><h2 id="2-1-整数类型"><a href="#2-1-整数类型" class="headerlink" title="2.1 整数类型"></a>2.1 整数类型</h2><ul><li><p>根据数值取值范围的不同，整数类型可分为五种：TINYINT、SMALUNT、MEDIUMINT、INT和 BIGINT</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>无符号数的取值范围</th><th>有符号数的取值范围</th></tr></thead><tbody><tr><td>TINYINT</td><td>1</td><td>0~255</td><td>-128~127</td></tr><tr><td>SMALLINT</td><td>2</td><td>0~65535</td><td>-32768~32768</td></tr><tr><td>MEDIUMINT</td><td>3</td><td>0~16777215</td><td>-8388608~8388608</td></tr><tr><td>INT</td><td>4</td><td>0~4294967295</td><td>-2147483648~ 2147483648</td></tr><tr><td>BIGINT</td><td>8</td><td>0~18446744073709551615</td><td>-9223372036854775808~9223372036854775808</td></tr></tbody></table></li></ul><h2 id="2-2-浮点数类型和定点数类型"><a href="#2-2-浮点数类型和定点数类型" class="headerlink" title="2.2 浮点数类型和定点数类型"></a>2.2 浮点数类型和定点数类型</h2><ul><li><p>在MySQL数据库中使用浮点数和定点数来存储小数：</p><ul><li>浮点数类型有两种：单精度浮点数类型（FLOAT)、双精度浮点数类型（DOUBLE)</li><li>定点数类型只有一种即DECIMAL类型</li></ul><table><thead><tr><th>数据类型</th><th>字节数</th><th>有符号的取值范围</th><th>无符号的取值范围</th></tr></thead><tbody><tr><td>FLOAT</td><td>4</td><td>-3.402823466E+38~-1.175494351E-38</td><td>0和1.175494351E-38~3.402823466E+38</td></tr><tr><td>DOUBLE</td><td>8</td><td>-1.7976931348623157E+308~2.2250738585072014E-308</td><td>0和2.2250738585072014E-308~1.7976931348623157E+308</td></tr><tr><td>DECIMAL（M,D）</td><td>M+2</td><td>-1.7976931348623157E+308~2.2250738585072014E-308</td><td>0和2.2250738585072014E-308~1.7976931348623157E+308</td></tr></tbody></table></li><li><p>DECIMAL类型的取值范围与DOUBLE类型相同，但是DECIMAL类型的有效取值范围是由M和D决定的。其中，M表示的是数据的长度，D表示的是小数点后的长度。eg：将数据类型为DECIMAL(6,2)的数据6.5243 插人数据库后显示的结果为6.52</p></li></ul><h2 id="2-3-字符串类型"><a href="#2-3-字符串类型" class="headerlink" title="2.3 字符串类型"></a>2.3 字符串类型</h2><ul><li><p>字符串类型有两种：CHAR 和、VARCHAR （两者不同的是：VARCHAR存储可变长度的字符串）</p><ul><li>CHAR(M)类型：不管插入值的长度是实际是多少它所占用的存储空间都是M个字节</li><li>VARCHAR(M)类型：所对应的数据所占用的字节数为实际长度加1</li></ul><table><thead><tr><th>插入值</th><th>CHAR(3)</th><th>存储需求</th><th>VARCHAR(3)</th><th>存储需求</th></tr></thead><tbody><tr><td>‘’</td><td>‘’</td><td>3个字节</td><td>‘’</td><td>1个字节</td></tr><tr><td>‘a’</td><td>‘a’</td><td>3个字节</td><td>‘a’</td><td>2个字节</td></tr><tr><td>‘ab’</td><td>‘ab’</td><td>3个字节</td><td>‘ab’</td><td>3个字节</td></tr><tr><td>‘abc’</td><td>‘ab’</td><td>3个字节</td><td>‘abc’</td><td>4个字节</td></tr><tr><td>‘abcd’</td><td>‘ab’</td><td>3个字节</td><td>‘abc’</td><td>4字节</td></tr><tr><td>4.字符串类型</td><td></td><td></td><td></td><td></td></tr></tbody></table></li></ul><h2 id="2-4-文本类型"><a href="#2-4-文本类型" class="headerlink" title="2.4 文本类型"></a>2.4 文本类型</h2><ul><li><p>文本类型用于表示大文本数据。eg：文章内容、评论、详情等</p><table><thead><tr><th>数据类型</th><th>储存范围</th></tr></thead><tbody><tr><td>TINYTEXT</td><td>0~255字节</td></tr><tr><td>TEXT</td><td>0~65535字节</td></tr><tr><td>MEDIUMTEXT</td><td>0~16777215字节</td></tr><tr><td>LONGTEXT</td><td>0~4294967295字节</td></tr></tbody></table></li></ul><h2 id="2-5-日期与时间类型"><a href="#2-5-日期与时间类型" class="headerlink" title="2.5 日期与时间类型"></a>2.5 日期与时间类型</h2><ul><li><p>日期和时间的数据类型分别是 ：YEAR、DATE、TIME、DATETIME 和 TIMESTAMP</p><table><thead><tr><th>数据类型</th><th>字节数</th><th>取值范围</th><th>日期格式</th><th>零值</th></tr></thead><tbody><tr><td>YEAR</td><td>1</td><td>1901~2155</td><td>YYYY</td><td>0000</td></tr><tr><td>DATE</td><td>4</td><td>1000-01-01~9999-12-31</td><td>YYYY-MM-DD</td><td>0000-00-00</td></tr><tr><td>TIME</td><td>3</td><td>-838：59：59~ 838：59：59</td><td>HH:MM:SS</td><td>00:00:00</td></tr><tr><td>DATETIME</td><td>8</td><td>1000-01-01 00:00:00~9999-12-31 23:59:59</td><td>YYYY-MM-DD HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr><tr><td>TIMESTAMP</td><td>4</td><td>1970-01-01 00:00:01~2038-01-19 03:14:07</td><td>YYYY-MM-DD HH:MM:SS</td><td>0000-00-00 00:00:00</td></tr></tbody></table></li><li><p>YEAR类型：用于表示年份，有以下三种格式</p><ul><li><p>使用2位字符串或数字表示，范围为‘1901’—‘2155’或1901—2155</p><p>eg：输人 ‘2019’或2019，插入到数据库中的值均为2019</p></li><li><p>使用2位字符串表示，范围为‘00’—‘99’。其中，‘00’—‘69’范围的值会被转换为 2000—2069范围的YEAR值，‘70’—‘99’范围的值会被转换为1970—1999范围的YEAR 值</p><p>eg：输人’19’，插入到数据库中的值为2019。</p></li><li><p>使用2位数字表示，范围为1—99。其中，1—69范围的值会被转换为2001— 2069范围的YEAR值，70—99范围的值会被转换为1970—1999范围的YEAR值</p><p>eg：输人19插入到数据库中的值为2019</p></li><li><p>YEAER类型的注意事项：一定要区分’0’和0，因为字符串格式的’0’表示的YEAR值是2000，而数字格式的0表示的YEAR值是0000</p></li></ul></li><li><p>TIME类型：用于表示时间值，显示形式一般为HH:MM:SS。其中，HH表示小时， MM表示分，SS表示秒，有以下三种格式</p><ul><li><p>以’D HH:MM:SS’字符串格式表示。其中，D表示日可取0—34之间的值，小时的值等于(DX24+HH)</p><p>eg：输入’2 11:30:50’插人数据库中的日期为59:30:50</p></li><li><p>以’HHMMSS’字符串格式或者HHMMSS数字格式表示</p><p>eg：输入’115454’或115454，插入数据库中的日期为11:54:54</p></li><li><p>使用CURRENT_TIME或NOW()输入当前系统时间</p></li></ul></li><li><p>DATETIME类型：用于表示日期和时间，显示形式为’YYYY-MM-DD HH: MM:SS’，其中，YYYY表示年，MM表示月，DD表示日，HH表示小时，MM表示分，SS 表示秒，有以下四种格式</p><ul><li><p>以’YYYY-MM-DD HH:MM:SS’或者’YYYYMMDDHHMMSS’字符串格式表示的日期和时间，取值范围为’1000-01-01 00:00:00’—‘9999-12-3 23:59:59’</p><p>eg：输入’2019-01-22 09:01:23’或 ‘20140122_0_90123’插入数据库中的 DATETIME 值都为 2019-01-22 09:01:23</p></li><li><p>以’YY-MM-DD HH:MM:SS’或者’YYMMDDHHMMSS’字符串格式表示的日期和时间，其中YY表示年，取值范围为’00’—‘99’。与DATE类型中的YY相同，‘00’— ‘69’范围的值会被转换为2000—2069范围的值，‘70’—‘99’范围的值会被转换为1970—1999范围的值</p></li><li><p>以YYYYMMDDHHMMSS或者YYMMDDHHMMSS数字格式表示的日期 和时间</p><p>eg：插入20190122090123或者190122090123，插入数据库中的DATETIME值都为2019-01-22 09:01:23</p></li><li><p>使用NOW来输人当前系统的日期和时间</p></li></ul></li><li><p>TIMESTAMP类型：用于表示日期和时间，它的显示形式与DATETIME相同但取值范围比DATETIME小。介绍几种TIMESTAMP类型与DATATIME类型不同的形式</p><ul><li>使用CURRENT_TIMESTAMP输入系统当前日期和时间</li><li>无任何输入、输入NULL时系统会输入系统当前日期和时间</li></ul></li></ul><h2 id="2-6-二进制类型"><a href="#2-6-二进制类型" class="headerlink" title="2.6 二进制类型"></a>2.6 二进制类型</h2><ul><li><p>在MySQL中常用BLOB存储二进制类型的数据。eg：图片、PDF文档等</p></li><li><p>BLOB类型分为如下四种：</p><table><thead><tr><th>数据类型</th><th>储存范围</th></tr></thead><tbody><tr><td>TINYBLOB</td><td>0~255字节</td></tr><tr><td>BLOB</td><td>0~65535字节</td></tr><tr><td>MEDIUMBLOB</td><td>0~16777215字节</td></tr><tr><td>LONGBLOB</td><td>0~4294967295字节</td></tr></tbody></table></li></ul><h1 id="03-数据库、数据表的操作"><a href="#03-数据库、数据表的操作" class="headerlink" title="03 数据库、数据表的操作"></a>03 数据库、数据表的操作</h1><h2 id="3-1-数据库的基本操作"><a href="#3-1-数据库的基本操作" class="headerlink" title="3.1 数据库的基本操作"></a>3.1 数据库的基本操作</h2><ul><li><p>选择使用数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 切换到数据库db1</span></span><br><span class="line">use db1;</span><br></pre></td></tr></table></figure></li><li><p>创建数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个叫db1的数据库</span></span><br><span class="line"><span class="keyword">create</span> database db1;</span><br></pre></td></tr></table></figure></li><li><p>查看数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看所有数据库（默认自带了四个数据库）</span></span><br><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建数据库后查看该数据库基本信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> database db1;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看当前使用的数据库</span></span><br><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure></li><li><p>删除数据库：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据库db1</span></span><br><span class="line"><span class="keyword">drop</span> database db1;</span><br></pre></td></tr></table></figure></li><li><p>将数据库的字符集修改为gbk：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> database db1 <span class="type">character</span> <span class="keyword">set</span> gbk;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3-2-数据表的基本操作"><a href="#3-2-数据表的基本操作" class="headerlink" title="3.2 数据表的基本操作"></a>3.2 数据表的基本操作</h2><ul><li><p>数据库创建成功后可在该数据库中创建数据表(简称为表)存储数据</p></li><li><p>注意事项：在操作数据表之前应使用“USE 数据库名;”指定操作是在哪个数据库中进行先关操作，否则会抛出“No database selected”错误</p></li><li><p>创建数据表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建学生表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">     id <span class="type">int</span>,</span><br><span class="line">     name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">     gender <span class="type">varchar</span>(<span class="number">10</span>),</span><br><span class="line">     birthday <span class="type">date</span></span><br><span class="line"> );</span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> create table [if not exists]表名(</span></span><br><span class="line"><span class="comment">字段名1 类型[(宽度)] [约束条件] [comment &#x27;字段说明&#x27;],</span></span><br><span class="line"><span class="comment">字段名2 类型[(宽度)] [约束条件] [comment &#x27;字段说明&#x27;],</span></span><br><span class="line"><span class="comment">字段名3 类型[(宽度)] [约束条件] [comment &#x27;字段说明&#x27;],</span></span><br><span class="line"><span class="comment">);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>查看数据表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查看当前数据库中所有表</span></span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建表后查看该表基本信息</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查看表的结构</span></span><br><span class="line"><span class="keyword">desc</span> student;</span><br><span class="line"><span class="keyword">describe</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- （查看表数据）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></li><li><p>修改数据表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改表名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student rename <span class="keyword">to</span> stu;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改字段名</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu change name sname <span class="type">varchar</span>(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 修改字段数据类型</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu modify sname <span class="type">int</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 增加字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">add</span> address <span class="type">varchar</span>(<span class="number">50</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除字段</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> stu <span class="keyword">drop</span> address;</span><br></pre></td></tr></table></figure></li><li><p>删除数据表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除数据表student</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> student;</span><br></pre></td></tr></table></figure></li></ul><h1 id="04-数据表的约束"><a href="#04-数据表的约束" class="headerlink" title="04 数据表的约束"></a>04 数据表的约束</h1><table><thead><tr><th>约束条件</th><th>说明</th></tr></thead><tbody><tr><td>PRIMARY KEY</td><td>主键约束用于唯一标识对应的记录</td></tr><tr><td>FOREIGN KEY</td><td>外键约束</td></tr><tr><td>NOT NULL</td><td>非空约束</td></tr><tr><td>UNIQUE</td><td>唯一性约束</td></tr><tr><td>DEFAULT</td><td>默认值约束，用于设置字段的默认值</td></tr></tbody></table><ul><li>以上五种约束条件针对表中字段进行限制从而保证数据表中数据的正确性和唯一性，实际上表的约束就是表中数据的限制条件</li></ul><h2 id="4-1-主键约束"><a href="#4-1-主键约束" class="headerlink" title="4.1 主键约束"></a>4.1 主键约束</h2><ul><li><p>主键约束（PRIMARY KEY）：用于唯一的标识表中的每一行，被标识为主键的数据在表中是唯一的且其值不能为空</p></li><li><p>主键约束的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 格式一：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line"> ...</span><br><span class="line"> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="keyword">primary</span> key</span><br><span class="line"> ...</span><br><span class="line"> ); </span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式二：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">...</span><br><span class="line">[<span class="keyword">constraint</span> 约束名] <span class="keyword">primary</span> key [字段名]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student01(</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line"><span class="keyword">primary</span> key(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>添加多列主键（联合主键）：主键由一张表中多个字段组成的</p><ul><li>联合主键的注意事项：<ul><li>当主键是由多个字段组成时，不能直接在字段名后面声明主键约束</li><li>一张表只能有一个主键，联合主键也是一个主键</li><li>联合主键的各列，每一列都不能为空</li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">...</span><br><span class="line"><span class="keyword">primary</span> key (字段<span class="number">1</span>,字段<span class="number">2</span>,...,字段n)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">deptid <span class="type">int</span>,</span><br><span class="line">salary <span class="keyword">double</span>，</span><br><span class="line"><span class="keyword">primary</span> key (name,deptid)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>修改表结构添加主键：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">...</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">add</span> <span class="keyword">primary</span> key (字段列表);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加单行主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">eid <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">deptid <span class="type">int</span>,</span><br><span class="line">salary <span class="keyword">double</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp4 <span class="keyword">add</span> <span class="keyword">primary</span> key (eid);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加多行主键</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">eid <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">deptid <span class="type">int</span>,</span><br><span class="line">salary <span class="keyword">double</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp5 <span class="keyword">add</span> <span class="keyword">primary</span> key (name,deptid);</span><br></pre></td></tr></table></figure></li><li><p>删除主键的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除单列主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp1 <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br><span class="line"><span class="comment">-- 删除多列主键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> emp5 <span class="keyword">drop</span> <span class="keyword">primary</span> key;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2-自增长约束"><a href="#4-2-自增长约束" class="headerlink" title="4.2 自增长约束"></a>4.2 自增长约束</h2><ul><li><p>自增长约束（auto_increment）：当主键定义为自增长后，每增加一条记录，主键会以相同的步长进行增长</p></li><li><p>自增长约束的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">字段名 数据类型 (<span class="keyword">primary</span> key) auto_increment</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student02(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment;</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>自增长字段的初始值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 格式一：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student02(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment;</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">)auto_increment <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式二：</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student02(</span><br><span class="line">id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment;</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student02 auto_increment <span class="operator">=</span> <span class="number">100</span>;</span><br></pre></td></tr></table></figure></li><li><p>自增长约束的注意事项：</p><ul><li><p>默认情况下，auto_increment的初始值是1，每增加一条记录，字段值自动加1</p></li><li><p>一个表中只能有一个字段使用auto_increment约束，且该字段必须有唯一索引，以避免序号重复（即为主键或者主键的一部分）</p></li><li><p>auto_increment字段必须具有NOT NULL 属性</p></li><li><p>auto_increment约束的字段只能是整数类型（TINTINT、SMALLINT、INT、BIGINT等）</p></li><li><p>auto_increment约束字段的最大值受该字段的数据类型约束，如果达到上限，auto_increment就会失效</p></li><li><p>delete和truncate在删除后自增列的变化：</p><ul><li>delete数据之后自动增长从断点开始</li><li>truncate数据之后自动增长从默认起始值开始</li></ul></li></ul></li></ul><h2 id="4-3-非空约束"><a href="#4-3-非空约束" class="headerlink" title="4.3 非空约束"></a>4.3 非空约束</h2><ul><li><p>非空约束（NOT NULL）：指的是字段的值不能为空</p></li><li><p>非空约束的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 格式一：</span></span><br><span class="line"><span class="operator">&lt;</span>字段名<span class="operator">&gt;</span><span class="operator">&lt;</span>数据类型<span class="operator">&gt;</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student02 (</span><br><span class="line">id <span class="type">int</span></span><br><span class="line">name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式二：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段 类型 <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student02 (</span><br><span class="line">  id <span class="type">int</span> ,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">20</span>) , </span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student02 modify name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li><li><p>删除非空约束的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 字段 类型</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student02 modify name <span class="type">varchar</span>(<span class="number">20</span>) ;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student02 modify address <span class="type">varchar</span>(<span class="number">20</span>) ;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-4-默认值约束"><a href="#4-4-默认值约束" class="headerlink" title="4.4 默认值约束"></a>4.4 默认值约束</h2><ul><li><p>默认值约束（DEFAULT）：用于给数据表中的字段指定默认值，即当在表中插入一条新记录时若未给该字段赋值，那么，数据库系统会自动为这个字段插人默认值</p></li><li><p>默认值约束的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 格式一：</span></span><br><span class="line">字段名 数据类型 <span class="keyword">DEFAULT</span> 默认值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student03(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    gender <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">&#x27;male&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式二：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 modify 列名 类型 <span class="keyword">default</span> 默认值;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student03 (</span><br><span class="line">  id <span class="type">int</span>,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">  gender <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">&#x27;male&#x27;</span> </span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student03 modify gender <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">default</span> <span class="string">&#x27;male&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>删除默认值约束的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> modify <span class="keyword">column</span> <span class="operator">&lt;</span>字段名<span class="operator">&gt;</span> <span class="operator">&lt;</span>类型<span class="operator">&gt;</span> <span class="keyword">default</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student03 modify <span class="keyword">column</span> address <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">default</span> <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-5-唯一性约束"><a href="#4-5-唯一性约束" class="headerlink" title="4.5 唯一性约束"></a>4.5 唯一性约束</h2><ul><li><p>唯一性约束（UNIQUE）：用于保证数据表中字段的唯一性，即表中字段的值不能重复出现</p></li><li><p>唯一性约束的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 格式一：</span></span><br><span class="line">字段名 数据类型 <span class="keyword">UNIQUE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student04(</span><br><span class="line">    id <span class="type">int</span>,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">unique</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式二：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 约束名 <span class="keyword">unique</span>(列);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student04 (</span><br><span class="line">  id <span class="type">int</span> ,</span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">20</span>) ,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student04 <span class="keyword">add</span> <span class="keyword">constraint</span> unique_num <span class="keyword">unique</span>(name);</span><br></pre></td></tr></table></figure></li><li><p>删除唯一性约束的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> <span class="keyword">drop</span> index <span class="operator">&lt;</span>唯一约束名<span class="operator">/</span>列名<span class="operator">&gt;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student04 <span class="keyword">drop</span> index unique_num;</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student04 <span class="keyword">drop</span> index name;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-6-外键约束"><a href="#4-6-外键约束" class="headerlink" title="4.6 外键约束"></a>4.6 外键约束</h2><ul><li><p>外键约束（FOREIGN KEY）：常用于多张表之间的约束</p></li><li><p>外键约束的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 格式一：</span></span><br><span class="line"><span class="keyword">constraint</span> 外键名 <span class="keyword">foreign</span> key (从表外键字段) <span class="keyword">references</span> 主表 (主键字段)</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student05(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式二：</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表名 <span class="keyword">add</span> <span class="keyword">constraint</span> 外键名 <span class="keyword">foreign</span> key (从表外键字段) <span class="keyword">references</span> 主表 (主键字段);</span><br><span class="line"><span class="comment">-- 学生表作为主表，班级表作为副表设置外键</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">add</span> <span class="keyword">constraint</span> fk_class_studentid <span class="keyword">foreign</span> key(studentid) <span class="keyword">references</span> student05(id);</span><br></pre></td></tr></table></figure></li><li><p>数据一致性概念：</p><ul><li>建立外键是为了保证数据的完整和统一性</li><li>如果主表中的数据被删除或修改从表中对应的数据，从表中对应的数据也应该被删除，否则数据库中会存在很多无意义的垃圾数据</li></ul></li><li><p>删除外键约束的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 从表名 <span class="keyword">drop</span> <span class="keyword">foreign</span> key 外键名；</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除外键fk_class_studentid</span></span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> class <span class="keyword">drop</span> <span class="keyword">foreign</span> key fk_class_studentid;</span><br></pre></td></tr></table></figure></li><li><p>外键约束的注意事项：</p><ul><li>从表里的外键通常为主表的主键</li><li>从表里外键的数据类型必须与主表中主键的数据类型一致</li><li>主表发生变化时应注意主表与从表的数据一致性问题</li></ul></li></ul><h2 id="4-7-零填充约束"><a href="#4-7-零填充约束" class="headerlink" title="4.7 零填充约束"></a>4.7 零填充约束</h2><ul><li><p>零填充约束（zerofill）：插入数据时，当该字段的值的长度小于定义的长度时，会在该值的前面补上相应的0</p><ul><li>zerofill默认为int(10)</li><li>当使用zerofill 时，默认会自动加unsigned（无符号）属性，使用unsigned属性后，数值范围是原值的2倍，例如，有符号为-128~ +127，无符号为0~256</li></ul></li><li><p>零填充约束的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> t_user12 (</span><br><span class="line">  id <span class="type">int</span> zerofill, </span><br><span class="line">  name <span class="type">varchar</span>(<span class="number">20</span>)  </span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>删除零填充约束的语法格式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> t_user12 modify id <span class="type">int</span>;</span><br></pre></td></tr></table></figure></li></ul><h1 id="05-插入数据"><a href="#05-插入数据" class="headerlink" title="05 插入数据"></a>05 插入数据</h1><h2 id="5-1-INSERT基本语法"><a href="#5-1-INSERT基本语法" class="headerlink" title="5.1 INSERT基本语法"></a>5.1 INSERT基本语法</h2><ul><li><p>每个字段与其值是严格一一对应的。但是各字段无须与其在表中定义的顺序一致，只需与 VALUES中值的顺序一致即可</p></li><li><p>为表中所有字段插入数据的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 格式一：</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表 <span class="keyword">values</span> (值<span class="number">1</span>,值<span class="number">2</span>,值<span class="number">3</span>,...);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式二：</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名（字段名<span class="number">1</span>,字段名<span class="number">2</span>,...) <span class="keyword">values</span> (值 <span class="number">1</span>,值 <span class="number">2</span>,...);</span><br><span class="line"><span class="comment">-- 向学生表中插入一条学生信息</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (id,name,age,gender) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;bob&#x27;</span>,<span class="number">16</span>,<span class="string">&#x27;male&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>为表中指定字段插入数据的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名（指定字段名<span class="number">1</span>,指定字段名<span class="number">2</span>,...) <span class="keyword">values</span> (值 <span class="number">1</span>,值 <span class="number">2</span>,...);</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-2-同时插入多条记录"><a href="#5-2-同时插入多条记录" class="headerlink" title="5.2 同时插入多条记录"></a>5.2 同时插入多条记录</h2><ul><li><p>同时插入多条记录的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 [(字段名<span class="number">1</span>,字段名<span class="number">2</span>,...)] <span class="keyword">values</span> (值 <span class="number">1</span>,值 <span class="number">2</span>,…),(值 <span class="number">1</span>,值 <span class="number">2</span>,…),...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 向学生表中插入多条学生信息</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> student (id,name,age,gender) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;lucy&#x27;</span>,<span class="number">17</span>,<span class="string">&#x27;female&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;jack&#x27;</span>,<span class="number">19</span>,<span class="string">&#x27;male&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;tom&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;male&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>(字段名1,字段名2,…)是可选的，它用于指定插人的字段名；(值 1,值 2,…),(值 1,值 2,…)表示要插人的记录，该记录可有多条并且每条记录之间用逗号隔开</p></li></ul><h1 id="06-更新数据"><a href="#06-更新数据" class="headerlink" title="06 更新数据"></a>06 更新数据</h1><h2 id="6-1-UPDATE基本语法"><a href="#6-1-UPDATE基本语法" class="headerlink" title="6.1 UPDATE基本语法"></a>6.1 UPDATE基本语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="number">1</span><span class="operator">=</span>值<span class="number">1</span>[,字段名<span class="number">2</span> <span class="operator">=</span>值<span class="number">2</span>,…] [<span class="keyword">where</span> 条件表达式];</span><br></pre></td></tr></table></figure><ul><li>字段名1、字段名2…用于指定要更新的字段名称；值1、值 2…用于表示字段的新数据</li><li>where条件表达式是可选的，它用于指定更新数据需要满足的条件</li></ul><h2 id="6-2-UPDATE更新部分数据"><a href="#6-2-UPDATE更新部分数据" class="headerlink" title="6.2 UPDATE更新部分数据"></a>6.2 UPDATE更新部分数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="operator">=</span>值，字段名<span class="operator">=</span>值...;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将name为tom的记录的age设置为20并将其gender设置为female</span></span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> age<span class="operator">=</span><span class="number">20</span>,gender<span class="operator">=</span><span class="string">&#x27;female&#x27;</span> <span class="keyword">where</span> name<span class="operator">=</span><span class="string">&#x27;tom&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="6-3-UPDATE更新全部数据"><a href="#6-3-UPDATE更新全部数据" class="headerlink" title="6.3 UPDATE更新全部数据"></a>6.3 UPDATE更新全部数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 字段名<span class="operator">=</span>值，字段名<span class="operator">=</span>值... <span class="keyword">where</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将所有记录的age设置为18</span></span><br><span class="line"><span class="keyword">update</span> student <span class="keyword">set</span> age<span class="operator">=</span><span class="number">18</span>;</span><br></pre></td></tr></table></figure><h1 id="07-删除数据"><a href="#07-删除数据" class="headerlink" title="07 删除数据"></a>07 删除数据</h1><h2 id="7-1-DELETE基本语法"><a href="#7-1-DELETE基本语法" class="headerlink" title="7.1 DELETE基本语法"></a>7.1 DELETE基本语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件表达式];</span><br></pre></td></tr></table></figure><ul><li>表名用于指定要执行删除操作的表</li><li>[WHERE 条件表达式]为可选参数用于指定删除的条件。</li></ul><h2 id="7-2-DELETE删除部分数据"><a href="#7-2-DELETE删除部分数据" class="headerlink" title="7.2 DELETE删除部分数据"></a>7.2 DELETE删除部分数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除age等于14的所有记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">=</span><span class="number">14</span>;</span><br></pre></td></tr></table></figure><h2 id="7-3-DELETE删除全部数据"><a href="#7-3-DELETE删除全部数据" class="headerlink" title="7.3 DELETE删除全部数据"></a>7.3 DELETE删除全部数据</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 删除student表中的所有记录</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h2 id="7-4-TRUNCATE和DETELE的区别"><a href="#7-4-TRUNCATE和DETELE的区别" class="headerlink" title="7.4 TRUNCATE和DETELE的区别"></a>7.4 TRUNCATE和DETELE的区别</h2><ul><li><p>delete语句后可跟where子句，可通过指定where子句中的条件表达式只删除满足条件的部分记录；但是，truncate语句只能用于删除表中的所有记录</p></li><li><p>truncate语句删除表中的数据后，再次向表中添加记录时自动增加字段的默认初始值重新由1开始；使用delete语句删除表中所有记录后，再次向表中添加记录时自动增加字段的值为删除时该字段的最大值加1</p></li><li><p>delete语句是DML语句，truncate语句通常被认为是DDL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 删除表数据</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 [<span class="keyword">where</span> 条件];</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 清空表数据</span></span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名;</span><br><span class="line"><span class="keyword">truncate</span> 表名;</span><br></pre></td></tr></table></figure></li><li><p>delete和truncate原理不同，delete只删除内容，而truncate类似于drop table，可以理解为是将整个表删除然后再创建该表</p></li></ul><h1 id="08-别名设置"><a href="#08-别名设置" class="headerlink" title="08 别名设置"></a>08 别名设置</h1><h2 id="8-1-为表取别名"><a href="#8-1-为表取别名" class="headerlink" title="8.1 为表取别名"></a>8.1 为表取别名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> 表名 [<span class="keyword">as</span>] 表的别名 <span class="keyword">where</span> .... ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将student改为stu查询整表</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">as</span> stu;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student stu;</span><br></pre></td></tr></table></figure><h2 id="8-2-为字段取别名"><a href="#8-2-为字段取别名" class="headerlink" title="8.2 为字段取别名"></a>8.2 为字段取别名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span> [<span class="keyword">as</span>] 别名<span class="number">1</span> , 字段名<span class="number">2</span> [<span class="keyword">as</span>] 别名<span class="number">2</span> , ... <span class="keyword">from</span> 表名 <span class="keyword">where</span> ... ;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将student中的name取别名为“姓名”</span></span><br><span class="line"><span class="keyword">select</span> name <span class="keyword">as</span> <span class="string">&#x27;姓名&#x27;</span>,id <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> name <span class="string">&#x27;姓名&#x27;</span>,id <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><ul><li>别名设置的注意事项：<ul><li>只是将显示的查询结果列名显示为别名，原表列名不改变</li><li>别名里面若有空格，可以使用单引号（标准）或双引号（但Oracle无法使用）解决</li><li>在所有数据库中，字符串都是采用单引号括起来，这是标准的</li></ul></li><li>（关于着重号：如果字段、表名等和保留字、数据库系统或常用方法冲突可以使用一对着重号引起来使用）</li></ul><h1 id="09-函数"><a href="#09-函数" class="headerlink" title="09 函数"></a>09 函数</h1><h2 id="9-1-单行处理函数"><a href="#9-1-单行处理函数" class="headerlink" title="9.1 单行处理函数"></a>9.1 单行处理函数</h2><ul><li><p>单行处理函数：一个输入对应一个输出</p><table><thead><tr><th>函数</th><th>说明</th></tr></thead><tbody><tr><td>Lower()</td><td>转换小写</td></tr><tr><td>upper()</td><td>转换大写</td></tr><tr><td>substr()</td><td>取子串（substr(字符串,起始下标,截取长度)）</td></tr><tr><td>length()</td><td>取长度</td></tr><tr><td>trim()</td><td>去空格</td></tr><tr><td>str_to_date()</td><td>将字符串转换成日期</td></tr><tr><td>date_format()</td><td>格式化日期</td></tr><tr><td>format()</td><td>设置千分位</td></tr><tr><td>round()</td><td>四舍五入（round(123,-1)表示保留十位120）</td></tr><tr><td>rand()</td><td>生成随机数</td></tr><tr><td>Ifnull()</td><td>将null转换成具体值（Ifnull(num,0)表示换成0）</td></tr><tr><td>case…when…then…when..then…else…end</td><td>不修改数据库,只是将查询结果显示为某个改动</td></tr></tbody></table></li></ul><h2 id="9-2-多行处理函数"><a href="#9-2-多行处理函数" class="headerlink" title="9.2 多行处理函数"></a>9.2 多行处理函数</h2><ul><li><p>多行处理函数（分组函数&#x2F;聚合函数）：多个输入对应一个输出。具有自动滤空的功能，若某一个值为null，那么会自动将其过滤使其不参与运算</p><table><thead><tr><th align="center">聚合函数</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">count()</td><td align="center">统计指定列不为NULL的记录行数；</td></tr><tr><td align="center">sum()</td><td align="center">计算指定列的数值和，如果指定列类型不是数值类型，那么计算结果为0</td></tr><tr><td align="center">max()</td><td align="center">计算指定列的最大值，如果指定列是字符串类型，那么使用字符串排序运算；</td></tr><tr><td align="center">min()</td><td align="center">计算指定列的最小值，如果指定列是字符串类型，那么使用字符串排序运算；</td></tr><tr><td align="center">avg()</td><td align="center">计算指定列的平均值，如果指定列类型不是数值类型，那么计算结果为0</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.count()函数：</span></span><br><span class="line"><span class="comment">-- 查询有多少该表中有多少人</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.sum()函数：</span></span><br><span class="line"><span class="comment">-- 查询该学生表中年纪的总和</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(age) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.max()函数：</span></span><br><span class="line"><span class="comment">-- 查询该学生表中年纪最大的学生</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(age) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.min()函数：</span></span><br><span class="line">查询该学生表中年纪最小的学生</span><br><span class="line"><span class="keyword">select</span> sname,<span class="built_in">min</span>(age) <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.avg()函数：</span></span><br><span class="line"><span class="comment">-- 查询该学生表中年纪的平均数</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(age) <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure></li><li><p>分组&#x2F;聚合函数的使用规则：</p><ul><li>只有select子句、having子句、order by子句中能够使用</li><li>不能直接在where子句中使用，因为分组&#x2F;聚合函数必须先分组（group by）才能使用</li></ul></li><li><p>NULL值的处理：</p><ul><li><p>count函数对null值的处理：</p><ul><li>如果count函数的参数为星号（*），则统计所有记录的个数</li><li>如果参数为某字段，不统计含null值的记录个数</li></ul></li><li><p>sum和avg函数对null值的处理：这两个函数忽略null值的存在</p></li><li><p>max和min函数对null值的处理：max和min两个函数同样忽略null值的存在</p></li></ul></li></ul><h1 id="10-简单查询（select…from）"><a href="#10-简单查询（select…from）" class="headerlink" title="10 简单查询（select…from）"></a>10 简单查询（select…from）</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.查询所有：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.查询指定：</span></span><br><span class="line"><span class="keyword">select</span> sid,sname <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.常数的查询：</span></span><br><span class="line"><span class="comment">-- 查询结果每行均添加此常数，可以用于标记</span></span><br><span class="line"><span class="keyword">select</span> sid,sname,<span class="string">&#x27;2021-03-02&#x27;</span> <span class="keyword">from</span> student;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.过滤重复数据（distinct）</span></span><br><span class="line"><span class="comment">-- 注意事项：在SELECT查询语句中DISTINCT关键字只能在所有字段的最前面</span></span><br><span class="line"><span class="comment">-- 原表记录不会被修改，只是查询结果去重，是所有字段的联合去重</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> gender <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="keyword">distinct</span> job) <span class="keyword">from</span> emp;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.算数运算符查询：</span></span><br><span class="line"><span class="keyword">select</span> sname,age<span class="operator">+</span><span class="number">10</span> <span class="keyword">from</span> student;</span><br></pre></td></tr></table></figure><h1 id="11-条件查询（where）"><a href="#11-条件查询（where）" class="headerlink" title="11 条件查询（where）"></a>11 条件查询（where）</h1><table><thead><tr><th align="center">比较运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&#x3D;</td><td align="center">等于</td></tr><tr><td align="center">&lt;    和    &lt;&#x3D;</td><td align="center">小于和小于等于</td></tr><tr><td align="center">&gt;    和    &gt;&#x3D;</td><td align="center">大于和大于等于</td></tr><tr><td align="center">&lt;&#x3D;&gt;</td><td align="center">安全的等于，两个操作码均为NULL时，其所得值为1；而当一个操作码为NULL时，其所得值为0</td></tr><tr><td align="center">&lt;&gt; 或!&#x3D;</td><td align="center">不等于</td></tr><tr><td align="center">IS NULL 或 ISNULL</td><td align="center">判断一个值是否为 NULL</td></tr><tr><td align="center">IS NOT NULL</td><td align="center">判断一个值是否不为 NULL</td></tr><tr><td align="center">LEAST</td><td align="center">当有两个或多个参数时，返回最小值</td></tr><tr><td align="center">GREATEST</td><td align="center">当有两个或多个参数时，返回最大值</td></tr><tr><td align="center">BETWEEN AND</td><td align="center">判断一个值是否落在两个值之间</td></tr><tr><td align="center">IN</td><td align="center">判断一个值是IN列表中的任意一个值</td></tr><tr><td align="center">NOT IN</td><td align="center">判断一个值不是IN列表中的任意一个值</td></tr><tr><td align="center">LIKE</td><td align="center">通配符匹配</td></tr><tr><td align="center">REGEXP</td><td align="center">正则表达式匹配</td></tr></tbody></table><table><thead><tr><th align="center">逻辑运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">NOT 或者 !</td><td align="center">逻辑非</td></tr><tr><td align="center">AND 或者 &amp;&amp;</td><td align="center">逻辑与</td></tr><tr><td align="center">OR 或者 ||</td><td align="center">逻辑或</td></tr><tr><td align="center">XOR</td><td align="center">逻辑异或</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.关系运算符：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">&gt;=</span><span class="number">17</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.空值查询</span></span><br><span class="line"><span class="comment">-- 查询sname不为空值的学生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.BETWEEN AND关键字：</span></span><br><span class="line"><span class="comment">-- 查询15到18岁的学生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">between</span> <span class="number">15</span> <span class="keyword">and</span> <span class="number">18</span>;</span><br><span class="line"><span class="comment">-- 查询不是15到18岁的学生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age <span class="keyword">not</span> <span class="keyword">between</span> <span class="number">15</span> <span class="keyword">and</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.IN关键字：</span></span><br><span class="line"><span class="comment">-- 查询sid为S_1002和S_1003的学生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sid <span class="keyword">in</span> (<span class="string">&#x27;S_1002&#x27;</span>,<span class="string">&#x27;S_1003&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询sid为S_1001以外的学生的信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sid <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">&#x27;S_1001&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.LIKE关键字：</span></span><br><span class="line"><span class="comment">-- 查询sname中与wang匹配的学生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;wang&#x27;</span>;</span><br><span class="line"><span class="comment">-- 百分号%：用于匹配任意长度的字符串。eg：字符串“a%”匹配以字符a开始任意长度的字符串</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;a%&#x27;</span>;</span><br><span class="line"><span class="comment">-- 下划线_：用于匹配单个字符，如果要匹配多个字符，需要连续使用多个下划线通配符。eg：字符串“ab_”匹配以字符串“ab”开始长度为3的字符串；字符串“a__d”匹配在字符“a”和“d”之间包含两个字符的字符串</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;zx__&#x27;</span>;</span><br><span class="line"><span class="comment">-- 找出名字中有下划线_的（使用转义字符）</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> form student <span class="keyword">where</span> sname <span class="keyword">like</span> <span class="string">&#x27;%\_%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6.AND关键字</span></span><br><span class="line"><span class="comment">-- 查询年纪大于15且性别为male的学生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">15</span> <span class="keyword">and</span> gender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7.OR关键字</span></span><br><span class="line"><span class="comment">-- 查询年纪大于15或者性别为male的学生信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> age<span class="operator">&gt;</span><span class="number">15</span> <span class="keyword">or</span> gender<span class="operator">=</span><span class="string">&#x27;male&#x27;</span>;</span><br><span class="line"><span class="comment">-- 查询工资大于2500，并且部门编号为10或20</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="number">2500</span> <span class="keyword">and</span> (deptno <span class="operator">=</span> <span class="number">10</span> <span class="keyword">or</span> deptno <span class="operator">=</span> <span class="number">10</span>);</span><br></pre></td></tr></table></figure><ul><li>between…and：必须遵循左小右大，且包含两端的值</li><li>is null：不能写成 &#x3D; null，在数据库中，null代表空而不是一个值，不能使用等号</li><li>in：等价于多个or，而不是表示区间</li><li>like：__为两个下划线 _，中间没有空格；找出名字中有下划线 _的，使用转义字符</li><li>and和or：优先级and &gt; or，可以使用括号让or先执行</li></ul><h1 id="12-排序查询（order-by）"><a href="#12-排序查询（order-by）" class="headerlink" title="12 排序查询（order by）"></a>12 排序查询（order by）</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.排序查询</span></span><br><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,… <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> 字段名<span class="number">1</span> [<span class="keyword">asc</span>丨<span class="keyword">desc</span>],字段名<span class="number">2</span> [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>];</span><br><span class="line"><span class="comment">-- 查询所有学生并按照年纪大小升序排列</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span>;</span><br><span class="line"><span class="comment">-- 查询所有学生并按照年纪大小降序排列</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">desc</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.根据字段位置排序（根据查询结果的第二列排序）</span></span><br><span class="line"><span class="keyword">select</span> 字段名<span class="number">1</span>,字段名<span class="number">2</span>,… <span class="keyword">from</span> 表名 <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>asc代表升序，desc代表降序，如果不写默认升序</li><li>order by用于子句中可以支持单个&#x2F;多个字段（先后顺序来分主次）、表达式、函数、别名</li><li>列的别名只能在order by中使用，不能再where中使用</li><li>order by查询的字段不一定是select查询的字段</li><li>order by子句，放在select查询语句的最后面；limit子句除外</li></ul><h1 id="13-分组查询（group-by-x2F-having）"><a href="#13-分组查询（group-by-x2F-having）" class="headerlink" title="13 分组查询（group by&#x2F;having）"></a>13 分组查询（group by&#x2F;having）</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.分组查询</span></span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span>… <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 分组字段 <span class="keyword">having</span> 分组条件;</span><br><span class="line"><span class="comment">-- 统计部门编号大于1001的各部门员工个数 MySQL命令：</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>), departmentnumber <span class="keyword">from</span> employee <span class="keyword">where</span> departmentnumber<span class="operator">&gt;</span><span class="number">1001</span> <span class="keyword">group</span> <span class="keyword">by</span> departmentnumber;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.多个字段分组查询</span></span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span>… <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 分组字段<span class="number">1</span>,分组字段<span class="number">2.</span>.. <span class="keyword">having</span> 分组条件;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.分组之后条件筛选（having）</span></span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>,字段<span class="number">2</span>… <span class="keyword">from</span> 表名 <span class="keyword">group</span> <span class="keyword">by</span> 分组字段 <span class="keyword">having</span> 分组条件;</span><br><span class="line"><span class="comment">-- 统计工资总和大于8000的部门</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">sum</span>(salary),departmentnumber <span class="keyword">from</span> employee <span class="keyword">group</span> <span class="keyword">by</span> departmentnumber <span class="keyword">having</span> <span class="built_in">sum</span>(salary)<span class="operator">&gt;</span><span class="number">8000</span>;</span><br></pre></td></tr></table></figure><ul><li><p>分组查询时，select后只能跟分组字段和分组函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 找出每个部门（，不同岗位）的最高薪资（正确写法）</span></span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> depton;</span><br><span class="line"><span class="keyword">select</span> deptno,job,<span class="built_in">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> depton,job;</span><br><span class="line"><span class="comment">-- （若有其他字段，MySQL可执行但无意义，Oracle报错）</span></span><br><span class="line"><span class="keyword">select</span> ename,deptno,<span class="built_in">max</span>(sal) <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> depton;</span><br></pre></td></tr></table></figure></li><li><p>分组（group by）之后的条件筛选—having：</p><ul><li>where 子句先用来筛选 from 子句中指定的操作所产生的行</li><li>group by 子句用来分组 where字句筛选后的输出</li><li>having 子句再用来从分组的结果中进行筛选</li></ul></li></ul><h1 id="14-分页查询（limit）"><a href="#14-分页查询（limit）" class="headerlink" title="14 分页查询（limit）"></a>14 分页查询（limit）</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.格式一：显示前n条</span></span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>，字段<span class="number">2.</span>.. <span class="keyword">from</span> 表明 limit n</span><br><span class="line"><span class="comment">-- 查询学生表中年纪最小的3位同学</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">order</span> <span class="keyword">by</span> age <span class="keyword">asc</span> limit <span class="number">3</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">-- 2.格式二：分页显示</span></span><br><span class="line"><span class="keyword">select</span> 字段<span class="number">1</span>，字段<span class="number">2.</span>.. <span class="keyword">from</span> 表明 limit m, n</span><br><span class="line"><span class="comment">-- 从第4条开始显示，显示5条</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student limit <span class="number">3</span>, <span class="number">5</span></span><br></pre></td></tr></table></figure><ul><li>m: 整数，表示从第几条索引开始，计算方式 （当前页-1）*每页显示条数</li><li>n: 整数，表示查询多少条数据</li><li>limit子句必须放在整个select语句的最后</li><li>好处：约束返回结果的数量可以减少数据表的网络传输量，也可以提升查询效率</li></ul><h1 id="15-联合查询（union）"><a href="#15-联合查询（union）" class="headerlink" title="15 联合查询（union）"></a>15 联合查询（union）</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.联合查询union：将两张不相干的表中的数据拼接在一起显示。可以减少匹配次数，提高效率</span></span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span></span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例：找出工作岗位是SALESMAN和MANAGER的员工？</span></span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="operator">=</span> <span class="string">&#x27;MANAGER&#x27;</span> <span class="keyword">or</span> job <span class="operator">=</span> <span class="string">&#x27;SALESMAN&#x27;</span>;</span><br><span class="line"><span class="keyword">select</span> ename,job <span class="keyword">from</span> emp <span class="keyword">where</span> job <span class="keyword">in</span>(<span class="string">&#x27;MANAGER&#x27;</span>,<span class="string">&#x27;SALESMAN&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ERROR: The used SELECT statements have a different number of columns</span></span><br><span class="line"><span class="keyword">select</span> ename,sal <span class="keyword">from</span> emp</span><br><span class="line"><span class="keyword">union</span></span><br><span class="line"><span class="keyword">select</span> dname <span class="keyword">from</span> dept;</span><br></pre></td></tr></table></figure><ul><li>联合查询的注意事项：<ul><li>在进行结果集合并时，要求两个结果集的列数相同</li><li>在Oracle中要求两个结果集的列的数据类型也相同，但MySQL中不要求</li></ul></li></ul><h1 id="16-正则表达式"><a href="#16-正则表达式" class="headerlink" title="16 正则表达式"></a>16 正则表达式</h1><ul><li><p>正则表达式（regular expression）：描述了一种字符串匹配的规则，正则表达式本身就是一个字符串，使用这个字符串来描述、用来定义匹配规则，匹配一系列符合某个句法规则的字符串</p></li><li><p>正则表达式通常被用来检索、替换那些符合某个规则的文本</p></li><li><p>MySQL通过REGEXP关键字支持正则表达式进行字符串匹配</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>^</td><td>匹配输入字符串的开始位置</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置</td></tr><tr><td>.</td><td>匹配除 “\n” 之外的任何单个字符</td></tr><tr><td>[…]</td><td>字符集合。匹配所包含的任意一个字符。例如， ‘[abc]’ 可以匹配 “plain” 中的 ‘a’</td></tr><tr><td>[^…]</td><td>负值字符集合。匹配未包含的任意字符。例如， ‘[ ^abc]’ 可以匹配 “plain” 中的’p’</td></tr><tr><td>p1</td><td>p2</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}</td></tr><tr><td>{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o</td></tr><tr><td>{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;&#x3D; m。最少匹配 n 次且最多匹配 m 次</td></tr></tbody></table></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- ^ 在字符串开始处进行匹配</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="string">&#x27;abc&#x27;</span> REGEXP <span class="string">&#x27;^a&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- $ 在字符串末尾开始匹配</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="string">&#x27;abc&#x27;</span> REGEXP <span class="string">&#x27;a$&#x27;</span>; <span class="comment">-- 0</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="string">&#x27;abc&#x27;</span> REGEXP <span class="string">&#x27;c$&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- . 匹配任意字符</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="string">&#x27;abc&#x27;</span> REGEXP <span class="string">&#x27;.b&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="string">&#x27;abc&#x27;</span> REGEXP <span class="string">&#x27;a.&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- [...] 匹配括号内的任意单个字符，后面括号中的任意字符是否在前边出现</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="string">&#x27;abc&#x27;</span> REGEXP <span class="string">&#x27;[xyz]&#x27;</span>; <span class="comment">-- 0</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="string">&#x27;abc&#x27;</span> REGEXP <span class="string">&#x27;[xaz]&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- [^...] 注意^符合只有在[]内才是取反的意思，在别的地方都是表示开始处匹配</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="string">&#x27;a&#x27;</span> REGEXP <span class="string">&#x27;[^abc]&#x27;</span>; <span class="comment">-- 0</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="string">&#x27;x&#x27;</span> REGEXP <span class="string">&#x27;[^abc]&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span>  <span class="string">&#x27;abc&#x27;</span> REGEXP <span class="string">&#x27;[^a]&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- a* 匹配0个或多个a,包括空字符串。可以作为占位符使用.有没有指定字符都可以匹配到数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;stab&#x27;</span> REGEXP <span class="string">&#x27;.ta*b&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;stb&#x27;</span> REGEXP <span class="string">&#x27;.ta*b&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;&#x27;</span> REGEXP <span class="string">&#x27;a*&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- a+  匹配1个或者多个a,但是不包括空字符</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;stab&#x27;</span> REGEXP <span class="string">&#x27;.ta+b&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;stb&#x27;</span> REGEXP <span class="string">&#x27;.ta+b&#x27;</span>; <span class="comment">-- 0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- a?  匹配0个或者1个a</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;stb&#x27;</span> REGEXP <span class="string">&#x27;.ta?b&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;stab&#x27;</span> REGEXP <span class="string">&#x27;.ta?b&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;staab&#x27;</span> REGEXP <span class="string">&#x27;.ta?b&#x27;</span>; <span class="comment">-- 0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- a1|a2  匹配a1或者a2，</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;a&#x27;</span> REGEXP <span class="string">&#x27;a|b&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;b&#x27;</span> REGEXP <span class="string">&#x27;^(a|b)&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;c&#x27;</span> REGEXP <span class="string">&#x27;^(a|b)&#x27;</span>; <span class="comment">-- 0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- a&#123;m&#125; 匹配m个a</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;auuuuc&#x27;</span> REGEXP <span class="string">&#x27;au&#123;4&#125;c&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;auuuuc&#x27;</span> REGEXP <span class="string">&#x27;au&#123;3&#125;c&#x27;</span>; <span class="comment">-- 0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- a&#123;m,n&#125; 匹配m到n个a,包含m和n</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;auuuuc&#x27;</span> REGEXP <span class="string">&#x27;au&#123;3,5&#125;c&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;auuuuc&#x27;</span> REGEXP <span class="string">&#x27;au&#123;5,10&#125;c&#x27;</span>; <span class="comment">-- 0</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">-- (abc) abc作为一个序列匹配，不用括号括起来都是用单个字符去匹配，如果要把多个字符作为一个整体去匹配就需要用到括号，所以括号适合上面的所有情况。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;xababy&#x27;</span> REGEXP <span class="string">&#x27;x(ab)*y&#x27;</span>; <span class="comment">-- 1</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;xababy&#x27;</span> REGEXP <span class="string">&#x27;x(ab)&#123;1,2&#125;y&#x27;</span>; <span class="comment">-- 1</span></span><br></pre></td></tr></table></figure><h1 id="17-多表查询"><a href="#17-多表查询" class="headerlink" title="17 多表查询"></a>17 多表查询</h1><h2 id="17-1-连接查询"><a href="#17-1-连接查询" class="headerlink" title="17.1 连接查询"></a>17.1 连接查询</h2><ul><li><p>连接查询：交叉连接返回的结果是被连接的两个表中所有数据行的笛卡儿积，交叉连接也被称为笛卡尔连接</p><p>eg：集合A&#x3D;{a,b}，集合B&#x3D;{0,1,2}，则集合A和B的笛卡尔积为{(a,0),(a,1),(a,2),(b,0),(b,1),(b,2)}</p></li><li><p>语法：SELECT * FROM 表1 CROSS JOIN 表2;  通过该语句可以查询两个表中所有的数据组合，这个交叉连接查询在实际运用中没有任何意义</p></li><li><p>连接查询的注意事项：</p><ul><li>为了避免笛卡尔积现象，可以加条件进行过滤，但匹配次数仍然没有减少</li><li>使用表的别名并指定字段所在表，可以提高效率</li></ul></li></ul><h2 id="17-2-内连接查询"><a href="#17-2-内连接查询" class="headerlink" title="17.2 内连接查询"></a>17.2 内连接查询</h2><ul><li><p>内连接（Inner Join）：又称简单连接或自然连接，内连接查询中只有满足条件的记录才能出现在查询结果中</p></li><li><p>内连接的分类：等值连接、非等值连接、自连接</p></li><li><p>内连接的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> A</span><br><span class="line"><span class="keyword">join</span> B</span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">where</span> ...</span><br></pre></td></tr></table></figure></li><li><p>等值连接：连接条件中的关系是等量关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：查询每个员工的部门名称，要求显示员工名和部门名。</span></span><br><span class="line"><span class="comment">-- SQL92（不使用，结构不清晰）</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e, dept d</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SQL99（SQL99语法结构更清晰一些：表的连接条件和后来的where条件分离了）</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- inner可以省略的，带着inner目的是可读性好一些</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 表头仍为ename、dname，而不是e.ename、d.dname</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> ename  <span class="operator">|</span> dname      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br><span class="line"><span class="operator">|</span> CLARK  <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> KING   <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MILLER <span class="operator">|</span> ACCOUNTING <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SMITH  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JONES  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> SCOTT  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ADAMS  <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> FORD   <span class="operator">|</span> RESEARCH   <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> ALLEN  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> WARD   <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> MARTIN <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> BLAKE  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> TURNER <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">|</span> JAMES  <span class="operator">|</span> SALES      <span class="operator">|</span></span><br><span class="line"><span class="operator">+</span><span class="comment">--------+------------+</span></span><br></pre></td></tr></table></figure></li><li><p>非等值连接：连接条件中的关系是等量关系</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：找出每个员工的工资等级，要求显示员工名、工资、工资等级</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,e.sal,s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br></pre></td></tr></table></figure></li><li><p>自连接：一张表看做两张表，自己连接自己</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：找出每个员工的上级领导，要求显示员工名和对应的领导名。</span></span><br><span class="line"><span class="comment">-- 连接关系：员工的领导编号 = 领导的员工编号</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="keyword">as</span> <span class="string">&#x27;员工名&#x27;</span>,b.ename <span class="keyword">as</span> <span class="string">&#x27;领导名&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure></li></ul><h2 id="17-3-外连接查询"><a href="#17-3-外连接查询" class="headerlink" title="17.3 外连接查询"></a>17.3 外连接查询</h2><ul><li><p>外连接（Outer Join）：返回查询结果中不仅包含符合条件的数据，还包括左表、右表或两个表中的所有数据</p></li><li><p>外连接的分类：左外连接（左连接）、右外连接（右连接）</p></li><li><p>外连接的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ...</span><br><span class="line"><span class="keyword">from</span> A</span><br><span class="line">(<span class="keyword">left</span><span class="operator">/</span><span class="keyword">right</span>) <span class="keyword">join</span> B</span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">where</span> ...</span><br></pre></td></tr></table></figure></li><li><p>左外连接：表示左边的这张表是主表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：找出每个员工的上级领导，要求所有员工必须全部查询出来</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- outer是可以省略的。</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure></li><li><p>右外连接：表示右边的这张表是主表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：找出每个员工的上级领导，要求所有员工必须全部查询出来</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">a.ename <span class="string">&#x27;员工&#x27;</span>, b.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp b</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">emp a</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">a.mgr <span class="operator">=</span> b.empno;</span><br></pre></td></tr></table></figure></li></ul><h2 id="17-4-多表连接"><a href="#17-4-多表连接" class="headerlink" title="17.4 多表连接"></a>17.4 多表连接</h2><ul><li><p>多表连接的语法：连接时内连接和外连接可以混合</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ....</span><br><span class="line"><span class="keyword">from</span> A</span><br><span class="line"><span class="keyword">join</span> B</span><br><span class="line"><span class="keyword">on</span> A和B的连接条件</span><br><span class="line">(<span class="keyword">left</span>) <span class="keyword">join</span> C</span><br><span class="line"><span class="keyword">on</span> A和C的连接条件</span><br><span class="line">(<span class="keyword">right</span>) <span class="keyword">join</span> ...</span><br><span class="line"><span class="keyword">on</span> ...</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：找出每一个员工的部门名称、薪资以及工资等级</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename, d.dname, s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno  </span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal; </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 案例：找出每一个员工的部门名称、工资等级、以及上级领导</span></span><br><span class="line"><span class="comment">-- 说明：存在King没有上级领导，需要外连接</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename <span class="string">&#x27;员工&#x27;</span>, d.dname, s.grade, e1.ename <span class="string">&#x27;领导&#x27;</span></span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.sal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span></span><br><span class="line">emp e1</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.mgr <span class="operator">=</span> e1.empno;</span><br></pre></td></tr></table></figure></li></ul><h1 id="18-子查询"><a href="#18-子查询" class="headerlink" title="18 子查询"></a>18 子查询</h1><ul><li><p>子查询：select语句中嵌套select语句，被嵌套的select语句称为子查询</p></li><li><p>子查询的语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> ..(<span class="keyword">select</span>)</span><br><span class="line"><span class="keyword">from</span> ..(<span class="keyword">select</span>)</span><br><span class="line"><span class="keyword">where</span> ..(<span class="keyword">select</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="18-1-嵌套子查询"><a href="#18-1-嵌套子查询" class="headerlink" title="18.1 嵌套子查询"></a>18.1 嵌套子查询</h2><ul><li><p>where子句后的子查询：where字句不能直接使用分组函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：找出高于平均薪资的员工信息</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="built_in">avg</span>(sal);  </span><br><span class="line"><span class="comment">-- ERROR: Invaild use of group function</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 第一步：找出平均薪资</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp;</span><br><span class="line"><span class="comment">-- 第二步：where过滤</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> <span class="number">2073.214286</span>;</span><br><span class="line"><span class="comment">-- 第一步和第二步合并：</span></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> emp <span class="keyword">where</span> sal <span class="operator">&gt;</span> (<span class="keyword">select</span> <span class="built_in">avg</span>(sal) <span class="keyword">from</span> emp);</span><br></pre></td></tr></table></figure></li><li><p>from后面的子查询：将子查询的查询结果当做一张临时表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：找出每个部门平均薪水的等级，方法一：</span></span><br><span class="line"><span class="comment">-- 第一步：找出每个部门平均薪水（按照部门编号分组，求sal的平均值）</span></span><br><span class="line"><span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno;</span><br><span class="line"><span class="comment">-- 第二步：将以上的查询结果当做临时表t，让t表和salgrade s表连接，条件是：t.avgsal between s.losal and s.hisal</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">t.<span class="operator">*</span>, s.grade</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">(<span class="keyword">select</span> deptno,<span class="built_in">avg</span>(sal) <span class="keyword">as</span> avgsal <span class="keyword">from</span> emp <span class="keyword">group</span> <span class="keyword">by</span> deptno) t</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">salgrade s</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">t.avgsal <span class="keyword">between</span> s.losal <span class="keyword">and</span> s.hisal;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>select后面的子查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 案例：找出每个员工所在的部门名称，要求显示员工名和部门名</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,d.dname</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">emp e</span><br><span class="line"><span class="keyword">join</span></span><br><span class="line">dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">e.deptno <span class="operator">=</span> d.deptno;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用select后面有子查询方式：</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,(<span class="keyword">select</span> d.dname <span class="keyword">from</span> dept d <span class="keyword">where</span> e.deptno <span class="operator">=</span> d.deptno) <span class="keyword">as</span> dname </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- ERROR: Subquery returns more 1 row</span></span><br><span class="line"><span class="comment">-- select后的子查询只能有一条结果，否则报错</span></span><br><span class="line"><span class="keyword">select</span> </span><br><span class="line">e.ename,(<span class="keyword">select</span> d.dname <span class="keyword">from</span> dept) <span class="keyword">as</span> dname </span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">emp e;</span><br></pre></td></tr></table></figure></li></ul><h2 id="18-2-带关键字的子查询"><a href="#18-2-带关键字的子查询" class="headerlink" title="18.2 带关键字的子查询"></a>18.2 带关键字的子查询</h2><ul><li><p>EXISTS：关键字后面的参数可以是任意一个子查询， 它不产生任何数据只返回TRUE或FALSE。当返回值为TRUE时外层查询才会执行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> class </span><br><span class="line"><span class="keyword">where</span> <span class="keyword">exists</span> (<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> sname<span class="operator">=</span><span class="string">&#x27;王五&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>ANY：关键字表示满足其中任意一个条件就返回一个结果作为外层查询条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> class </span><br><span class="line"><span class="keyword">where</span> cid <span class="operator">&gt;</span> <span class="keyword">any</span> (<span class="keyword">select</span> classid <span class="keyword">from</span> student);</span><br></pre></td></tr></table></figure></li><li><p>ALL：关键字与ANY有点类似，只不过带ALL关键字的子査询返回的结果需同时满足所有内层査询条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> </span><br><span class="line"><span class="keyword">from</span> class </span><br><span class="line"><span class="keyword">where</span> cid <span class="operator">&gt;</span> <span class="keyword">all</span> (<span class="keyword">select</span> classid <span class="keyword">from</span> student);</span><br></pre></td></tr></table></figure></li></ul><h1 id="19-DQL总结"><a href="#19-DQL总结" class="headerlink" title="19 DQL总结"></a>19 DQL总结</h1><ul><li><p>DQL总结：数据查询返回数据库中存储的数据，根据需要对数据进行筛选以及确定数据以什么样的格式显示</p></li><li><p>SQL的书写顺序：select——&gt;from——&gt;where——&gt;group by——&gt;having——&gt;order by——&gt;limit</p></li><li><p>SQL的执行顺序：from–&gt;where–&gt;grop by–&gt;count()–&gt;having–&gt;select–&gt;order by–&gt;limit</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> [<span class="keyword">all</span><span class="operator">|</span><span class="keyword">distinct</span>]</span><br><span class="line">  <span class="operator">&lt;</span>目标列的表达式<span class="number">1</span><span class="operator">&gt;</span> [别名],</span><br><span class="line">  <span class="operator">&lt;</span>目标列的表达式<span class="number">2</span><span class="operator">&gt;</span> [别名]...</span><br><span class="line"><span class="keyword">from</span> <span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span> [别名],<span class="operator">&lt;</span>表名或视图名<span class="operator">&gt;</span> [别名]...</span><br><span class="line">[<span class="keyword">where</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]</span><br><span class="line">[<span class="keyword">group</span> <span class="keyword">by</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span></span><br><span class="line">[<span class="keyword">having</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>]]</span><br><span class="line">[<span class="keyword">order</span> <span class="keyword">by</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> [<span class="keyword">asc</span><span class="operator">|</span><span class="keyword">desc</span>]]</span><br><span class="line">[limit <span class="operator">&lt;</span>数字或者列表<span class="operator">&gt;</span>];</span><br></pre></td></tr></table></figure></li></ul><h1 id="20-存储引擎"><a href="#20-存储引擎" class="headerlink" title="20 存储引擎"></a>20 存储引擎</h1><ul><li><p>存储引擎（了解）：</p><ul><li>只有在mysql中存在（Oracle中也有对应的机制，但是不叫做存储引擎）</li><li>mysql支持很多存储引擎，每一个存储引擎都对应了一种不同的存储方式。每一个存储引擎都有自己的优缺点，需要在合适的时机选择合适的存储引擎</li><li>查看mysql支持的存储引擎（当前九大存储引擎）：show engines \G</li></ul></li><li><p>给表添加存储引擎：建表时最后小括号右边，来指定存储引擎</p><ul><li>ENGING来指定存储引擎</li><li>CHARSET来指定这张表的字符编码方式</li><li>mysql默认使用的存储引擎是InnoDB方式，默认采用的字符集是UTF8</li></ul></li><li><p>常见的存储引擎（了解）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">      Engine: MyISAM</span><br><span class="line"> Support: YES</span><br><span class="line"> Comment: MyISAM storage engine</span><br><span class="line">Transactions: <span class="keyword">NO</span></span><br><span class="line">  XA: <span class="keyword">NO</span></span><br><span class="line">  Savepoints: <span class="keyword">NO</span></span><br><span class="line"></span><br><span class="line">MyISAM这种存储引擎不支持事务</span><br><span class="line">MyISAM是mysql最常用的存储引擎，但是这种引擎不是默认的</span><br><span class="line">MyISAM采用三个文件组织一张表：</span><br><span class="line">xxx.frm（存储格式的文件）</span><br><span class="line">xxx.MYD（存储表中数据的文件）</span><br><span class="line">xxx.MYI（存储表中索引的文件）</span><br><span class="line">优点：可被压缩，节省存储空间。并且可以转换为只读表，提高检索效率</span><br><span class="line">缺点：不支持事务</span><br><span class="line"></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">  Engine: InnoDB</span><br><span class="line"> Support: <span class="keyword">DEFAULT</span></span><br><span class="line"> Comment: Supports transactions, <span class="type">row</span><span class="operator">-</span>level locking, <span class="keyword">and</span> <span class="keyword">foreign</span> keys</span><br><span class="line">Transactions: YES</span><br><span class="line">      XA: YES</span><br><span class="line">  Savepoints: YES</span><br><span class="line"></span><br><span class="line">优点：支持事务、行级锁、外键等。这种存储引擎数据的安全得到保障</span><br><span class="line"></span><br><span class="line">表的结构存储在xxx.frm文件中</span><br><span class="line">数据存储在tablespace这样的表空间中（逻辑概念），无法被压缩，无法转换成只读</span><br><span class="line">这种InnoDB存储引擎在MySQL数据库崩溃之后提供自动恢复机制</span><br><span class="line">InnoDB支持级联删除和级联更新</span><br><span class="line"></span><br><span class="line"><span class="comment">-----------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">  Engine: MEMORY</span><br><span class="line"> Support: YES</span><br><span class="line"> Comment: Hash based, stored <span class="keyword">in</span> memory, useful <span class="keyword">for</span> temporary tables</span><br><span class="line">Transactions: <span class="keyword">NO</span></span><br><span class="line">  XA: <span class="keyword">NO</span></span><br><span class="line">  Savepoints: <span class="keyword">NO</span></span><br><span class="line"></span><br><span class="line">缺点：不支持事务。数据容易丢失。因为所有数据和索引都是存储在内存当中的</span><br><span class="line">优点：查询速度最快</span><br><span class="line">以前叫做HEPA引擎</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE · 进阶篇④</title>
      <link href="/2022/04/04/JAVA/1.Java/JavaSE/JavaSE%20%C2%B7%20%E8%BF%9B%E9%98%B6%E7%AF%87%E2%91%A3/"/>
      <url>/2022/04/04/JAVA/1.Java/JavaSE/JavaSE%20%C2%B7%20%E8%BF%9B%E9%98%B6%E7%AF%87%E2%91%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="28-异常"><a href="#28-异常" class="headerlink" title="28 异常"></a>28 异常</h1><h2 id="28-1-异常的概述"><a href="#28-1-异常的概述" class="headerlink" title="28.1 异常的概述"></a>28.1 异常的概述</h2><ul><li>异常（Exception）：<ul><li>就是程序运行过程中出现了不正常现象导致程序的中断</li><li>作用是增强程序的健壮性</li></ul></li><li>异常信息：程序异常时，在执行控制台上出现的内容，是JVM进行打印的</li></ul><h2 id="28-2-异常类"><a href="#28-2-异常类" class="headerlink" title="28.2 异常类"></a>28.2 异常类</h2><ul><li><p>异常类：</p><ul><li>异常是以类的形式存在的，每一个异常类都可以创建异常对象</li><li>实际上JVM在执行到异常程序时，会new异常对象new ArithmeticException(“&#x2F; by zero”);</li><li>并且JVM将new的异常对象抛出，打印输出信息到控制台了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">NumberFormatException</span> <span class="variable">nfe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NumberFormatException</span>(<span class="string">&quot;数字格式化异常！&quot;</span>);</span><br><span class="line">        System.out.println(nfe); <span class="comment">// java.lang.NumberFormatException: 数字格式化异常！</span></span><br><span class="line"></span><br><span class="line">        <span class="type">NullPointerException</span> <span class="variable">npe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;空指针异常发生了！&quot;</span>);</span><br><span class="line">        System.out.println(npe); <span class="comment">// java.lang.NullPointerException: 空指针异常发生了！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异常的继承结构（UML）：</p><ul><li>UML：统一建模语言，可以描述类与类之间的关系、程序的执行流程、对象的状态等</li><li>（…UML图）</li><li>Throwable类：子类有Error和Exception，不管是错误还是异常，都是可抛出的</li><li>Error类：所有错误只要发生，Java就只能终止程序，退出JVM，错误是不能处理的</li><li>Exception类：所有的异常是可以处理的，子类有编译时异常（直接子类）和运行时异常</li></ul></li><li><p>Exception类：</p><ul><li>编译时异常和运行时异常，都是发生在运行阶段，因为只有运行阶段才可以new对象</li><li>编译时异常（CheckedException）：又称为受检异常、受控异常，不是在编译时发生的，而是表示必须在编写程序时对此种异常进行处理，如果不处理编译会报错</li><li>运行时异常（UnCheckedException）：又称为未受检异常、非受控异常，在编写程序阶段，可以处理也可以不处理</li><li>编译时异常和运行时异常的区别：<ul><li>编译时异常发生概论比较高，运行时异常比较低</li><li>对于发生概论高的异常，需要在运行前进行预处理</li></ul></li></ul></li></ul><h2 id="28-3-异常的处理"><a href="#28-3-异常的处理" class="headerlink" title="28.3 异常的处理"></a>28.3 异常的处理</h2><ul><li><p>异常处理的方式：</p><ul><li>异常上抛：在方法声明的位置上，使用throws关键字，抛给上一级调用者来处理</li><li>异常的捕捉：使用try…catch语句进行异常的处理</li></ul></li><li><p>异常处理的注意事项：</p><ul><li>Java异常发生后一直上抛，最终抛到了main方法后，继续上抛</li><li>抛给了调用者JVM，JVM只有一个处理结果，就是终止Java程序的执行</li></ul></li><li><p>运行时异常（不需要处理）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        程序执行到此处发生了异常，底层new了一个ArithmeticException异常对象</span></span><br><span class="line"><span class="comment">        由于是main方法调用了100 / 0，所以这个异常抛给了main方法</span></span><br><span class="line"><span class="comment">        最后main方法没有处理，将这个异常自动抛给了JVM，JVM最终终止程序的执行。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        ArithmeticException 继承 RuntimeException，属于运行时异常</span></span><br><span class="line"><span class="comment">        在编写程序阶段不需要对这种异常进行预先的处理</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="number">100</span> / <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);  <span class="comment">// 没有输出，没有执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编译时异常（两种处理方法）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            因为doSome()方法声明位置上有：throws ClassNotFoundException</span></span><br><span class="line"><span class="comment">            在调用doSome()方法的时候必须对这种异常进行预先的处理</span></span><br><span class="line"><span class="comment">            如果不处理，编译器就报错 Unhandled exception: java.lang.ClassNotFoundException</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        doSome();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * doSome方法在方法声明的位置上使用了throws ClassNotFoundException</span></span><br><span class="line"><span class="comment">     * 表示doSome()方法在执行过程中，有可能会出现ClassNotFoundException类没找到异常</span></span><br><span class="line"><span class="comment">     * 此异常直接父类是：Exception，所以ClassNotFoundException属于编译时异常</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ClassNotFoundException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doSome!!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest04</span> &#123;</span><br><span class="line">    <span class="comment">// 第一种处理方式：throws</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        doSome();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二种处理方式：try..catch</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;undefined</span><br><span class="line">            <span class="title function_">doSome</span><span class="params">()</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;doSome!&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="28-3-throws和try…catch"><a href="#28-3-throws和try…catch" class="headerlink" title="28.3 throws和try…catch"></a>28.3 throws和try…catch</h2><ul><li><p>throws处理异常：</p><ul><li>m2抛FileNotFoundException的父对象IOException是可以的，抛Exception也可以，它包括所有异常</li><li>throws后面也可以写多个异常，可以使用逗号隔开。eg：throws ClassCastException, FileNotFoundException{undefined</li><li>一般不建议在main方法上使用throws，因为这个异常若真正的发生了，一定会抛给JVM终止</li><li>一般main方法中的异常建议使用try..catch进行捕捉，main就不要继续上抛</li></ul></li><li><p>try..catch处理异常：</p><ul><li>try..catch捕捉异常之后，后续代码可以执行，但若try语句块中出现异常，后面的代码不会执行</li><li>catch：是捕捉异常之后走的分支，小括号中的类型可以是具体的异常类型，也可以是该异常类型的父类型</li><li>catch可以写多个用来一个个处理，有利于程序的调试，异常类型遵守从小到大</li><li>FileNotFoundException e：其中e引用保存的内存地址是那个new出来异常对象的内存地址</li><li>JDK8的新特性：catch (FileNotFoundException | ArithmeticException | NullPointerException e)</li></ul></li><li><p>在开发中，处理编译时异常：</p><ul><li>如果希望调用者来处理，选择throws上报</li><li>其它情况使用捕捉的方式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1();</span><br><span class="line">            System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e)&#123;  </span><br><span class="line">            <span class="comment">// 打印异常追逐信息（建议使用，可以快速调试程序）</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                String msg = e.getMessage();</span></span><br><span class="line"><span class="comment">                System.out.println(msg);  // C:\jetns-agent.jar (系统找不到指定的文件。)</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;try..catch把异常抓住之后，此处代码会继续执行&quot;</span>);  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        m2();</span><br><span class="line">        System.out.println(<span class="string">&quot;m1异常，此处无法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123; </span><br><span class="line">        m3();</span><br><span class="line">        System.out.println(<span class="string">&quot;m2异常，此处无法执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        <span class="comment">// 这里构造方法声明上有编译时异常 throws FileNotFoundException</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\course\\01-课\\学习方法.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="28-4-异常的常用方法"><a href="#28-4-异常的常用方法" class="headerlink" title="28.4 异常的常用方法"></a>28.4 异常的常用方法</h2><table><thead><tr><th>方法名</th><th>作用</th></tr></thead><tbody><tr><td>String getMessage()</td><td>返回异常的描述消息</td></tr><tr><td>void printStackTrace()</td><td>打印异常追踪的堆栈信息（采用异步线程）</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest08</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">NullPointerException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;空指针异常&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        System.out.println(msg);  <span class="comment">// 空指针异常</span></span><br><span class="line"></span><br><span class="line">        e.printStackTrace(); </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        java.lang.NullPointerException: 空指针异常fdsafdsafdsafds</span></span><br><span class="line"><span class="comment">            at com.bjpowernode.javase.exception.ExceptionTest08.main(ExceptionTest08.java:15)</span></span><br><span class="line"><span class="comment">            at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span></span><br><span class="line"><span class="comment">            at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span></span><br><span class="line"><span class="comment">            at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span></span><br><span class="line"><span class="comment">            at java.base/java.lang.reflect.Method.invoke(Method.java:564)</span></span><br><span class="line"><span class="comment">            at com.intellij.rt.execution.application.AppMainV2.main(AppMainV2.java:131)</span></span><br><span class="line"><span class="comment">        // （异常追踪信息的查看：SUN公司不用查看，自己编写代码从上往下看）</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);  <span class="comment">// Hello World! （printStackTrace()采用异步线程方式，Hello World!可能在其之前输出）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="28-5-finally子句"><a href="#28-5-finally子句" class="headerlink" title="28.5 finally子句"></a>28.5 finally子句</h2><ul><li><p>finally：子句中的代码是最后执行的，并且是一定会执行的，即使try语句块中的代码出现了异常</p><ul><li>finally子句必须和try一起出现，不能单独编写</li><li>通常在finally语句块中完成资源的释放&#x2F;关，因为finally中的代码比较有保障</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">ackage com.javase.exception;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest10</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">// 声明位置放到try外面。这样在finally中才能用</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            fis = <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;D:\\course\\JavaSE进阶.pdf&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            s.toString();</span><br><span class="line">            System.out.println(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//fis.close();  // 流使用完需要关闭，因为流是占用资源的，放在这里有可能流关不了</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;undefined</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IOException e)&#123;undefined</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span>(NullPointerException e) &#123;undefined</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;  <span class="comment">// 流的关闭放在这里比较保险，即使出现异常，finally中也会执行</span></span><br><span class="line">            System.out.println(<span class="string">&quot;hello！&quot;</span>); </span><br><span class="line">            <span class="keyword">if</span> (fis != <span class="literal">null</span>) &#123;  <span class="comment">// 避免空指针异常</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    fis.close();  <span class="comment">// close()方法有异常，采用捕捉的方式</span></span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;  </span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello kitty!&quot;</span>);  <span class="comment">// hello kitty!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>try和finally：</p><ul><li>只有try和finally，没有catch也是可以的</li><li>先执行try，再执行finally，最后执行return</li><li>return语句一旦，执行程序一定结束</li><li>注意事项：renturn改为退出JVM，finally语句中的代码就不执行了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest11</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;try...&quot;</span>); </span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">            <span class="comment">// System.exit(0);  // finally语句不执行</span></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally...&quot;</span>);  <span class="comment">// finally中的语句一定会执行</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World!&quot;</span>);  <span class="comment">// 代码是无法执行到</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Java中的规则（面试题）：<ul><li>方法体中的代码必须遵循自上而下顺序依次逐行执行</li><li>return语句必须是最后执行的，一旦执行整个方法必须结束</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest13</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> m();</span><br><span class="line">        System.out.println(result);  <span class="comment">//100</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">m</span><span class="params">()</span>&#123;undefined</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 这行代码出现在int i = 100;的下面，所以最终结果必须是返回100</span></span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    反编译之后的效果：class——&gt;Java</span></span><br><span class="line"><span class="comment">    public static int m()&#123;</span></span><br><span class="line"><span class="comment">        int i = 100;</span></span><br><span class="line"><span class="comment">        int j = i;</span></span><br><span class="line"><span class="comment">        i++;</span></span><br><span class="line"><span class="comment">        return j;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>final finally finalized 区别：</p><ul><li>final 关键字：修饰的类无法继承、修饰的方法无法覆盖、修饰的变量不能重新赋值</li><li>finally 关键字：和try一起联合使用，finally语句块中的代码是必须执行的</li><li>finalize 标识符：是一个Object类中的方法名，这个方法是由垃圾回收器GC负责调用的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest14</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// final是一个关键字，表示最终的不变的</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// finally也是一个关键字，和try联合使用，使用在异常处理机制中</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;finally....&quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// finalize()是Object类中的一个方法，是JVM的GC垃圾回收器负责调用</span></span><br><span class="line">        Object obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="28-6-自定义异常"><a href="#28-6-自定义异常" class="headerlink" title="28.6 自定义异常"></a>28.6 自定义异常</h2><ul><li><p>自定义异常：</p><ul><li>第一步：编写一个类继承Exception或者RuntimeException</li><li>第二步：提供两个构造方法，一个无参数的，一个带有String参数的</li><li>throw：手动抛出异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span>&#123;  <span class="comment">// 编译时异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">()</span>&#123;  <span class="comment">// 无参构造</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyException</span><span class="params">(String s)</span>&#123;  <span class="comment">// 有参构造</span></span><br><span class="line">        <span class="built_in">super</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    public class MyException extends RuntimeException&#123;  // 运行时异常</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExceptionTest15</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建异常对象（只new了异常对象，并没有手动抛出）</span></span><br><span class="line">        <span class="type">MyException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyException</span>(<span class="string">&quot;用户名不能为空！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印异常堆栈信息</span></span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 获取异常简单描述信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> e.getMessage();</span><br><span class="line">        System.out.println(msg);  <span class="comment">// 用户名不能为空！</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="28-7-异常与开发"><a href="#28-7-异常与开发" class="headerlink" title="28.7 异常与开发"></a>28.7 异常与开发</h2><ul><li><p>编写程序：使用一维数组，模拟栈数据结构，实现栈满栈空时抛出异常</p></li><li><p>方法覆盖：重写后的方法不能比重写之前抛出的异常多，但是可以更少</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyStack</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Object[] elements;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> index;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参数构造方法。默认初始化栈容量10.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyStack</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.elements = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">10</span>];</span><br><span class="line">        <span class="built_in">this</span>.index = -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 压栈的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> obj 被压入的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> MyStackOperationException &#123;</span><br><span class="line">        <span class="keyword">if</span>(index &gt;= elements.length - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">MyStackOperationException</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyStackOperationException</span>(<span class="string">&quot;压栈失败，栈已满！&quot;</span>);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">throw</span> e; <span class="comment">// throw new MyStackOperationException(&quot;压栈失败，栈已满！&quot;);</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                throw e 手动将异常抛出去</span></span><br><span class="line"><span class="comment">                这里捕捉没有意义，自己new一个异常，自己捕捉没有意义</span></span><br><span class="line"><span class="comment">                栈已满这个信息需要传递出去</span></span><br><span class="line"><span class="comment">            */</span>         </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        index++;  <span class="comment">// 程序能够执行到这里，说明栈没满</span></span><br><span class="line">        elements[index] = obj;</span><br><span class="line">        System.out.println(<span class="string">&quot;压栈&quot;</span> + obj + <span class="string">&quot;元素成功，栈帧指向&quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 弹栈的方法，从数组中往外取元素。每取出一个元素，栈帧向下移动一位。</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pop</span><span class="params">()</span> <span class="keyword">throws</span> MyStackOperationException &#123;undefined</span><br><span class="line">        <span class="title function_">if</span><span class="params">(index &lt; <span class="number">0</span>)</span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                改良前：</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;弹栈失败，栈已空！&quot;);</span></span><br><span class="line"><span class="comment">                return;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyStackOperationException</span>(<span class="string">&quot;弹栈失败，栈已空！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.print(<span class="string">&quot;弹栈&quot;</span> + elements[index] + <span class="string">&quot;元素成功，&quot;</span>);</span><br><span class="line">        index--;</span><br><span class="line">        System.out.println(<span class="string">&quot;栈帧指向&quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        封装：</span></span><br><span class="line"><span class="comment">        第一步：属性私有化</span></span><br><span class="line"><span class="comment">        第二步：对外提供set和get方法，也许用不上但是必须写上</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> Object[] getElements() &#123;undefined</span><br><span class="line">        <span class="keyword">return</span> elements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setElements</span><span class="params">(Object[] elements)</span> &#123;undefined</span><br><span class="line">        <span class="built_in">this</span>.elements = elements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">()</span> &#123;undefined</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIndex</span><span class="params">(<span class="type">int</span> index)</span> &#123;undefined</span><br><span class="line">        <span class="built_in">this</span>.index = index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>异常捕捉：try、catch、finally</p></li><li><p>throws ：在方法声明位置上使用，表示上报异常信息给调用者</p></li><li><p>throw ：手动抛出异常</p></li></ul><h1 id="29-集合"><a href="#29-集合" class="headerlink" title="29 集合"></a>29 集合</h1><h2 id="29-1-集合概述"><a href="#29-1-集合概述" class="headerlink" title="29.1 集合概述"></a>29.1 集合概述</h2><ul><li><p>集合：所有的集合类和集合接口都在java.util包下，java.util.*，</p><ul><li>实质上就是一个容器，存储Java对象的内存地址，或者说存储的是引用</li><li>集合不能存储基本数据类型，也不能直接存储Java对象</li></ul></li><li><p>集合底层的数据结构：</p><ul><li>Java中每一个不同的集合，底层会存储不同的数据结构</li><li>使用不同的集合，就使用了不同的数据结构，数据的存储方式就不同</li></ul></li><li><p>集合的分类：两大超级父接口</p><ul><li>java.util.Connection：单个方式存储元素</li><li>java.util.Map：以键值对的方式存储元素</li></ul><p><img src="https://www.runoob.com/wp-content/uploads/2014/01/2243690-9cd9c896e0d512ed.gif"></p></li><li><p>Collection集合的继承构造图：</p><ul><li>超级父接口：Interable接口，继承其interator()方法</li><li>List接口：ArrayList、LinkedList</li><li>Set接口：HashSet、SortedSet接口—&gt; TreeSet</li><li>Queue接口</li></ul></li><li><p>Map集合的继承构造图：</p><ul><li>HashMap、Hashtable</li><li>SortedMap接口：TreeMap</li></ul></li><li><p>实现类的总结：</p><ul><li>ArrayList：数组、非线程安全</li><li>LinkedList：双向链表</li><li>Vector：数组、线程安全</li><li>HashSet：底层是hashMap集合，放到HashSet集合中的元素等同于放到HashMap集合key部分</li><li>TreeSet：底层是TreeMap集合，放到TreeSet集合中的元素等同于放到TreeMap集合key部分</li><li>HashMap：哈希表、非线程安全</li><li>Hashtable：哈希表、线程安全</li><li>properties：线程安全，key和value只能存储字符串</li><li>TreeMap：二叉树，TreeMap集合的key可以自动按照大小排序</li></ul></li><li><p>集合的总结：</p><ul><li>List接口：序列（存取有序、允许重复、有下标）</li><li>Set接口（Map）：集（存取无序、不允许重复）</li><li>SortedSet（SortedMap）接口：（存取无序、不允许重复、可排序的）</li><li>Map集合的key就是一个Set集合，在Set集合放数据就是在Map集合key部分</li></ul></li></ul><h2 id="29-2-Collection集合"><a href="#29-2-Collection集合" class="headerlink" title="29.2 Collection集合"></a>29.2 Collection集合</h2><ul><li><p>Collection接口：</p><ul><li>没有使用“泛型”之前，Collection中可以存储Object的所有子类型</li><li>使用了“泛型”之后，Collection中只能存储某个具体的类型</li></ul></li><li><p>Collection中的常用方法：</p><ul><li>boolean add(Object e) 向集合中添加元素</li><li>int size()  获取集合中元素的个数</li><li>void clear() 清空集合</li><li>boolean contains(Object o) 判断当前集合中是否包含元素o，包含返回true，不包含返回false</li><li>boolean remove(Object o) 删除集合中的某个元素。</li><li>boolean isEmpty()  判断该集合中元素的个数是否为0</li><li>Object[] toArray()  调用这个方法可以把集合转换成数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Collection c = new Collection();  // 接口是抽象的，无法实例化</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 向集合中添加元素</span></span><br><span class="line">        c.add(<span class="number">1200</span>);  <span class="comment">// 自动装箱，实际存放对象地址Integer x = new Integer(1200);</span></span><br><span class="line">        c.add(<span class="number">3.14</span>); </span><br><span class="line">        c.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">        c.add(<span class="keyword">new</span> <span class="title class_">Student</span>());</span><br><span class="line">        c.add(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取集合中元素的个数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数是：&quot;</span> + c.size());  <span class="comment">// 元素个数是：5</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空集合</span></span><br><span class="line">        c.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数是：&quot;</span> + c.size());  <span class="comment">// 元素个数是：0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 再向集合中添加元素</span></span><br><span class="line">        c.add(<span class="string">&quot;hello&quot;</span>);  <span class="comment">// &quot;hello&quot;对象的内存地址放到了集合当中</span></span><br><span class="line">        c.add(<span class="string">&quot;world&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;浩克&quot;</span>);</span><br><span class="line">        c.add(<span class="string">&quot;绿巨人&quot;</span>);</span><br><span class="line">        c.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断集合中是否包含指定字符串</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag2</span> <span class="operator">=</span> c.contains(<span class="string">&quot;绿巨人2&quot;</span>);</span><br><span class="line">        System.out.println(flag2);   <span class="comment">// false</span></span><br><span class="line">        System.out.println(c.contains(<span class="number">1</span>));  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除集合中某个元素</span></span><br><span class="line">        c.remove(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;元素个数是：&quot;</span> + c.size());  <span class="comment">// 元素个数是：4</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判断集合是否为空（集合中是否存在元素）</span></span><br><span class="line">        System.out.println(c.isEmpty());  <span class="comment">// false</span></span><br><span class="line">        c.clear();</span><br><span class="line">        System.out.println(c.isEmpty());  <span class="comment">// true（表示集合中没有元素）</span></span><br><span class="line"></span><br><span class="line">        c.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        c.add(<span class="number">100</span>);</span><br><span class="line">        c.add(<span class="keyword">new</span> <span class="title class_">Student</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 转换成数组（了解）</span></span><br><span class="line">        Object[] objs = c.toArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; objs.length; i++)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> objs[i];</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*（运行结果）</span></span><br><span class="line"><span class="comment">        abc</span></span><br><span class="line"><span class="comment">        100</span></span><br><span class="line"><span class="comment">        com.bjpowernode.javase.collection.Student@e9e54c2</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>contains(Object o)：</p><ul><li>判断当前集合中是否包含元素o，包含返回true，不包含返回false</li><li>源码使用了equals方法对比，会调用此数据类型的equals方法</li><li>注意事项：字符串默认重写了equals，但自定义的类需要手动重写equals</li><li>remove(Object o)也同样调用了equals方法</li></ul></li><li><p>关于String类型的比较：</p><ul><li>String类型数据如果是new出来的，String引用指向一个对象，对象中存储字符串常量池的地址，所以不能直接比较，因为对象的内存地址一定不相同</li><li>String类型数据如果是直接双引号赋值，String引用存储的就是字符串常量池中同一个字符串，因为Java为了节省存储空间，不会新创建</li><li>对比字符串使用equals方法，比较的就是字符串本身，而不是字符串对象的地址</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionTest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);  <span class="comment">// s1 = 0x1111</span></span><br><span class="line">        c.add(s1);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;def&quot;</span>);  <span class="comment">// s2 = 0x2222</span></span><br><span class="line">        c.add(s2);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>);  <span class="comment">// x = 0x5555</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(c.contains(x));  <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    结论：存放在一个集合中的类型，一定要重写equals方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionTest05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line">        c.add(u1);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;jack&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            没有重写equals之前：false</span></span><br><span class="line"><span class="comment">            重写equals方法之后会比较name：true</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(c.contains(u2));  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Integer默认重写了equals方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10000</span>);</span><br><span class="line">        c.add(x);</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">10000</span>);</span><br><span class="line">        System.out.println(c.contains(y));  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String默认重写了equals方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">cc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        cc.add(s1);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        cc.remove(s2); </span><br><span class="line">        System.out.println(cc.size());  <span class="comment">// 0（Java认为s1和s2是一样的）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(o == <span class="literal">null</span> || !(o <span class="keyword">instanceof</span> User)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(o == <span class="built_in">this</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> (User)o;</span><br><span class="line">        <span class="keyword">return</span> u.name.equals(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="29-3-Interator迭代器"><a href="#29-3-Interator迭代器" class="headerlink" title="29.3 Interator迭代器"></a>29.3 Interator迭代器</h2><ul><li><p>Interable接口：</p><ul><li>是Collection接口的超级父接口</li><li>其中有方法interator()，用来创建集合的迭代器对象</li></ul></li><li><p>Interator：</p><ul><li>既是方法也是类型名，表示集合的迭代器对象，用于集合遍历</li><li>方法：hashNext()、next()、remove()</li><li>在Map集合中不能用，在所有的Collection以及子类中使用</li></ul></li><li><p>Interator的方法：</p><ul><li>hasNext()：如果仍有元素可以迭代，则返回true</li><li>next()：让迭代器前进一位，并返回指向元素</li><li>存进去什么类型，next()取出来返回就是什么类型，只是sout的类型为字符串</li><li>一开始迭代器对象it不是指向集合中第一个元素，先前进再返回</li></ul></li><li><p>遍历&#x2F;迭代的步骤：</p><ul><li>第一步：获取集合对象的迭代器对象Iterator</li><li>第二步：通过以上的迭代器对象开始迭代&#x2F;遍历集合</li><li>一直取it.next()不判断it.hasNext()，会java.util.NoSuchElementException异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); </span><br><span class="line">        c.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        c.add(<span class="number">100</span>);</span><br><span class="line">        c.add(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一步</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> c.iterator();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 第二步</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        abc</span></span><br><span class="line"><span class="comment">        100</span></span><br><span class="line"><span class="comment">        java.lang.Object@3f99bd52</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代器是通用的：</p><ul><li>ArrayList集合：有序可重复</li><li>HashSet集合：无序不可重复</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionTest03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Collection</span> <span class="variable">c1</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); </span><br><span class="line">        c1.add(<span class="number">1</span>);</span><br><span class="line">        c1.add(<span class="number">2</span>);</span><br><span class="line">        c1.add(<span class="number">3</span>);</span><br><span class="line">        c1.add(<span class="number">4</span>);</span><br><span class="line">        c1.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> c1.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1</span></span><br><span class="line"><span class="comment">        2</span></span><br><span class="line"><span class="comment">        3</span></span><br><span class="line"><span class="comment">        4</span></span><br><span class="line"><span class="comment">        1</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">        <span class="comment">// 不可重复：存储100，不能再存储100</span></span><br><span class="line">        c2.add(<span class="number">100</span>);</span><br><span class="line">        c2.add(<span class="number">200</span>);</span><br><span class="line">        c2.add(<span class="number">300</span>);</span><br><span class="line">        c2.add(<span class="number">90</span>);</span><br><span class="line">        c2.add(<span class="number">400</span>);</span><br><span class="line">        c2.add(<span class="number">50</span>);</span><br><span class="line">        c2.add(<span class="number">60</span>);</span><br><span class="line">        c2.add(<span class="number">100</span>);</span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it2</span> <span class="operator">=</span> c2.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">            System.out.println(it2.next());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        400</span></span><br><span class="line"><span class="comment">        50</span></span><br><span class="line"><span class="comment">        100</span></span><br><span class="line"><span class="comment">        200</span></span><br><span class="line"><span class="comment">        90</span></span><br><span class="line"><span class="comment">        300</span></span><br><span class="line"><span class="comment">        60</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>迭代器的remove()方法：</p><ul><li>当集合的结构发生改变时，迭代器必须重新获取，否则会出现异常java.util.ConcurrentModificationException</li><li>在迭代元素时，只能使用迭代器Iterator的remove方法删除，不要使用集合自带的remove方法</li><li>此方法删除的一定是迭代器指向的当前元素，并会自动更新迭代器和更新集合</li><li>可以理解为，迭代器类似于快照，迭代器的remove方法是同时更新快照和集合元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CollectionTest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Collection</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 此时迭代器，指向的是集合中没有元素状态下的迭代器，会出现异常java.util.ConcurrentModificationException</span></span><br><span class="line">        <span class="comment">// Iterator it = c.iterator();</span></span><br><span class="line">        </span><br><span class="line">        c.add(<span class="number">1</span>); </span><br><span class="line">        c.add(<span class="number">2</span>);</span><br><span class="line">        c.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取迭代器的位置</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> c.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用迭代器的remove方法删除元素</span></span><br><span class="line">        <span class="type">Collection</span> <span class="variable">c2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        c2.add(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        c2.add(<span class="string">&quot;def&quot;</span>);</span><br><span class="line">        c2.add(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it2</span> <span class="operator">=</span> c2.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it2.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> it2.next();</span><br><span class="line">            <span class="comment">//c2.remove(o);  // 异常原因：集合中元素删除了，但是没有更新迭代器</span></span><br><span class="line">            it2.remove();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(c2.size());  <span class="comment">// 0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="29-4-List：ArrayList"><a href="#29-4-List：ArrayList" class="headerlink" title="29.4 List：ArrayList"></a>29.4 List：ArrayList</h2><ul><li><p>List：序列（存取有序、允许重复、有下标从0开始）</p></li><li><p>list的特有方法：</p><ul><li>void add(int index, Object element)</li><li>Object set(int index, Object element)</li><li>Object get(int index)</li><li>int indexOf(Object o)</li><li>int lastIndexOf(Object o)</li><li>Object remove(int index)</li></ul></li><li><p>创建List类型集合才能使用特有方法，其实现类有：</p></li><li><p>但不管是LinkedList还是ArrayList，不需要关心具体是哪个集合。因为我们要面向接口编程（Link），调用的方法都是接口中的方法</p><ul><li><p>ArrayList（数组、非线程安全）</p></li><li><p>LinkedList（双向链表）</p></li><li><p>Vector（数组，线程安全）</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ListTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//List myList = new LinkedList();</span></span><br><span class="line">        <span class="comment">//List myList = new Vector();</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">myList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认向集合末尾添加元素</span></span><br><span class="line">        myList.add(<span class="string">&quot;A&quot;</span>);  </span><br><span class="line">        myList.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        myList.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        myList.add(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">        myList.add(<span class="string">&quot;D&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 在列表的指定位置插入指定元素，效率比较低</span></span><br><span class="line">        myList.add(<span class="number">1</span>, <span class="string">&quot;KING&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代</span></span><br><span class="line">        <span class="type">Iterator</span> <span class="variable">it</span> <span class="operator">=</span> myList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">elt</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(elt);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 根据下标获取元素</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">firstObj</span> <span class="operator">=</span> myList.get(<span class="number">0</span>);</span><br><span class="line">        System.out.println(firstObj);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// List集合有自己比较特殊的遍历方式：通过下标遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; myList.size(); i++)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> myList.get(i);</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定对象第一次出现处的索引</span></span><br><span class="line">        System.out.println(myList.indexOf(<span class="string">&quot;C&quot;</span>)); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取指定对象最后一次出现处的索引</span></span><br><span class="line">        System.out.println(myList.lastIndexOf(<span class="string">&quot;C&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除指定下标位置的元素</span></span><br><span class="line">        myList.remove(<span class="number">0</span>);</span><br><span class="line">        System.out.println(myList.size()); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改指定位置的元素</span></span><br><span class="line">        myList.set(<span class="number">2</span>, <span class="string">&quot;Soft&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ArrayList实现类（数组、非线程安全）<ul><li>集合底层是一个Object[]数组，默认初始化容量10</li><li>扩容：增长到原容量的1.5倍，就是二进制向右移动一位</li><li>优化：尽可能少的扩容，效率比较低，建议在使用预估计元素的个数，给定初始化容量</li><li>（面试题）最多使用的集合：ArrayList集合，因为往数组末尾添加元素，效率不受影响。另外检索和查找某个元素的操作比较多时</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    构造方法：</span></span><br><span class="line"><span class="comment">     new ArrayList();</span></span><br><span class="line"><span class="comment">     new ArrayList(20);</span></span><br><span class="line"><span class="comment">     new ArrayList(Collection&lt;?extend E&gt;c);  //构造包含一个指定Collection的元素的列表</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     // 创建一个HashSet集合</span></span><br><span class="line"><span class="comment">     Collection c = new HashSet();</span></span><br><span class="line"><span class="comment"> // 可以将HashSet集合转换成List集合。</span></span><br><span class="line"><span class="comment">     List myList3 = new ArrayList(c);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayListTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 默认初始化容量是10</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定初始化容量,数组的长度是20</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(<span class="number">20</span>);</span><br><span class="line">       </span><br><span class="line">        list1.add(<span class="number">1</span>);</span><br><span class="line">        list1.add(<span class="number">2</span>);</span><br><span class="line">        list1.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取当前集合中元素的个数。不是获取集合的容量</span></span><br><span class="line">        System.out.println(list1.size());  <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        int newCapacity = ArraysSupport.newLength(oldCapacity,minCapacity - oldCapacity,oldCapacity &gt;&gt; 1);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        源码eg：二进制00000100 右移一位 00000010 </span></span><br><span class="line"><span class="comment">        原先是4，增长之后是6，增长之后的容量是之前容量的1.5倍</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>LinkedList实现类（双向链表、有下标）：<ul><li>LinkedList集合没有初始化容量，最初这个链表中没有任何元素，first和last引用都是null</li><li>注意：ArrayList之所以检索效率比较高，不是单纯因为下标的原因，是因为底层数组发挥的作用。LinkedList集合有下标，但是只能从头节点开始遍历</li><li>由于内存地址可不连续，所以随机增删时不会有大量元素位移，效率较高</li><li>（面试题）在以后的开发中，如果遇到随机增删集合中元素的业务比较多时，建议使用LinkedList。但通常情况下，末尾添加元素多，ArrayList使用还是多与LinkedList</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinkedListTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line">        list.add(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;c&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;list.size(); i++)&#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> list.get(i);</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">List</span> <span class="variable">list1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>(); <span class="comment">// 这样写表示底层你用了数组</span></span><br><span class="line">        <span class="type">List</span> <span class="variable">list2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>(); <span class="comment">// 这样写表示底层你用了双向链表</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 但这些方法面向的都是接口Link编程，与底层无关</span></span><br><span class="line">        list2.add(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Vector（数组，线程安全）：<ul><li>线程同步的，所以是线程安全的</li><li>但目前有别的方法保证线程安全，使用ArrayList较多</li></ul></li></ul></li></ul><h2 id="29-5-Set：HashSet"><a href="#29-5-Set：HashSet" class="headerlink" title="29.5 Set：HashSet"></a>29.5 Set：HashSet</h2><ul><li><p>Set：集（存取无序、不允许重复、没有下标）</p></li><li><p>HashSet：底层是hashMap集合，放到HashSet集合中的元素等同于放到HashMap集合key部分</p><ul><li>不可重复、存储时顺序和取出的顺序不同</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashSetTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        Set&lt;String&gt; strs = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;&gt;();</span><br><span class="line">        strs.add(<span class="string">&quot;hello3&quot;</span>);</span><br><span class="line">        strs.add(<span class="string">&quot;hello4&quot;</span>);</span><br><span class="line">        strs.add(<span class="string">&quot;hello1&quot;</span>);</span><br><span class="line">        strs.add(<span class="string">&quot;hello2&quot;</span>);</span><br><span class="line">        strs.add(<span class="string">&quot;hello3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String s : strs)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        hello1</span></span><br><span class="line"><span class="comment">        hello4</span></span><br><span class="line"><span class="comment">        hello2</span></span><br><span class="line"><span class="comment">        hello3</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TreeSet：底层是TreeMap集合，放到TreeSet集合中的元素等同于放到TreeMap集合key部分</p><ul><li>不可重复的，但是存储的元素可以自动按照大小顺序排序</li><li>无序指的是存进去的顺序和取出来的顺序不同，并且没有下标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TreeSetTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; strs = <span class="keyword">new</span> <span class="title class_">TreeSet</span>&lt;&gt;();</span><br><span class="line">        strs.add(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        strs.add(<span class="string">&quot;Z&quot;</span>);</span><br><span class="line">        strs.add(<span class="string">&quot;B&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(String s : strs)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        A</span></span><br><span class="line"><span class="comment">        B</span></span><br><span class="line"><span class="comment">        Z</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="29-6-Map集合"><a href="#29-6-Map集合" class="headerlink" title="29.6 Map集合"></a>29.6 Map集合</h2><ul><li><p>Map接口：</p><ul><li>Map和Collection没有继承关系</li><li>Map集合以key和value的方式存储数据，键值对</li><li>key和value都是引用数据类型，都是存储对象的内存地址</li></ul></li><li><p>Map的常用方法：</p><ul><li>V put(K key, V value) 向Map集合中添加键值对</li><li>V get(Object key) 通过key获取value</li><li>void clear()    清空Map集合</li><li>boolean containsKey(Object key) 判断Map中是否包含某个key</li><li>boolean containsValue(Object value) 判断Map中是否包含某个value</li><li>boolean isEmpty()   判断Map集合中元素个数是否为0</li><li>V remove(Object key) 通过key删除键值对</li><li>int size() 获取Map集合中键值对的个数。</li><li>Collection<V> values() 获取Map集合中所有的value，返回一个Collection</li><li>Set<K> keySet() 获取Map集合所有的key（所有的键是一个set集合）</li><li>Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() 将Map集合转换成Set集合</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> map1集合对象</span></span><br><span class="line"><span class="comment"> key             value</span></span><br><span class="line"><span class="comment"> ----------------------------</span></span><br><span class="line"><span class="comment"> 1               zhangsan</span></span><br><span class="line"><span class="comment"> 2               lisi</span></span><br><span class="line"><span class="comment"> 3               wangwu</span></span><br><span class="line"><span class="comment"> 4               zhaoliu</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> Set set = map1.entrySet();</span></span><br><span class="line"><span class="comment"> set集合对象</span></span><br><span class="line"><span class="comment"> 1=zhangsan </span></span><br><span class="line"><span class="comment"> 2=lisi     </span></span><br><span class="line"><span class="comment"> 3=wangwu</span></span><br><span class="line"><span class="comment"> 4=zhaoliu ---&gt; Map.Entry</span></span><br><span class="line"><span class="comment"> </span></span><br><span class="line"><span class="comment"> entrySet()方法：Set集合中元素的类型是 Map.Entry&lt;K,V&gt;</span></span><br><span class="line"><span class="comment">Map.Entry和String一样，都是一种类型的名字，但Map.Entry是Map中的静态内部类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>);  <span class="comment">// 1在这里进行了自动装箱</span></span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;zhaoliu&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 通过key获取value</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> map.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(value); <span class="comment">// lisi</span></span><br><span class="line">        <span class="comment">// 获取键值对的数量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;键值对的数量：&quot;</span> + map.size()); <span class="comment">// 键值对的数量：4</span></span><br><span class="line">        <span class="comment">// 通过key删除key-value</span></span><br><span class="line">        map.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;键值对的数量：&quot;</span> + map.size()); <span class="comment">// 键值对的数量：3</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断是否包含某个key</span></span><br><span class="line">        <span class="comment">// contains方法底层调用的都是equals进行比对的，所以自定义的类型需要重写equals方法</span></span><br><span class="line">        System.out.println(map.containsKey(<span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">4</span>))); <span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 判断是否包含某个value</span></span><br><span class="line">        System.out.println(map.containsValue(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;wangwu&quot;</span>))); <span class="comment">// true</span></span><br><span class="line">        <span class="comment">// 获取所有的value</span></span><br><span class="line">        Collection&lt;String&gt; values = map.values();</span><br><span class="line">        <span class="comment">// foreach</span></span><br><span class="line">        <span class="keyword">for</span>(String s : values)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 清空map集合</span></span><br><span class="line">        map.clear();</span><br><span class="line">        System.out.println(<span class="string">&quot;键值对的数量：&quot;</span> + map.size()); <span class="comment">// 键值对的数量：0</span></span><br><span class="line">        <span class="comment">// 判断是否为空</span></span><br><span class="line">        System.out.println(map.isEmpty()); <span class="comment">// true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>遍历Map集合：</p><ul><li>第一种方式：获取所有的key，通过遍历key，来遍历value。foreach也可以实现</li><li>第二种方式：Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一种方式：获取所有的key，通过遍历key，来遍历value</span></span><br><span class="line">        Map&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">1</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        map.put(<span class="number">2</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        map.put(<span class="number">3</span>, <span class="string">&quot;wangwu&quot;</span>);</span><br><span class="line">        map.put(<span class="number">4</span>, <span class="string">&quot;zhaoliu&quot;</span>);</span><br><span class="line">        Set&lt;Integer&gt; keys = map.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 迭代器：获取所有的key，所有的key是一个Set集合</span></span><br><span class="line">        <span class="comment">/*Iterator&lt;Integer&gt; it = keys.iterator();</span></span><br><span class="line"><span class="comment">        while(it.hasNext())&#123;</span></span><br><span class="line"><span class="comment">            // 取出其中一个key</span></span><br><span class="line"><span class="comment">            Integer key = it.next();</span></span><br><span class="line"><span class="comment">            // 通过key获取value</span></span><br><span class="line"><span class="comment">            String value = map.get(key);</span></span><br><span class="line"><span class="comment">            System.out.println(key + &quot;=&quot; + value);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// foreach也可以</span></span><br><span class="line">        <span class="keyword">for</span>(Integer key : keys)&#123;</span><br><span class="line">            System.out.println(key + <span class="string">&quot;=&quot;</span> + map.get(key));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1=zhangsan</span></span><br><span class="line"><span class="comment">        2=lisi</span></span><br><span class="line"><span class="comment">        3=wangwu</span></span><br><span class="line"><span class="comment">        4=zhaoliu</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第二种方式：Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer,String&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="comment">// 迭代器：遍历Set集合，每一次取出一个Node</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Iterator&lt;Map.Entry&lt;Integer,String&gt;&gt; it2 = set.iterator();</span></span><br><span class="line"><span class="comment">        while(it2.hasNext())&#123;</span></span><br><span class="line"><span class="comment">            Map.Entry&lt;Integer,String&gt; node = it2.next();</span></span><br><span class="line"><span class="comment">            Integer key = node.getKey();</span></span><br><span class="line"><span class="comment">            String value = node.getValue();</span></span><br><span class="line"><span class="comment">            System.out.println(key + &quot;=&quot; + value);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// foreach效率比较高，因为获取key和value都是直接从node对象中获取的属性值，比较适合于大数据量。</span></span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;Integer,String&gt; node : set)&#123;</span><br><span class="line">            System.out.println(node.getKey() + <span class="string">&quot;---&gt;&quot;</span> + node.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="29-7-HashMap"><a href="#29-7-HashMap" class="headerlink" title="29.7 HashMap"></a>29.7 HashMap</h2><ul><li><p>HashMap：底层是哈希表&#x2F;散列表，哈希表是一个数组和单向链表的结合体</p><ul><li>数组：在查询方面效率很高，随机增删方面效率很低</li><li>单向链表：在随机增删方面效率较高，在查询方面效率很低</li><li>哈希表：增删在链表上完成，查询也只需要部分扫描，结合两者优点</li></ul></li><li><p>HashMap集合底层的源代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HashMap</span>&#123;</span><br><span class="line">    <span class="comment">// HashMap底层实际上就是一个数组（一维数组）</span></span><br><span class="line">Node&lt;K,V&gt;[] table;  <span class="comment">// 静态的内部类HashMap.Node</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Node</span>&lt;K,V&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> hash; <span class="comment">// 哈希值是key的hashCode()方法的执行结果,hash值通过哈希函数/算法，可以转换存储成数组的下标</span></span><br><span class="line">    <span class="keyword">final</span> K key;  <span class="comment">// 存储到Map集合中的key</span></span><br><span class="line">    V value;  <span class="comment">// 存储到Map集合中的value</span></span><br><span class="line">    Node&lt;K,V&gt; next;  <span class="comment">// 下一个节点的内存地址</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>哈希表&#x2F;散列表：一维数组，这个数组中每一个元素是一个单向链表（数组和链表的结合体）</p></li><li><p>HashMap的方法：最主要掌握，这两个方法的实现原理</p><ul><li>map.put(k,v)</li><li>v &#x3D; map.get(k)</li></ul></li><li><p>map.put(k, v)的实现原理：</p><ul><li>第一步：先将k封装到Node对象中</li><li>第二步：底层调用hashCode()方法得出哈希值</li><li>第三步：对应哈希值下标位置添加，equals比较和覆盖</li></ul></li><li><p>HashMap集合的key部分特点：无序，不可重复</p><ul><li>无序：因为不一定挂到哪个单向链表上</li><li>不可重复： equals方法来保证HashMap集合的key不可重复，如果key重复了，value会覆盖</li><li>放在HashMap集合key部分的元素其实就是放到HashSet集合中了</li><li>所以HashSet集合中的元素也需要同时重写hashCode()+equals()方法</li></ul></li></ul><h2 id="29-8-工具类"><a href="#29-8-工具类" class="headerlink" title="29.8 工具类"></a>29.8 工具类</h2><h2 id="29-9-增强for循环"><a href="#29-9-增强for循环" class="headerlink" title="29.9 增强for循环"></a>29.9 增强for循环</h2><ul><li><p>foreach：增强for循环，JDK5.0之后推出的新特性</p><ul><li><p>for(元素类型 变量名 : 数组或集合) {<br>        System.out.println(变量名);<br>}</p></li><li><p>缺点：没有下标，在需要使用下标的循环中，不建议使用</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">集合使用foreach</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ForEachTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; strList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        strList.add(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        strList.add(<span class="string">&quot;world!&quot;</span>);</span><br><span class="line">        strList.add(<span class="string">&quot;kitty!&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 遍历：使用迭代器方式</span></span><br><span class="line">        Iterator&lt;String&gt; it = strList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历：使用下标方式（只针对于有下标的集合）</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; strList.size(); i++)&#123;</span><br><span class="line">            System.out.println(strList.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历：使用foreach</span></span><br><span class="line">        <span class="keyword">for</span>(String s : strList)&#123;  <span class="comment">// 因为泛型使用的是String类型，s表示每一个元素</span></span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">100</span>);</span><br><span class="line">        list.add(<span class="number">200</span>);</span><br><span class="line">        list.add(<span class="number">300</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(Integer i : list)&#123; </span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="30-泛型"><a href="#30-泛型" class="headerlink" title="30 泛型"></a>30 泛型</h1><h2 id="30-1-泛型机制"><a href="#30-1-泛型机制" class="headerlink" title="30.1 泛型机制"></a>30.1 泛型机制</h2><ul><li><p>泛型：JDK5.0之后推出的新特性。只在程序编译阶段起作用，只是给编译器参考的，运行阶段泛型没用</p></li><li><p>泛型的好处：</p><ul><li>集合中存储的元素类型统一了</li><li>&#x3D;取出的元素类型是泛型指定的类型，不需要大量的向下转型</li></ul></li><li><p>泛型的缺点：</p><ul><li>导致集合中存储的元素缺乏多样性，只能存储指定类型</li><li>但是大多数业务中，集合中元素的类型还是统一的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 不使用泛型机制</span></span><br><span class="line"><span class="comment">        List myList = new ArrayList();</span></span><br><span class="line"><span class="comment">        Cat c = new Cat();</span></span><br><span class="line"><span class="comment">        Bird b = new Bird();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        myList.add(c);</span></span><br><span class="line"><span class="comment">        myList.add(b);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        Iterator it = myList.iterator();</span></span><br><span class="line"><span class="comment">        while(it.hasNext()) &#123;</span></span><br><span class="line"><span class="comment">            // 通过迭代器取出的只能是Object类型</span></span><br><span class="line"><span class="comment">            Object obj = it.next();</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            //obj中没有move方法，需要向下转型！</span></span><br><span class="line"><span class="comment">            if(obj instanceof Animal)&#123;</span></span><br><span class="line"><span class="comment">                Animal a = (Animal)obj;</span></span><br><span class="line"><span class="comment">                a.move();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用JDK5之后的泛型机制</span></span><br><span class="line">        List&lt;Animal&gt; myList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Animal&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//myList.add(&quot;abc&quot;);  // 编译报错</span></span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line"></span><br><span class="line">        myList.add(c);</span><br><span class="line">        myList.add(b);</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Animal&gt; it = myList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> it.next();</span><br><span class="line">            a.move();</span><br><span class="line">            <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">                <span class="type">Cat</span> <span class="variable">x</span> <span class="operator">=</span> (Cat)a;</span><br><span class="line">                x.catchMouse();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(a <span class="keyword">instanceof</span> Bird) &#123;</span><br><span class="line">                <span class="type">Bird</span> <span class="variable">y</span> <span class="operator">=</span> (Bird)a;</span><br><span class="line">                y.fly();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;动物在移动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;鸟儿在飞翔&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="30-2-类型自动推断"><a href="#30-2-类型自动推断" class="headerlink" title="30.2 类型自动推断"></a>30.2 类型自动推断</h2><ul><li><p>自动类型推断机制：JDK之后引入，又称为钻石表达式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动类型推断机制、钻石表达式</span></span><br><span class="line">        List&lt;Animal&gt; myList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        myList.add(<span class="keyword">new</span> <span class="title class_">Animal</span>());</span><br><span class="line">        myList.add(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line">        myList.add(<span class="keyword">new</span> <span class="title class_">Bird</span>());</span><br><span class="line"></span><br><span class="line">        Iterator&lt;Animal&gt; it = myList.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> it.next();</span><br><span class="line">            a.move();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="30-3-自定义泛型"><a href="#30-3-自定义泛型" class="headerlink" title="30.3 自定义泛型"></a>30.3 自定义泛型</h2><ul><li><p>自定义泛型：</p></li><li><p>&lt;&gt; 尖括号中的是一个标识符，随便写</p></li><li><p>使用方法时，在标识符位置必须和new对象的类型相同</p></li><li><p>java源代码中泛型定义经常使用：<E>和<T></p></li><li><p>E是Element单词首字母，T是Type单词首字母</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javase.collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericTest03</span>&lt;标识符随便写&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">(标识符随便写 o)</span>&#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// new对象的时候指定了泛型是：String类型</span></span><br><span class="line">        GenericTest03&lt;String&gt; gt = <span class="keyword">new</span> <span class="title class_">GenericTest03</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 类型必须为new对象指定的泛型</span></span><br><span class="line">        <span class="comment">//gt.doSome(100);  // 类型不匹配</span></span><br><span class="line">        gt.doSome(<span class="string">&quot;abc&quot;</span>);  <span class="comment">// abc</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ========================================</span></span><br><span class="line">        GenericTest03&lt;Integer&gt; gt2 = <span class="keyword">new</span> <span class="title class_">GenericTest03</span>&lt;&gt;();</span><br><span class="line">        gt2.doSome(<span class="number">100</span>);  </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 规定返回值类型必须为指定的泛型</span></span><br><span class="line">        MyIterator&lt;String&gt; mi = <span class="keyword">new</span> <span class="title class_">MyIterator</span>&lt;&gt;();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> mi.get();</span><br><span class="line"></span><br><span class="line">        MyIterator&lt;Animal&gt; mi2 = <span class="keyword">new</span> <span class="title class_">MyIterator</span>&lt;&gt;();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> mi2.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ========================================</span></span><br><span class="line">        <span class="comment">// 不用泛型就是Object类型</span></span><br><span class="line">        <span class="type">GenericTest03</span> <span class="variable">gt3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericTest03</span>();</span><br><span class="line">        gt3.doSome(<span class="keyword">new</span> <span class="title class_">Object</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyIterator</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">get</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="31-IO流"><a href="#31-IO流" class="headerlink" title="31 IO流"></a>31 IO流</h1><h2 id="31-1-IO流概述"><a href="#31-1-IO流概述" class="headerlink" title="31.1 IO流概述"></a>31.1 IO流概述</h2><ul><li>IO流：<ul><li>I表示Input，O表示Output，通过IO可以完成硬盘文件的读和写</li><li>Java中所有的流都是在java.io.*;下</li></ul></li><li>IO流的分类：<ul><li>按数据流的方向：输入流、输出流</li><li>按处理数据单位：字节流、字符流</li><li>按功能：节点流、处理流</li></ul></li><li>IO流四大家族的首领：都是抽象类(abstract class)<ul><li>java.io.InputStream  字节输入流</li><li>java.io.OutputStream 字节输出流</li><li>java.io.Reader        字符输入流</li><li>java.io.Writer        字符输出流</li></ul></li><li>都实现了 java.io.Closeable 接口，都是可关闭的，都有close()这个方法</li><li>都实现了 java.io.Flushable 接口，都是可刷新的，都有flush()方法</li><li>流是内存和硬盘之间的通道，用完之后一定要关闭，不然会占用很多资源，因此在后面的学习和使用中要养成好习惯，用完流一定要关闭</li><li>同时，输出流在最终输出之后，也要记得使用flush()方法刷新一下，表示将通道&#x2F;管道当中剩余未输出的数据强行输出完（清空管道）（注意：如果没有flush()可能会导致数据丢失）</li></ul><h2 id="31-2-重要流"><a href="#31-2-重要流" class="headerlink" title="31.2 重要流"></a>31.2 重要流</h2><ul><li>文件专属：<ul><li>java.io.FileInputStream（重点掌握）   </li><li>java.io.FileOutputStream（重点掌握）   </li><li>java.io.FileReader         </li><li>java.io.FileWriter</li></ul></li><li>转换流：（将字节流转换成字符流）<ul><li>java.io.InputStreamReader 主要是将字节输入流转换成字符输入流</li><li>java.io.OutputStreamWriter 主要是将字节输出流转换成字符输出流</li></ul></li><li>缓冲流：（缓冲流主要是为了提高效率而存在的，它可以减少物理读取次数）<ul><li>java.io.BufferedReader</li><li>java.io.BufferedWriter</li><li>java.io.BufferedInputStream</li><li>java.io.BufferedOutputStream</li></ul></li><li>数据流专属：<ul><li>java.io.DataInputStream</li><li>java.io.DataOutputStream</li></ul></li><li>标准输出流：<ul><li>java.io.PrintWriter</li><li>java.io.PrintStream（掌握）</li></ul></li><li>对象流专属：<ul><li>java.io.ObjectInputStream（掌握）</li><li>java.io.ObjectOutputStream（掌握）</li></ul></li></ul><h2 id="31-3-FileInputStream"><a href="#31-3-FileInputStream" class="headerlink" title="31.3 FileInputStream"></a>31.3 FileInputStream</h2>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE · 常用类篇③</title>
      <link href="/2022/04/03/JAVA/1.Java/JavaSE/JavaSE%20%C2%B7%20%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%AF%87%E2%91%A2/"/>
      <url>/2022/04/03/JAVA/1.Java/JavaSE/JavaSE%20%C2%B7%20%E5%B8%B8%E7%94%A8%E7%B1%BB%E7%AF%87%E2%91%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="20-Object类"><a href="#20-Object类" class="headerlink" title="20 Object类"></a>20 Object类</h1><h2 id="20-1-源码及API"><a href="#20-1-源码及API" class="headerlink" title="20.1 源码及API"></a>20.1 源码及API</h2><ul><li>API（Application Programming Interface）：应用程序编程接口，指得是JDK中提供各种功能的Java类库</li><li>API帮助文档：<ul><li>每一份API都对应一份API帮助文档</li><li>javadoc：从源码中提取注释信息，生成帮助文档</li></ul></li></ul><h2 id="20-2-Object类"><a href="#20-2-Object类" class="headerlink" title="20.2 Object类"></a>20.2 Object类</h2><ul><li><p>Obiect类：JDK库的根类</p><ul><li>所有类都默认直接继承或间接继承</li><li>查看方式：源码、java的类库的帮助文档</li></ul></li><li><p>常用方法：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>protected Object clone();</td><td>负责对象克隆的</td></tr><tr><td>int hasCode()</td><td>获取对象哈希值</td></tr><tr><td>boolean eauals(Object obj)</td><td>判断两个对象是否相等</td></tr><tr><td>String toString()</td><td>将对象转换成字符串形式</td></tr><tr><td>protected void finalize()</td><td>垃圾回收期负责调用的方法</td></tr></tbody></table></li></ul><h2 id="20-3-toString"><a href="#20-3-toString" class="headerlink" title="20.3 toString"></a>20.3 toString</h2>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">&#x27;@&#x27;</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>默认实现：返回 类名@ 和对象的哈希码的无符号的十六进制表示</p></li><li><p>方法覆盖：将一个java对象转换成字符串形式，建议所有子类覆盖此方法</p></li><li><p>System.out.println(s); 等同于System.out.println(s.toString);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg：日期类字符串</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.year + <span class="string">&quot;&quot;</span> + <span class="built_in">this</span>.month + <span class="string">&quot;月&quot;</span> + <span class="built_in">this</span>.day + <span class="string">&quot;日&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="20-4-equals"><a href="#20-4-equals" class="headerlink" title="20.4 equals"></a>20.4 equals</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>默认实现：用于将字符串与指定的对象比较</p></li><li><p>方法覆盖：默认无法比较两个对象（本质是对比引用中存储的地址），重写依次比较类中变量</p></li><li><p>Object向下转型后才能对比，父类Object没有对应子类的成员变量</p></li><li><p>String类重写了toString和equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// eg：日期类字符串</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == obj) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (obj == <span class="literal">null</span> || !(obj <span class="keyword">instanceof</span> Mytime)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;     </span><br><span class="line">           </span><br><span class="line">    <span class="type">int</span> <span class="variable">year1</span> <span class="operator">=</span> <span class="built_in">this</span>.year;</span><br><span class="line">    <span class="type">int</span> <span class="variable">month1</span> <span class="operator">=</span> <span class="built_in">this</span>.month;</span><br><span class="line">    <span class="type">int</span> <span class="variable">day1</span> <span class="operator">=</span> <span class="built_in">this</span>.day;   </span><br><span class="line">        </span><br><span class="line">    <span class="type">Mytime</span> <span class="variable">t</span> <span class="operator">=</span> (Mytime)obj;  <span class="comment">// 向下转型后</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.year1 == t.year2 </span><br><span class="line">        &amp;&amp; <span class="built_in">this</span>.month1 == t.month2</span><br><span class="line">        &amp;&amp; <span class="built_in">this</span>.day1 == t.day2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>基本数据类型比较：使用&#x3D;&#x3D;符号</p></li><li><p>引用数据类型比较：使用equals方法（String类中已重写覆盖）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">u1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;大兴区&quot;</span>,<span class="string">&quot;11111&quot;</span>));</span><br><span class="line">        <span class="type">User</span> <span class="variable">u2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;大兴区&quot;</span>,<span class="string">&quot;11111&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(u1.equals(u2)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">u3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zhangsan&quot;</span>, <span class="keyword">new</span> <span class="title class_">Address</span>(<span class="string">&quot;北京&quot;</span>,<span class="string">&quot;朝阳区&quot;</span>,<span class="string">&quot;11112&quot;</span>));</span><br><span class="line">        System.out.println(u1.equals(u3)); <span class="comment">// false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    String name; </span><br><span class="line">    Address addr;  <span class="comment">// 引用数据类型Address</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Address addr)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.addr = addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// equals方法：判断User对象是否相等，用户名/住址相同认定是同一个用户</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj == <span class="literal">null</span> || !(obj <span class="keyword">instanceof</span> User)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span> == obj) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> (User)obj;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.name.equals(u.name) </span><br><span class="line">           &amp;&amp; <span class="built_in">this</span>.addr.equals(u.addr))&#123;  <span class="comment">// Address类也必须重写equals</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Address</span>&#123;</span><br><span class="line">    String city;</span><br><span class="line">    String street;</span><br><span class="line">    String zipcode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">()</span>&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">(String city,String street,String zipcode)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.city = city;</span><br><span class="line">        <span class="built_in">this</span>.street = street;</span><br><span class="line">        <span class="built_in">this</span>.zipcode = zipcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处equals方法：判断Address对象是否相等</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj == <span class="literal">null</span> || !(obj <span class="keyword">instanceof</span> Address)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span> == obj) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="type">Address</span> <span class="variable">a</span> <span class="operator">=</span> (Address)obj;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">this</span>.city.equals(a.city) </span><br><span class="line">            &amp;&amp; <span class="built_in">this</span>.street.equals(a.street) </span><br><span class="line">            &amp;&amp; <span class="built_in">this</span>.zipcode.equals(a.zipcode))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="20-5-finalize"><a href="#20-5-finalize" class="headerlink" title="20.5 finalize"></a>20.5 finalize</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">finalize</span><span class="params">()</span> &#123;</span><br><span class="line">   </span><br><span class="line">&#125;         </span><br></pre></td></tr></table></figure><ul><li>默认实现：当垃圾回收器确定不再有对该对象的引用时，JVM的垃圾回收器GC自动调用该方法</li><li>方法覆盖：希望在对象销毁时机执行一段代码的话，就将此段代码写到finalize方法中</li><li>注意事项：<ul><li>此方法为protected</li><li>此方法不需要手动调用，只用方法覆盖重写即可</li><li>垃圾回收器不轻易启动，垃圾太少或时间没到都有可能不启动</li></ul></li><li>对比静态代码块：在类加载时刻执行，并执行一次</li></ul><h2 id="20-6-hasCode"><a href="#20-6-hasCode" class="headerlink" title="20.6 hasCode"></a>20.6 hasCode</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><ul><li>默认实现：返回的是哈希码，实质是一个Java对象的内存地址，经过哈希算法得出的值</li><li>带有native关键字，底层调用C++程序</li></ul><h1 id="21-内部类"><a href="#21-内部类" class="headerlink" title="21 内部类"></a>21 内部类</h1><h2 id="21-1-内部类概述"><a href="#21-1-内部类概述" class="headerlink" title="21.1 内部类概述"></a>21.1 内部类概述</h2><ul><li>内部类：把一个类定义到另外一个类的内部，在类里面的这个类就叫内部类，外面的类就叫外部类</li><li>内部类的分类：<ul><li>静态内部类：类似于静态变量（内部类有static）</li><li>实例内部类：类似于实例变量（内部类没有static）</li><li>局部内部类：类似于局部变量（内部类在方法中）</li></ul></li><li>使用内部类编写的代码，可读性很差。能不用尽量不用</li></ul><h2 id="21-2-匿名内部类"><a href="#21-2-匿名内部类" class="headerlink" title="21.2 匿名内部类"></a>21.2 匿名内部类</h2><ul><li><p>匿名内部类：</p><ul><li>匿名内部类是局部内部类的一种</li><li>因为此类没有名字，叫做匿名内部类</li><li>看似是new了一个接口，但实际后面的{}代表对接口的实现</li></ul></li><li><p>匿名内部类的缺点：</p><ul><li>匿名内部类没有名字，没有办法重复使用</li><li>另外代码太乱，可读性太差</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test01</span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String country;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Inner1</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例内部类</span></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Inner2</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="comment">// 局部内部类</span></span><br><span class="line">        <span class="keyword">class</span> <span class="title class_">Inner3</span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doOther</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 局部内部类Inner3，在doOther()中不能用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">MyMath</span> <span class="variable">mm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyMath</span>();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Compute c = new ComputeImpl();  // ComputeImpl是一个实现Compute的类</span></span><br><span class="line"><span class="comment">        mm.mySum(c, 100, 200);</span></span><br><span class="line"><span class="comment">        上述两行等同于 mm.mySum(new ComputeImpl(), 100, 200);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 匿名内部类</span></span><br><span class="line">        mm.mySum(<span class="keyword">new</span> <span class="title class_">Compute</span>()&#123;  </span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> a + b;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Compute</span>&#123; </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class ComputeImpl implements Compute&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    // 对方法的实现</span></span><br><span class="line"><span class="comment">    public int sum(int a, int b)&#123;</span></span><br><span class="line"><span class="comment">        return a + b;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMath</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mySum</span><span class="params">(Compute c, <span class="type">int</span> x, <span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">retValue</span> <span class="operator">=</span> c.sum(x, y);</span><br><span class="line">        System.out.println(x + <span class="string">&quot;+&quot;</span> + y + <span class="string">&quot;=&quot;</span> + retValue);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="22-数组（Array）"><a href="#22-数组（Array）" class="headerlink" title="22 数组（Array）"></a>22 数组（Array）</h1><h2 id="22-1-数组概述"><a href="#22-1-数组概述" class="headerlink" title="22.1 数组概述"></a>22.1 数组概述</h2><ul><li><p>数组：</p><ul><li>就是存储数据长度固定的容器，保证多个数据的数据类型要一致</li><li>可以存储基本数据类型，也可以存储引用数据类型</li><li>是一种引用数据类型，存储在堆内存中，父类是Object</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[ ] arr;  </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">arr是一个引用数据类型（数组），数组中的元素类型为int</span></span><br><span class="line"><span class="comment">arr中存储的是int数组在堆内存的内存地址，即首元素地址</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>数组的注意事项：</p><ul><li>若存储的是Java对象，实际存储的是对象的引用，即内存地址</li><li>所有的数组对象都有Java自带的length属性，用来获取数组中元素个数</li><li>首元素元素的内存地址，作为数组存储地址，并且元素的内存地址连续</li><li>数组中每个元素都有下标，从0开始以1递增，最后一个元素下标为length-1</li></ul></li><li><p>数组的分类：一维数组、二维数组、三维数组、多维数组…</p></li><li><p>数组的优点：</p><ul><li>查找某个下标上的元素时效率极高，是查询效率最高的数据结构</li><li>因为元素内存地址连续，相同数据类型占用空间大小一样，可直接计算后直接查询</li></ul></li><li><p>数组的缺点：</p><ul><li>不能存储大数据量，因为很难在内存上找到大块并且连续的内存空间</li><li>随机删除或增加元素时，效率较低</li><li>因为为了保证每个元素地址连续，会涉及到后面的每一个元素向前或向后移动操作</li><li>（不能笼统的说数组增删效率低，如最后一个元素效率没有影响）</li></ul></li></ul><h2 id="22-2-初始化数组"><a href="#22-2-初始化数组" class="headerlink" title="22.2 初始化数组"></a>22.2 初始化数组</h2><ul><li><p>数组的定义和初始化：</p><ul><li>初始化时指定每个数组元素的初始值，由系统决定数组长度</li><li>所有的数组对象都有length属性，注意不是方法没有小括号</li><li>可以用下标对数据进行存取</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组的定义</span></span><br><span class="line"><span class="type">int</span>[] array1;</span><br><span class="line"><span class="type">int</span> array1[ ];</span><br><span class="line">Object[] array2;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的静态初始化</span></span><br><span class="line"><span class="type">int</span>[] array1 = &#123;<span class="number">100</span>, <span class="number">200</span>, <span class="number">300</span>&#125;;</span><br><span class="line">Object[] array2 = &#123;<span class="keyword">new</span> <span class="title class_">Object</span>(), <span class="keyword">new</span> <span class="title class_">Object</span>(), <span class="keyword">new</span> <span class="title class_">Object</span>()&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组的动态初始化</span></span><br><span class="line"><span class="type">int</span>[] array1 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];</span><br><span class="line">String[] array2 = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">6</span>];</span><br></pre></td></tr></table></figure></li><li><p>数组的动态初始化：</p><ul><li>动态初始化时，会为数组元素类型赋默认值</li><li>eg：array2表示初始化一个长度为6的String类型数组，每个元素默认值null</li></ul></li></ul><h2 id="22-3-遍历数组"><a href="#22-3-遍历数组" class="headerlink" title="22.3 遍历数组"></a>22.3 遍历数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">    System.out.println(array[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>常见的异常：<ul><li>索引越界：访问了数组中不存在的索引对应的元素，造成索引越界问题</li><li>空指针异常：访问是数组已经不再指向堆内存的数据，造成空指针异常</li><li>eg：arr &#x3D; null; 其中arr是引用，null为引用数据类型的默认值，表示不指向任何有效对象</li></ul></li></ul><h2 id="22-4-main方法参数"><a href="#22-4-main方法参数" class="headerlink" title="22.4 main方法参数"></a>22.4 main方法参数</h2><ul><li><p>方法参数为数组时：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest04</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">        printArray(a);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">        printArray(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);  <span class="comment">//错误写法：printArray(&#123;1,2,3&#125;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span>[] a2 = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>];</span><br><span class="line">        printArray(a2);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;=============================&quot;</span>); </span><br><span class="line">        printArray(<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] array)</span>&#123;undefined</span><br><span class="line">        <span class="title function_">for</span> <span class="params">(<span class="type">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)</span> &#123;undefined</span><br><span class="line">            System.out.println(array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>main方法参数：String[] args</p><ul><li>JVM负责调用main方法，调用时会自动传一个String数组</li><li>args数组对象创建了，但是数组中没有任何数据，长度为0</li><li>此数组是留给用户的，用户可以在控制台上输入参数，这个参数自动会被转换为“String[] args”</li><li>eg：命令窗口：运行程序用java ArrayTest05 abc def xyz，JVM会自动将“abc def xyz”通过空格的方式进行分离，分离完成之后，自动放到“String[] args”数组当中，把abc def xyz 转换成字符串数组：{“abc”,”def”,”xyz”}</li><li>eg：IDEA：Run&#x2F;Edit Configurations&#x2F;Application&#x2F;Program argument程序参数设置</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest05</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        System.out.println(<span class="string">&quot;JVM给传递过来的String数组长度是&quot;</span> + args.length);  <span class="comment">// ...0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            数组对象创建了，但是数组中没有任何数据</span></span><br><span class="line"><span class="comment">            String[] strs = new String[0];</span></span><br><span class="line"><span class="comment">            String[] strs = &#123;&#125;; // 静态初始化数组，里面没东西</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            System.out.println(args[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="22-5-引用数据类型"><a href="#22-5-引用数据类型" class="headerlink" title="22.5 引用数据类型"></a>22.5 引用数据类型</h2><ul><li><p>Animal为数组，animals为引用数据类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Animal[] ans = <span class="keyword">new</span> <span class="title class_">Animal</span>[<span class="number">2</span>];</span><br><span class="line">ans[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">ans[<span class="number">1</span>] = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line"><span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line"><span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">Animal[] animals = &#123;a1, a2&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; animals.length; i++) &#123;undefined</span><br><span class="line">    animals[i].move(); /</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>调用的是父类方法不需要类型转换，直接使用父类引用调用即可</p></li><li><p>调用的是子类特有的方法，需要向下转型后，再调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        <span class="type">Bird</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bird</span>();</span><br><span class="line">        Animal[] anis = &#123;c, b&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; anis.length; i++)&#123;undefined</span><br><span class="line">            <span class="title function_">if</span><span class="params">(anis[i] <span class="keyword">instanceof</span> Cat)</span>&#123;undefined</span><br><span class="line">                <span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat)anis[i];</span><br><span class="line">                cat.catchMouse();</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(anis[i] <span class="keyword">instanceof</span> Bird)&#123;undefined</span><br><span class="line">                <span class="type">Bird</span> <span class="variable">bird</span> <span class="operator">=</span> (Bird)anis[i];</span><br><span class="line">                bird.sing();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;undefined</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal move...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;undefined</span><br><span class="line">        System.out.println(<span class="string">&quot;猫在走猫步！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">catchMouse</span><span class="params">()</span>&#123;undefined</span><br><span class="line">        System.out.println(<span class="string">&quot;猫抓老鼠！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bird</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">move</span><span class="params">()</span>&#123;undefined</span><br><span class="line">        System.out.println(<span class="string">&quot;Bird Fly!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sing</span><span class="params">()</span>&#123;undefined</span><br><span class="line">        System.out.println(<span class="string">&quot;鸟儿在歌唱！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="22-6-数组扩容-x2F-拷贝"><a href="#22-6-数组扩容-x2F-拷贝" class="headerlink" title="22.6 数组扩容&#x2F;拷贝"></a>22.6 数组扩容&#x2F;拷贝</h2><ul><li><p>数据扩容：先新建一个大容量的数组，然后将小容量数组中的数据拷贝过去</p></li><li><p>数组拷贝：System.arraycopy(五个参数);</p><ul><li>Object src：使用多态更通用，可以传数组</li><li>int srcPos：拷贝源，开始拷贝的位置</li><li>Objecct dest：拷贝的目标位置</li><li>int destPos：拷贝目标的起始下标</li><li>int length：拷贝长度</li></ul></li><li><p>注意事项：</p><ul><li>数组扩容效率低，所以尽可能少的使用数组扩容</li><li>数组创建时就有默认值，引用数据类型为null</li><li>引用数据类型拷贝的是对象的地址，而不是对象本身</li></ul></li><li><p>拷贝引用数据类型的内存图：</p><ul><li>objs、newObjs在栈内存中，存储的是两个数组的内存地址</li><li>objs数组中存储的是三个Object类对象的地址，拷贝到newObjs数组</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest08</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">int</span>[] src = &#123;<span class="number">1</span>, <span class="number">11</span>, <span class="number">22</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] dest = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">20</span>]; </span><br><span class="line"></span><br><span class="line">        System.arraycopy(src, <span class="number">0</span>, dest, <span class="number">0</span>, src.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; dest.length; i++) &#123;undefined</span><br><span class="line">            System.out.println(dest[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        String[] strs = &#123;<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world!&quot;</span>, <span class="string">&quot;study&quot;</span>, <span class="string">&quot;java&quot;</span>, <span class="string">&quot;oracle&quot;</span>, <span class="string">&quot;mysql&quot;</span>, <span class="string">&quot;jdbc&quot;</span>&#125;;</span><br><span class="line">        String[] newStrs = <span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">20</span>];</span><br><span class="line">        System.arraycopy(strs, <span class="number">0</span>, newStrs, <span class="number">0</span>, strs.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newStrs.length; i++) &#123;undefined</span><br><span class="line">            System.out.println(newStrs[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>); </span><br><span class="line">        Object[] objs = &#123;<span class="keyword">new</span> <span class="title class_">Object</span>(), <span class="keyword">new</span> <span class="title class_">Object</span>(), <span class="keyword">new</span> <span class="title class_">Object</span>()&#125;;</span><br><span class="line">        Object[] newObjs = <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">5</span>];</span><br><span class="line">        System.arraycopy(objs, <span class="number">0</span>, newObjs, <span class="number">0</span>, objs.length);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; newObjs.length; i++) &#123;undefined</span><br><span class="line">            System.out.println(newObjs[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            java.lang.Object@3f99bd52</span></span><br><span class="line"><span class="comment">            java.lang.Object@4f023edb</span></span><br><span class="line"><span class="comment">            java.lang.Object@3a71f4dd</span></span><br><span class="line"><span class="comment">            null</span></span><br><span class="line"><span class="comment">            null</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="22-7-二维数组"><a href="#22-7-二维数组" class="headerlink" title="22.7 二维数组"></a>22.7 二维数组</h2><ul><li><p>二维数组：其实是一位数组的嵌套，可看成特殊的一维数组，每个元素中存储的是一个一维数组</p></li><li><p>二维数组的初始化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>二维数组的length：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(a.length);  <span class="comment">// 7</span></span><br><span class="line">System.out.println(a[<span class="number">0</span>].length);  <span class="comment">// 3</span></span><br></pre></td></tr></table></figure></li><li><p>二维数组的元素访问：</p><ul><li>注意区分，二维数组元素的访问和二维数组中数组元素的访问</li><li>java.lang.ArrayIndexOutOfBoundsException，数组越界异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest10</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">int</span>[][] a = &#123;undefined</span><br><span class="line">                &#123;<span class="number">34</span>,<span class="number">4</span>,<span class="number">65</span>&#125;,</span><br><span class="line">                &#123;<span class="number">100</span>,<span class="number">200</span>,<span class="number">3900</span>,<span class="number">111</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span>[] a0 = a[<span class="number">0</span>];  <span class="comment">// 第一个一维数组</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">a0first</span> <span class="operator">=</span> a0[<span class="number">0</span>];  <span class="comment">// 第一个一维数组的第一个元素</span></span><br><span class="line">        System.out.println(a0first);  <span class="comment">// 34</span></span><br><span class="line">        System.out.println(a[<span class="number">0</span>][<span class="number">0</span>]); <span class="comment">// 34</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;第二个一维数组中第三个元素：&quot;</span> + a[<span class="number">1</span>][<span class="number">2</span>]);  <span class="comment">// 3900</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第3个一维数组中第1个元素：&quot;</span> + a[<span class="number">2</span>][<span class="number">0</span>]);  <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">        a[<span class="number">2</span>][<span class="number">0</span>] = <span class="number">11111</span>;</span><br><span class="line">        System.out.println(a[<span class="number">2</span>][<span class="number">0</span>]);  <span class="comment">// 11111</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// System.out.println(a[2][1]);  // java.lang.ArrayIndexOutOfBoundsException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二维数组的遍历：</p><ul><li>循环两次，内循环array和外循环arrayin</li><li>System.out.print(arrayin[j] + “ “); 不换行输出print</li><li>System.out.println(); 等价于输出换行符</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest11</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        String[][] array = &#123;undefined</span><br><span class="line">                &#123;<span class="string">&quot;java&quot;</span>, <span class="string">&quot;oracle&quot;</span>, <span class="string">&quot;c++&quot;</span>, <span class="string">&quot;python&quot;</span>, <span class="string">&quot;c#&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&quot;lucy&quot;</span>, <span class="string">&quot;jack&quot;</span>, <span class="string">&quot;rose&quot;</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++)&#123; </span><br><span class="line">            String[] arrayin = array[i];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; arrayin.length; j++)&#123;</span><br><span class="line">                System.out.print(arrayin[j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            java oracle c++ python c#</span></span><br><span class="line"><span class="comment">            张三 李四 王五</span></span><br><span class="line"><span class="comment">            lucy jack rose</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++)&#123; </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array[i].length; j++)&#123;undefined</span><br><span class="line">                System.out.print(array[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            java oracle c++ python c#</span></span><br><span class="line"><span class="comment">            张三 李四 王五</span></span><br><span class="line"><span class="comment">            lucy jack rose</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>错误写法：printArray({undefined{1,2,3,4},{4,5,6,76},{1,23,4}});</li><li>正确写法：printArray(new int[][]{undefined{1,2,3,4},{4,5,6,76},{1,23,4}});</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] array = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">4</span>];</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        <span class="type">int</span>[][] a = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">76</span>&#125;,&#123;<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line">        printArray(a);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;================================&quot;</span>);</span><br><span class="line">        <span class="comment">//printArray(&#123;&#123;1,2,3,4&#125;,&#123;4,5,6,76&#125;,&#123;1,23,4&#125;&#125;);</span></span><br><span class="line">        printArray(<span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;undefined&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">76</span>&#125;,&#123;<span class="number">1</span>,<span class="number">23</span>,<span class="number">4</span>&#125;&#125;);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1 2 3 4</span></span><br><span class="line"><span class="comment">            4 5 6 76</span></span><br><span class="line"><span class="comment">            1 23 4</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[][] array)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; array[i].length; j++) &#123;</span><br><span class="line">                System.out.print(array[i][j] + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="22-8-Arrays工具类"><a href="#22-8-Arrays工具类" class="headerlink" title="22.8 Arrays工具类"></a>22.8 Arrays工具类</h2><ul><li><p>数组的常见算法：</p><ul><li>排序算法：冒泡排序、选择排序</li><li>查找算法：二分查找</li></ul></li><li><p>Arrays：java.util.Arrays是一个工具类，此工具类中 方法都静态方法直接使用类名调用即可</p><ul><li>sort()：用于排序</li><li>binarySearch()：用于二分查找</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayTest12</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> arr[] = &#123;<span class="number">22</span>, <span class="number">16</span>, <span class="number">20</span>&#125;;</span><br><span class="line">        Arrays.sort(arr);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> Arrays.binarySearch(arr, <span class="number">16</span>);</span><br><span class="line">        System.out.println(index == -<span class="number">1</span> ? <span class="string">&quot;该元素不存在&quot;</span> : <span class="string">&quot;该元素下标&quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>冒泡排序：</p><ul><li>每一次循环结束之后，都要找出当前最大的数据，放到参与比较的这堆数据的最右边</li><li>核心：依次拿着左边的数字和右边的数字比对，当左边 &gt; 右边的时候，交换位置</li><li>注意事项：不管是否需要交换位置，总之是要比较一次的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    3, 2, 7, 6, 8</span></span><br><span class="line"><span class="comment">    第1次循环：处理8，结束时为2, 3, 6, 7</span></span><br><span class="line"><span class="comment">    第2次循环：处理7，结束时为2, 3, 6</span></span><br><span class="line"><span class="comment">    第3次循环：处理6，结束时为2, 3</span></span><br><span class="line"><span class="comment">    第4次循环：2和3比较一次，但无需交换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BubbleSort</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">11</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> arr.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &gt; arr[j+<span class="number">1</span>])&#123;</span><br><span class="line">                    <span class="type">int</span> temp;</span><br><span class="line">                    temp = arr[j];</span><br><span class="line">                    arr[j] = arr[j+<span class="number">1</span>];</span><br><span class="line">                    arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">                    count2++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;交换位置的次数：&quot;</span> + count2); <span class="comment">// 交换位置的次数：13</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;undefined</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>选择排序：</p><ul><li>每一次从这堆“参与比较的数据当中”找出最小值，此最小值和“参与比较的这堆最前面的元素”交换位置</li><li>选择排序比冒泡排序的优点：每一次的交换位置都是有意义的</li><li>冒泡排序和选择排序：实际上比较的次数没变，交换位置的次数减少了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    第一轮：3 2 6 1 5</span></span><br><span class="line"><span class="comment">    假设：第一个3是最小的</span></span><br><span class="line"><span class="comment">    3和2比较，发现2更小，所以此时最小的是2</span></span><br><span class="line"><span class="comment">    2和6比较，2仍然是最小的</span></span><br><span class="line"><span class="comment">    2和1比对，发现1更小，所以此时最小的是1</span></span><br><span class="line"><span class="comment">    1和5比对，1仍然是最小的</span></span><br><span class="line"><span class="comment">    最后：拿着1和最左边的3交换位置</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    第二轮：2 6 3 5</span></span><br><span class="line"><span class="comment">    假设：第一个2是最小的</span></span><br><span class="line"><span class="comment">    ...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectSort</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">9</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">0</span>, <span class="number">11</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                count++;</span><br><span class="line">                <span class="keyword">if</span>(arr[j] &lt; arr[min])&#123;<span class="type">undefined</span></span><br><span class="line">                    <span class="variable">min</span> <span class="operator">=</span> j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(min != i) &#123;</span><br><span class="line">                <span class="type">int</span> temp;</span><br><span class="line">                temp = arr[min];</span><br><span class="line">                arr[min] = arr[i];</span><br><span class="line">                arr[i] = temp;</span><br><span class="line">                count2++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;比较次数&quot;</span> + count);  <span class="comment">// 21</span></span><br><span class="line">        System.out.println(<span class="string">&quot;交换次数：&quot;</span> + count2);  <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>二分法查找：</p><ul><li>二分法查找算法是基于排序的基础之上</li><li>终止条件：一直折半，直到中间的那个元素恰好是被查找的元素</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组工具类：自定义的ArrayUtil</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">10(下标0) 11 12 13 14 15 16 17 18 19 20(下标10)</span></span><br><span class="line"><span class="comment">(0 + 10) / 2 --&gt; arr[5] --&gt; 15 &lt; 18</span></span><br><span class="line"><span class="comment">开始下标5 + 1 --&gt; (6 + 10) / 2 --&gt; arr[8] --&gt; 18</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">100</span>,<span class="number">200</span>,<span class="number">230</span>,<span class="number">235</span>,<span class="number">600</span>,<span class="number">1000</span>,<span class="number">2000</span>,<span class="number">9999</span>&#125;;</span><br><span class="line">                                            </span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> binarySearch(arr, <span class="number">230</span>);</span><br><span class="line">        System.out.println(index == -<span class="number">1</span> ? <span class="string">&quot;该元素不存在&quot;</span> : <span class="string">&quot;该元素下标&quot;</span> + index); <span class="comment">// 该元素下标2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从数组中查找目标元素的下标</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 被查找的数组（这个必须是已经排序的）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dest 目标元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> -1表示该元素不存在，其它表示返回该元素的下标</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> dest)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">begin</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(begin &lt;= end) &#123;undefined</span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (begin + end) / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (arr[mid] == dest) &#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[mid] &lt; dest) &#123;</span><br><span class="line">                begin = mid + <span class="number">1</span>; </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                end = mid - <span class="number">1</span>; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="23-字符串（String）"><a href="#23-字符串（String）" class="headerlink" title="23 字符串（String）"></a>23 字符串（String）</h1><h2 id="23-1-字符串概述"><a href="#23-1-字符串概述" class="headerlink" title="23.1 字符串概述"></a>23.1 字符串概述</h2><ul><li><p>字符串：java.lang.String，JDK中内置的一种类，String是一种引用数据类型</p></li><li><p>字符串的注意事项</p><ul><li>String类在java.lang包下，所以使用的时候不需要导包</li><li>Java程序中所有的双引号字符串，都是String类的对象</li><li>双引号括起来的字符串是不可变的，它们的值在创建后不能被更改，直接存储在方法区的“字符串常量池”当中的。原因是字符串在实际开发中很频繁，为了提高开发效率</li><li>垃圾回收器是不会释放常量的，所以方法区中字符串不会被回收</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;abcdef&quot;</span> + <span class="string">&quot;xy&quot;</span>;</span><br><span class="line"><span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;xy&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p>字符串的内存图：</p><ul><li>栈：三个String类型的引用变量s1、s2和s3<ul><li>对于s1和s2：指向方法区中字符串，其中s1指向“abcdef”，s2指向“abcdefxy”</li><li>对于s3：指向堆中new出来的String对象，String对象中存储的是“xy”的地址</li></ul></li><li>方法区：只有三个字符串“abcdef”、“xy”、“abcdefxy”，</li><li>两种创建字符串的内存图原理不同</li></ul></li></ul><h2 id="23-2-比较字符串"><a href="#23-2-比较字符串" class="headerlink" title="23.2 比较字符串"></a>23.2 比较字符串</h2><ul><li><p>方法一：String s1 &#x3D; “abc”; 创建字符串</p><ul><li>“abc”存储在方法区中，不会新建“abc”，s1和s2中存储的是同一个“abc”地址</li><li>结果为true，可以用&#x3D;&#x3D;比较</li></ul></li><li><p>方法二：String s3 &#x3D; new String(“xy”); 创建字符串</p><ul><li>“xy”存储在方法区，且只有一个，但是s3和s4存储的是两个new出来的对象地址</li><li>结果为false，只能用equals比较，String类已经重写equals方法</li></ul></li><li><p>“&#x3D;&#x3D;”不保险，应该使用String类的equals方法进行字符串比较字符串对象</p></li><li><p>“testString”.equals(k)</p><ul><li>字符串对象后面可以加“.” 是对象就能调用方法，且建议使用</li><li>等同于k.equals(“testString”)，但若k&#x3D;null，会出现空指针异常</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest02</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="comment">// &quot;hello&quot;是存储在方法区的字符串常量池当中</span></span><br><span class="line">        <span class="comment">// 所以这个&quot;hello&quot;不会新建。（因为这个对象已经存在了！）</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">        <span class="comment">// 分析结果是true还是false？</span></span><br><span class="line">        <span class="comment">// == 双等号比较的是不是变量中保存的内存地址？是的。</span></span><br><span class="line">        System.out.println(s1 == s2); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">y</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;xyz&quot;</span>);</span><br><span class="line">        <span class="comment">// 分析结果是true还是false？</span></span><br><span class="line">        <span class="comment">// == 双等号比较的是不是变量中保存的内存地址？是的。</span></span><br><span class="line">        System.out.println(x == y); <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过这个案例的学习，我们知道了，字符串对象之间的比较不能使用“==”</span></span><br><span class="line">        <span class="comment">// &quot;==&quot;不保险。应该调用String类的equals方法。</span></span><br><span class="line">        <span class="comment">// String类已经重写了equals方法，以下的equals方法调用的是String重写之后的equals方法。</span></span><br><span class="line">        System.out.println(x.equals(y)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">k</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;testString&quot;</span>);</span><br><span class="line">        <span class="comment">//String k = null;</span></span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        System.out.println(<span class="string">&quot;testString&quot;</span>.equals(k)); <span class="comment">// 建议使用这种方式，因为这个可以避免空指针异常。 // true</span></span><br><span class="line">        System.out.println(k.equals(<span class="string">&quot;testString&quot;</span>)); <span class="comment">// 存在空指针异常的风险。不建议这样写。 // true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>面试题：创建对象数量分析，一共三个对象</p><ul><li>方法区字符串常量池中有1个：”hello”</li><li>堆内存当中有2个String对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest03</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="23-4-构造方法"><a href="#23-4-构造方法" class="headerlink" title="23.4 构造方法"></a>23.4 构造方法</h2><ul><li><p>第一个：String s &#x3D; “”; （最常用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span>  <span class="string">&quot;hello world!&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String类已经重写了toString()方法</span></span><br><span class="line">        System.out.println(s1);  <span class="comment">// hello world!</span></span><br><span class="line">        System.out.println(s1.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第二个：String s &#x3D; new String(“”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s6</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;helloworld!&quot;</span>);</span><br><span class="line">        System.out.println(s6); <span class="comment">// helloworld!</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第三个：String s &#x3D; new String(byte数组);</p></li><li><p>第四个：String s &#x3D; new String(byte数组,起始下标,长度)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = &#123;<span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>&#125;;  <span class="comment">// 97是a，98是b，99是c</span></span><br><span class="line">    </span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes);</span><br><span class="line">        System.out.println(s2);  <span class="comment">//abc</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">s3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(bytes, <span class="number">1</span>, <span class="number">2</span>);  <span class="comment">// 将byte数组中的一部分转换成字符串</span></span><br><span class="line">        System.out.println(s3); <span class="comment">// bc</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>第五个：String s &#x3D; new String(char数组);</p></li><li><p>第六个：String s &#x3D; new String(char数组,起始下标,长度);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[] chars = &#123;<span class="string">&#x27;我&#x27;</span>,<span class="string">&#x27;是&#x27;</span>,<span class="string">&#x27;中&#x27;</span>,<span class="string">&#x27;国&#x27;</span>,<span class="string">&#x27;人&#x27;</span>&#125;;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars);</span><br><span class="line">        System.out.println(s4);  <span class="comment">// 我是中国人</span></span><br><span class="line">    </span><br><span class="line">        <span class="type">String</span> <span class="variable">s5</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(chars, <span class="number">2</span>, <span class="number">3</span>);  </span><br><span class="line">        System.out.println(s5); <span class="comment">// 中国人</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="23-5-常用方法"><a href="#23-5-常用方法" class="headerlink" title="23.5 常用方法"></a>23.5 常用方法</h2><ul><li><p>chatAt：返回char指定索引处的值，指数范围为0至length() - 1</p></li><li><p>compareTo：按字典顺序比较两个字符串，返回值为int（字符串比较不能直接使用 “&gt; &lt;”）</p></li><li><p>contains：判断前面的字符串中是否包含后面的子字符串，返回true或false</p></li><li><p>endsWith：判断当前字符串是否以某个子字符串结尾</p></li><li><p>equals：字符串对象比较，当返回是true表示：该参数不是null，并且是String对象（不能使用“&#x3D;&#x3D;”）</p></li><li><p>equalsIgnoreCase：判断两个字符串是否相等，并且同时忽略大小写</p></li><li><p>getBytes：将字符串对象转换成字节数组</p></li><li><p>indexOf：判断某个子字符串在当前字符串中第一次出现处的索引&#x2F;下标</p></li><li><p>isEmpty：判断某个字符串是否为“空字符串”，不是字符串为空</p></li><li><p>length：判断数组长度是length属性，判断字符串长度是length()方法</p></li><li><p>lastIndexOf：判断某个子字符串在当前字符串中最后一次出现的索引&#x2F;下标</p></li><li><p>replace：替换，String的父接口是：CharSequence</p></li><li><p>split：拆分字符串，以指定内容…进行拆分</p></li><li><p>startsWith：判断某个字符串是否以某个子字符串开始</p></li><li><p>substring：截取字符串，参数为起始下标，或者起始位置（包括）和结束位置（不包括）</p></li><li><p>toCharArray：将字符串转换成char数组</p></li><li><p>toLowerCase：转换为小写；toUpperCase：转换为大写</p></li><li><p>trim：去除字符串前后空白，主要用于处理用户输入</p></li><li><p>valueOf：将“非字符串”转换成“字符串”，String类中唯一一个静态方法，不需要new对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringTest05</span> &#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1.char charAt(int index)</span></span><br><span class="line">        <span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&quot;中国人&quot;</span>.charAt(<span class="number">1</span>); </span><br><span class="line">        System.out.println(c); <span class="comment">// 国</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.int compareTo(String anotherString)</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>.compareTo(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        System.out.println(result);  <span class="comment">//0（等于0） 前后一致</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">result2</span> <span class="operator">=</span> <span class="string">&quot;abc&quot;</span>.compareTo(<span class="string">&quot;aba&quot;</span>);</span><br><span class="line">        System.out.println(result2); <span class="comment">// 2（大于0） 前大后小</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;xyz&quot;</span>.compareTo(<span class="string">&quot;yxz&quot;</span>)); <span class="comment">// -1（小于0） 能分胜负就不再比较</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.boolean contains(CharSequence s)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;HelloWorld.java&quot;</span>.contains(<span class="string">&quot;.java&quot;</span>));  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. boolean endsWith(String suffix)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;test.txt&quot;</span>.endsWith(<span class="string">&quot;.java&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5.boolean equals(Object anObject)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.equals(<span class="string">&quot;abc&quot;</span>));  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6.boolean equalsIgnoreCase(String anotherString)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ABc&quot;</span>.equalsIgnoreCase(<span class="string">&quot;abC&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 7.byte[] getBytes()</span></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="string">&quot;abcdef&quot;</span>.getBytes();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; bytes.length; i++)&#123;undefined</span><br><span class="line">            System.out.print(bytes[i] + <span class="string">&quot; &quot;</span>);  <span class="comment">// 97 98 99 100 101 102 </span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 8.int indexOf(String str)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;oraclejavac++.javac++&quot;</span>.indexOf(<span class="string">&quot;java&quot;</span>));  <span class="comment">// 6</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 9.boolean isEmpty()</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        System.out.println(s.isEmpty());  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 10.int length()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;abc&quot;</span>.length());  <span class="comment">// 3</span></span><br><span class="line">        System.out.println(<span class="string">&quot;&quot;</span>.length()); <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 11.int lastIndexOf(String str)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;oraclejavac++.javac++&quot;</span>.lastIndexOf(<span class="string">&quot;java&quot;</span>));  <span class="comment">//14</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 12. String replace(CharSequence target, CharSequence replacement)</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newString2</span> <span class="operator">=</span> <span class="string">&quot;password=123&amp;age=20&quot;</span>.replace(<span class="string">&quot;=&quot;</span>, <span class="string">&quot;:&quot;</span>);</span><br><span class="line">        System.out.println(newString2); <span class="comment">//password:123&amp;age:20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 13.String[] split(String regex)</span></span><br><span class="line">        String[] ymd = <span class="string">&quot;1980-10-11&quot;</span>.split(<span class="string">&quot;-&quot;</span>); </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; ymd.length; i++)&#123;undefined</span><br><span class="line">            System.out.println(ymd[i] + <span class="string">&quot;&quot;</span>);  <span class="comment">// 1980 10 11</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 14.boolean startsWith(String prefix)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;http://www.&quot;</span>.startsWith(<span class="string">&quot;http&quot;</span>));  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 15.String substring(int beginIndex) </span></span><br><span class="line">        System.out.println(<span class="string">&quot;http://www.&quot;</span>.substring(<span class="number">7</span>));  <span class="comment">//www.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 16.String substring(int beginIndex, int endIndex)</span></span><br><span class="line">        System.out.println(<span class="string">&quot;http://www.baidu.com&quot;</span>.substring(<span class="number">7</span>, <span class="number">10</span>));  <span class="comment">//www</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 17.char[] toCharArray()</span></span><br><span class="line">        <span class="type">char</span>[] chars = <span class="string">&quot;我是中国人&quot;</span>.toCharArray();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; chars.length; i++)&#123;undefined</span><br><span class="line">            System.out.print(chars[i] + <span class="string">&quot; &quot;</span>);  <span class="comment">// 我 是 中 国 人</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 18.String toLowerCase()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ABCDefKXyz&quot;</span>.toLowerCase()); <span class="comment">// abcdefkxyz</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 19.String toUpperCase();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;ABCDefKXyz&quot;</span>.toUpperCase()); <span class="comment">// ABCDEFKXYZ</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 20.String trim();</span></span><br><span class="line">        System.out.println(<span class="string">&quot;    hello   world    &quot;</span>.trim()); <span class="comment">// hello   world</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 21.String.valueOf静态的</span></span><br><span class="line">        <span class="comment">//String s1 = String.valueOf(true);</span></span><br><span class="line">        <span class="comment">//String s1 = String.valueOf(100);</span></span><br><span class="line">        <span class="comment">//String s1 = String.valueOf(3.14);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s1</span> <span class="operator">=</span> String.valueOf(<span class="keyword">new</span> <span class="title class_">Customer</span>());  <span class="comment">// valueOf方法调用了toString方法，若将Customer对象转换成字符串，也调用了Customer的toString方法</span></span><br><span class="line">        <span class="comment">//System.out.println(s1); // 若没有重写toString()方法，是对象的内存地址</span></span><br><span class="line">        System.out.println(s1); <span class="comment">// 若重写toString方法后，输出：我是一个VIP客户</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============================&quot;</span>);</span><br><span class="line">        <span class="comment">// 研究println()方法的源代码</span></span><br><span class="line">        System.out.println(<span class="number">100</span>);  <span class="comment">// 100</span></span><br><span class="line">        System.out.println(<span class="literal">true</span>);  <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">        <span class="comment">//　本质上System.out.println()输出时:：先转换成字符串再输出</span></span><br><span class="line">        System.out.println(obj);  <span class="comment">// toString没有重写：java.lang.Object@3a71f4dd</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Customer</span>());  <span class="comment">// toString重写：我是一个VIP客户</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;undefined</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;我是一个VIP客户&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="23-6-StringBuffer"><a href="#23-6-StringBuffer" class="headerlink" title="23.6 StringBuffer"></a>23.6 StringBuffer</h2><ul><li><p>字符串拼接：若字符串频繁拼接，会占用大量的方法区内存</p></li><li><p>如果以后需要进行大量字符串的拼接操作，建议使用JDK中自带的：</p><ul><li>java.lang.StringBuffer：构造一个其中不带字符的字符串缓冲区，并给定一个初始化容量</li><li>java.lang.StringBuilder：也是一个可变的字符串类，但是非线程安全</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest01</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">// 会给方法区字符串常量池放入上百个字符串</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">            s = s + i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>StringBuffer：</p><ul><li>实质是创建一个初始化容量为16个byte[] 数组</li><li>append()方法：拼接字符串，在拼接时统一调用，append是追加的意思</li><li>StringBuffer长度可变，因为如果byte数组满了，会自动扩容</li><li>但String的byte数组被final修饰，所以长度不可变</li></ul></li><li><p>StringBuffer的优化：</p><ul><li>在创建StringBuffer的时候尽可能给定一个初始化容量</li><li>尽量减少底层数组的扩容次数，预估计给一个合适的大容量</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringBufferTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line"></span><br><span class="line">        stringBuffer.append(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        stringBuffer.append(<span class="number">3.14</span>);</span><br><span class="line">        stringBuffer.append(<span class="literal">true</span>);</span><br><span class="line">        stringBuffer.append(<span class="number">100L</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(stringBuffer); <span class="comment">// a3.14true100，等同于System.out.println(stringBuffer.toString());</span></span><br><span class="line"></span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="number">100</span>); </span><br><span class="line">        sb.append(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        sb.append(<span class="string">&quot;world&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(sb); <span class="comment">// helloworld</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>StringBuilder：类似于StringBuffer</p><ul><li><p>StringBuffer中有synchronized关键字修饰，表示是线程安全</p></li><li><p>StringBuilder中没有，表示是非线程安全的</p></li></ul></li></ul><h1 id="24-包装类"><a href="#24-包装类" class="headerlink" title="24 包装类"></a>24 包装类</h1><h2 id="24-1-包装类概述"><a href="#24-1-包装类概述" class="headerlink" title="24.1 包装类概述"></a>24.1 包装类概述</h2><ul><li><p>包装类：属于引用数据类型，Java中为8种基本数据类型又对应准备了8种包装类型</p></li><li><p>包装类的作用：</p><ul><li>很多类和方法中的参数都需要使用对象，但是基本数据类型不是面向对象的</li><li>包装类就是把基本数据类型包装成对象，可以添加属性和方法</li></ul><table><thead><tr><th>基本数据类型</th><th>包装类型</th></tr></thead><tbody><tr><td>byte</td><td>java.lang.Byte（父类Number）</td></tr><tr><td>short</td><td>java.lang.Short（父类Number）</td></tr><tr><td>int</td><td>java.lang.Integer（父类Number）</td></tr><tr><td>long</td><td>java.lang.Long（父类Number）</td></tr><tr><td>float</td><td>java.lang.Float（父类Number）</td></tr><tr><td>double</td><td>java.lang.Double（父类Number）</td></tr><tr><td>boolean</td><td>java.lang.Boolean（父类Object）</td></tr><tr><td>char</td><td>java.lang.Character（父类Object）</td></tr></tbody></table></li></ul><h2 id="24-2-Number类"><a href="#24-2-Number类" class="headerlink" title="24.2 Number类"></a>24.2 Number类</h2><ul><li><p>Number类：是一个抽象类，无法实例化对象</p></li><li><p>装箱和拆箱：基本数据类型向引用数据类型的转换</p><ul><li>装箱：数字包装类的构造方法，实现了基本数据类型转换为引用数据类型</li><li>拆箱：如下Number类的方法，这些方法所有的数字包装类的子类</li></ul></li><li><p>Integer类的构造方法：Integer(int)和Integer(String)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 基本数据类型 --&gt; 引用数据类型（装箱）</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将引用数据类型 --&gt; 基本数据类型（拆箱）</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            byte byteValue()：以 byte 形式返回指定的数值</span></span><br><span class="line"><span class="comment">            abstract  double doubleValue()：以 double 形式返回指定的数值</span></span><br><span class="line"><span class="comment">            abstract  float floatValue()：以 float 形式返回指定的数值</span></span><br><span class="line"><span class="comment">            abstract  int intValue()：以 int 形式返回指定的数值</span></span><br><span class="line"><span class="comment">            abstract  long longValue()：以 long 形式返回指定的数值</span></span><br><span class="line"><span class="comment">            short shortValue()：以 short 形式返回指定的数值</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="type">float</span> <span class="variable">f</span> <span class="operator">=</span> i.floatValue();</span><br><span class="line">        System.out.println(f); <span class="comment">//123.0</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">retValue</span> <span class="operator">=</span> i.intValue();</span><br><span class="line">        System.out.println(retValue); <span class="comment">//123</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取最大值和最小值：通过访问包装类的常量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;int的最大值：&quot;</span> + Integer.MAX_VALUE); <span class="comment">// int的最大值：2147483647</span></span><br><span class="line">        System.out.println(<span class="string">&quot;int的最小值：&quot;</span> + Integer.MIN_VALUE); <span class="comment">// int的最小值：-2147483648</span></span><br><span class="line">        System.out.println(<span class="string">&quot;byte的最大值：&quot;</span> + Byte.MAX_VALUE); <span class="comment">// byte的最大值：127</span></span><br><span class="line">        System.out.println(<span class="string">&quot;byte的最小值：&quot;</span> + Byte.MIN_VALUE); <span class="comment">// byte的最小值：-128</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>自动装箱和自动拆箱：在java5之后引入的一种新特性</p><ul><li>自动装箱：基本数据类型自动转换成包装类，就不需要包装类的构造方法了</li><li>自动拆箱：包装类自动转换成基本数据类型，就不需要Number类中的方法了</li></ul></li><li><p>System.out.println(z + 1); 不报错，是因为z原本是包装类，存储的是一个对象的内存地址。但这里会进行自动拆箱，将z转换成基本数据类型</p></li><li><p>&#x3D;&#x3D; 这个运算符不会触发自动拆箱机制（只有+ - * &#x2F;等运算的时候才会），&#x3D;&#x3D; 比较的是对象的内存地址，a和b两个引用中保存的对象内存地址不同</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest05</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 基本数据类型 --(自动转换)--&gt; 包装类型（自动装箱）</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">900</span>;</span><br><span class="line">        System.out.println(x);  <span class="comment">// 900</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 包装类型 --(自动转换)--&gt; 基本数据类型（自动拆箱）</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x;</span><br><span class="line">        System.out.println(y);  <span class="comment">// 900</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">1000</span>;  <span class="comment">// 等同于：Integer z = new Integer(1000);</span></span><br><span class="line">        System.out.println(z + <span class="number">1</span>);  <span class="comment">// 1001</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1000</span>; </span><br><span class="line">        <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1000</span>; </span><br><span class="line">        System.out.println(a == b);  <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>包装类的内存图：</p><ul><li>堆内存中存储的是一个Integer对象，存储的是数组900</li><li>栈内存中的是一个引用变量x，存储的是对象的地址，指向一个Integer对象</li></ul></li><li><p>Integer的注意事项（重要面试题）：</p><ul><li><p>原因：x变量和y变量中保存的对象的内存地址是一样的</p></li><li><p>Java中为了提高效率，将[-128到127]之间所有的包装对象提前创建好，放到了一个方法区的“整数型常量池”当中（Integer类加载的时候会初始化整数型常量池256个对象）</p></li><li><p>目的是只要用这个区间的数据不需要再new了，直接从整数型常量池当中取出来</p></li><li><p>所以引用变量x和y指向的是方法区中的同一个对象，而a和b指向的是堆内存中不同的两个对象</p></li><li><p>&#x3D;&#x3D; 永远判断的都是两个对象的内存地址是否相同</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest06</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        System.out.println(a == b);  <span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">        System.out.println(x == y);  <span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>缓存机制：cache池就是缓存机制</p><ul><li>优点是效率高，缺点是耗费内存</li><li>是大型项目中重要的优化手段</li><li>eg：整数型常量池、字符串常量池</li></ul></li></ul><h2 id="24-3-Integer类"><a href="#24-3-Integer类" class="headerlink" title="24.3 Integer类"></a>24.3 Integer类</h2><ul><li><p>Integer类的常用方法：</p><ul><li>static int parseInt(String s)：字符串String转换为int</li><li>实际开发中，网页文本框中输入的是字符串“100”，需要转换为数字100</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest07</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="comment">// 手动装箱</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="number">1000</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Integer a = new Integer(&quot;中文&quot;);</span></span><br><span class="line"><span class="comment">            编译的时候没问题，运行时异常java.lang.NumberFormatException</span></span><br><span class="line"><span class="comment">            new Integer(&quot;123&quot;);中是字符串可以，但是必须输数字的字符串</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 手动拆箱</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x.intValue();</span><br><span class="line">        System.out.println(y);  <span class="comment">// 1000</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// static int parseInt(String s)</span></span><br><span class="line">        <span class="comment">// 静态的：将字符串String转换为int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">retValue</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;123&quot;</span>); </span><br><span class="line">        System.out.println(retValue + <span class="number">100</span>);  <span class="comment">// 223</span></span><br><span class="line">        <span class="comment">// int retValue = Integer.parseInt(&quot;中文&quot;);  // NumberFormatException</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">double</span> <span class="variable">retValue2</span> <span class="operator">=</span> Double.parseDouble(<span class="string">&quot;3.14&quot;</span>);</span><br><span class="line">        System.out.println(retValue2 + <span class="number">1</span>);  <span class="comment">// 4.140000000000001（精度问题）</span></span><br><span class="line"></span><br><span class="line">        <span class="type">float</span> <span class="variable">retValue3</span> <span class="operator">=</span> Float.parseFloat(<span class="string">&quot;1.0&quot;</span>);</span><br><span class="line">        System.out.println(retValue3 + <span class="number">1</span>);  <span class="comment">//2.0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// ----------------以下内容作为了解，不需要掌握---------------------</span></span><br><span class="line">        <span class="comment">// static String toBinaryString(int i)</span></span><br><span class="line">        <span class="comment">// 静态的：将十进制转换成二进制字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">binaryString</span> <span class="operator">=</span> Integer.toBinaryString(<span class="number">3</span>);</span><br><span class="line">        System.out.println(binaryString);  <span class="comment">//&quot;11&quot; 二进制字符串</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// static String toHexString(int i)</span></span><br><span class="line">        <span class="comment">// 静态的：将十进制转换成十六进制字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">hexString</span> <span class="operator">=</span> Integer.toHexString(<span class="number">16</span>);</span><br><span class="line">        System.out.println(hexString);  <span class="comment">// &quot;10&quot;</span></span><br><span class="line">                                            </span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Object</span>());  <span class="comment">//java.lang.Object@6e8cf4c6，其中@后面为Integer.toHexString(hashcode())把十进制的哈希码值，转换为十六进制</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//static String toOctalString(int i)</span></span><br><span class="line">        <span class="comment">// 静态的：将十进制转换成八进制字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">octalString</span> <span class="operator">=</span> Integer.toOctalString(<span class="number">8</span>);</span><br><span class="line">        System.out.println(octalString);  <span class="comment">// &quot;10&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//static Integer valueOf(int i)</span></span><br><span class="line">        <span class="comment">// 静态的：int--&gt;Integer</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> Integer.valueOf(<span class="number">100</span>);</span><br><span class="line">        System.out.println(i1);  <span class="comment">// 100</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// static Integer valueOf(String s)</span></span><br><span class="line">        <span class="comment">// 静态的：String--&gt;Integer</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        System.out.println(i2);  <span class="comment">// 100</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>经典异常</p><ul><li>空指针异常：NullPointerException</li><li>类型转换异常：ClassCastException</li><li>数组下标越界异常：ArrayIndexOutOfBoundsException</li><li>数字格式化异常：NumberFormatException</li></ul></li><li><p>int、Integer和String转换：</p><ul><li>int转换为Integer：自动装箱，或Integer.valueOf()方法</li><li>Integer为转换int：自动拆箱，或intValue()方法</li><li>int转换为String：数字加双引号“”，或String.valueOf方法</li><li>String转换为int：Integer.parseInt()方法</li><li>String转换为Integer：Integer.valueOf()方法</li><li>Integer转换为String：String.valueOf(Integer对象)方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntegerTest08</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 自动装箱：int --&gt; Integer</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 自动拆箱：Integer --&gt; int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> x;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// String --&gt; int</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i1</span> <span class="operator">=</span> Integer.parseInt(<span class="string">&quot;100&quot;</span>);  <span class="comment">// i1是100数字</span></span><br><span class="line">        System.out.println(i1 + <span class="number">1</span>);  <span class="comment">// 101</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// int --&gt; String</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> i1 + <span class="string">&quot;&quot;</span>;  <span class="comment">// &quot;100&quot;字符串</span></span><br><span class="line">        System.out.println(s2 + <span class="number">1</span>);  <span class="comment">// 1001</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// String --&gt; Integer</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">k</span> <span class="operator">=</span> Integer.valueOf(<span class="string">&quot;123&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Integer --&gt; String</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">e</span> <span class="operator">=</span> String.valueOf(k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="25-日期类和数字类"><a href="#25-日期类和数字类" class="headerlink" title="25 日期类和数字类"></a>25 日期类和数字类</h1><h2 id="25-1-Date类"><a href="#25-1-Date类" class="headerlink" title="25.1 Date类"></a>25.1 Date类</h2><ul><li><p>Date类：</p><ul><li>需要导包 java.util.Date</li><li>构造方法：调用无参构造方法，可以获取系统当前时间，精确到毫秒</li><li>输出时调用了toString方法，toString方法已经重写了</li><li>按照指定的格式进行转换，用java.text包的SimpleDateFormat类</li></ul></li><li><p>SimpleDateFormat类：指定一个日期格式化</p><ul><li>yyyy 年(年是4位)、MM 月（月是2位）、dd 日</li><li>HH 时、mm 分、ss 秒、SSS 毫秒（毫秒3位，最高999；1000毫秒代表1秒）</li><li>注意：除了y M d H m s S等字符不能随便写之外，剩下的符号格式可随意组织</li></ul></li><li><p>format()方法：Date –&gt; String</p><ul><li>为SimpleDateFormat类的方法，按照指定格式化日期</li><li>参数为日期类型Date，返回一个字符串String</li><li>格式为：String 字符串对象引用 &#x3D; SimpleDateFormat对象引用.format(日期对象引用)</li></ul></li><li><p>parse()方法：String –&gt; Date</p><ul><li>为SimpleDateFormat类的方，将字符串转换为日期类型</li><li>参数为字符串String，返回一个日期类型Date</li><li>格式为：Date 日期对象引用 &#x3D; SimpleDateFormat对象引用.format(字符串对象引用)</li><li>注意事项：格式和日期字符串必须相同，否则出现异常：java.text.ParseException</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTest01</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">nowTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">                                                             </span><br><span class="line">        System.out.println(nowTime);  <span class="comment">//Thu Mar 05 10:51:06 CST 2020，为默认toString重写后的格式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Date --&gt; String</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">        <span class="comment">//SimpleDateFormat sdf = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;);</span></span><br><span class="line">        <span class="comment">//SimpleDateFormat sdf = new SimpleDateFormat(&quot;yy/MM/dd HH:mm:ss&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">nowTimeStr</span> <span class="operator">=</span> sdf.format(nowTime);</span><br><span class="line">        System.out.println(nowTimeStr); <span class="comment">// (变化)2022-07-19 17:21:00 947</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// String --&gt; Date</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">time</span> <span class="operator">=</span> <span class="string">&quot;2008-08-08 08:08:08 888&quot;</span>;</span><br><span class="line">        <span class="comment">//SimpleDateFormat sdf2 = new SimpleDateFormat(&quot;2008-08-08 08:08:08 888&quot;); </span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">dateTime</span> <span class="operator">=</span> sdf2.parse(time);</span><br><span class="line">        System.out.println(dateTime);  <span class="comment">// Fri Aug 08 08:08:08 GMT+08:00 2008</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Date()方法：</p><ul><li>参数是一个数字，表示毫秒，返回值为字符串</li><li>返回值差八个小时，原因为北京是东8区，默认为格林威治时间</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javase.date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTest03</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">Date</span> <span class="variable">time</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1</span>);  <span class="comment">// 1970-01-01 00:00:00 001</span></span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss SSS&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">strTime</span> <span class="operator">=</span> sdf.format(time);</span><br><span class="line">        System.out.println(strTime); <span class="comment">// 1970-01-01 08:00:00 001</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取昨天的此时的时间</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">time2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis() - <span class="number">1000</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">strTime2</span> <span class="operator">=</span> sdf.format(time2);</span><br><span class="line">        System.out.println(strTime2);  <span class="comment">// 2022-03-04 11:44:14 829</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="25-2-System类"><a href="#25-2-System类" class="headerlink" title="25.2 System类"></a>25.2 System类</h2><ul><li><p>currentTimeMillis()方法：</p><ul><li>获取自1970年1月1日 00:00:00 000到当前系统时间的总毫秒数，每过一秒增加1000</li><li>为System类的方法，可以用来统计一个方法耗费的事件</li><li>不需要传入参数，返回值为long类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateTest02</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">nowTimeMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(nowTimeMillis);  <span class="comment">//1583377912981</span></span><br><span class="line"></span><br><span class="line">        <span class="type">long</span> <span class="variable">begin</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        timedemo();</span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;耗费时长&quot;</span>+(end - begin)+<span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">timedome</span><span class="params">()</span>&#123;undefined</span><br><span class="line">        <span class="title function_">for</span><span class="params">(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000000</span>; i++)</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;i = &quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>System类：在java.lang包下，无需导包</p><ul><li>System.out：out是System类的静态变量</li><li>System.out.println() ：println()方法不是System类的，是PrintStream类的方法</li><li>System.gc()：建议启动垃圾回收器</li><li>System.currentTimeMillis()：获取自1970年1月1日到系统当前时间的总毫秒数</li><li>System.exit(0)：退出JVM</li></ul></li></ul><h1 id="26-数字类"><a href="#26-数字类" class="headerlink" title="26 数字类"></a>26 数字类</h1><h2 id="26-1-DecimalFormat类"><a href="#26-1-DecimalFormat类" class="headerlink" title="26.1 DecimalFormat类"></a>26.1 DecimalFormat类</h2><ul><li><p>DecimalFormat类：</p><ul><li>java.text.DecimalFormat，专门负责数字格式化</li><li>格式一：DecimalFormat df &#x3D; new DecimalFormat(“数字格式”);</li><li>格式二：DecimalFormat df2 &#x3D; new DecimalFormat(“###,###.0000”)，保留4个小数位，不够补上0</li></ul></li><li><p>format()方法：</p><ul><li>为DecimalFormat类的方法，按照指定格式化数字</li><li>参数为double类型数据，返回值为字符串String</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DecimalFormatTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">DecimalFormat</span> <span class="variable">df</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;###,###.##&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> df.format(<span class="number">1234.561232</span>);</span><br><span class="line">        System.out.println(s);  <span class="comment">// 1,234.56</span></span><br><span class="line"></span><br><span class="line">        <span class="type">DecimalFormat</span> <span class="variable">df2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DecimalFormat</span>(<span class="string">&quot;###,###.0000&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s2</span> <span class="operator">=</span> df2.format(<span class="number">1234.56</span>);</span><br><span class="line">        System.out.println(s2);  <span class="comment">// 1,234.5600</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="26-2-BigDecimal类"><a href="#26-2-BigDecimal类" class="headerlink" title="26.2 BigDecimal类"></a>26.2 BigDecimal类</h2><ul><li><p>BigDecimal类：</p><ul><li>不属于基本数据类型，属于java对象，即引用数据类型</li><li>专门用在财务软件当中，处理财务数据，属于大数据，精度极高</li><li>不能直接使用+相加，因为BigDecimal对象为引用数据类型</li></ul></li><li><p>add()方法：v1.add(v2)，表示v1 + v2求和</p></li><li><p>divide()方法：v2.divide(v1)，表示v2 &#x2F; v1相除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode.javase.number;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、BigDecimal 。</span></span><br><span class="line"><span class="comment">这是SUN提供的一个类。。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">2、注意：财务软件中double是不够的。咱们之前有一个学生去用友面试，经理就问了这样一个问题：</span></span><br><span class="line"><span class="comment">    你吗？用的哪一种类型？</span></span><br><span class="line"><span class="comment">        千万别说double，说java.math.BigDecimal</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BigDecimalTest01</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">v1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">100</span>);  <span class="comment">// 精度极高的100</span></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">v2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigDecimal</span>(<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">v3</span> <span class="operator">=</span> v1.add(v2); </span><br><span class="line">        System.out.println(v3); <span class="comment">//300</span></span><br><span class="line"></span><br><span class="line">        <span class="type">BigDecimal</span> <span class="variable">v4</span> <span class="operator">=</span> v2.divide(v1);</span><br><span class="line">        System.out.println(v4); <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="26-3-Random类"><a href="#26-3-Random类" class="headerlink" title="26.3 Random类"></a>26.3 Random类</h2><ul><li><p>Random类：</p><ul><li>在java.util包下，需要导包</li><li>nextInt()方法，随机产生一个int类型取值的随机数</li><li>nextInt(101)，产生[0~100]之间的随机数，不能产生101</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomTest01</span> &#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;undefined</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">                                            </span><br><span class="line">        <span class="type">int</span> <span class="variable">num1</span> <span class="operator">=</span> random.nextInt();</span><br><span class="line">        System.out.println(num1);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">num2</span> <span class="operator">=</span> random.nextInt(<span class="number">101</span>);</span><br><span class="line">        System.out.println(num2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>生成5个不重复的随机数[0-100]，重复的话重新生成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javase.random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 准备一个长度为5的一维数组，赋值默认值都为-1</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">5</span>];  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++)&#123;undefined</span><br><span class="line">            arr[i] = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环生成随机数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (index &lt; arr.length) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> random.nextInt(<span class="number">101</span>);</span><br><span class="line">            <span class="comment">// 判断arr数组中有没有这个num，如果没有这个num就放进去</span></span><br><span class="line">            <span class="keyword">if</span> (!contains(arr, num)) &#123;</span><br><span class="line">                arr[index++] = num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历以上的数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断数组中是否包含某个元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arr 数组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true表示包含，false表示不包含。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> key)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        bug：二分查找，排序后会改变顺序，影响main函数的indext</span></span><br><span class="line"><span class="comment">        Arrays.sort(arr);</span></span><br><span class="line"><span class="comment">        return Arrays.binarySearch(arr, key) &gt;= 0;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[i] == key) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="27-枚举类"><a href="#27-枚举类" class="headerlink" title="27 枚举类"></a>27 枚举类</h1><h2 id="27-1-enum类"><a href="#27-1-enum类" class="headerlink" title="27.1 enum类"></a>27.1 enum类</h2><ul><li><p>枚举：是Java 5中新增特性的一部分，它是一种引用数据类型</p><ul><li>枚举其实就是多例，一个类有多个有限个数的实例，每一个值可以看做常量</li><li>既是一种类(class)类型，却又多了些特殊的约束，造就了枚举类的简洁性、安全性以及便捷性</li></ul></li><li><p>枚举的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> 枚举类型名 &#123;</span><br><span class="line">            枚举值<span class="number">1</span>,枚举值<span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>结果只有两种情况的，建议使用布尔类型</li><li>结果超过两种并且还是可以一枚一枚列举出来的，建议使用枚举类型</li><li>eg：颜色、四季、星期等</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Result</span> <span class="variable">r</span> <span class="operator">=</span> divide(<span class="number">10</span>, <span class="number">2</span>);</span><br><span class="line">        System.out.println(r == Result.SUCCESS ? <span class="string">&quot;计算成功&quot;</span> : <span class="string">&quot;计算失败&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算两个int类型数据的商</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a int数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b int数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Result.SUCCESS表示成功，Result.FAIL表示失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Result <span class="title function_">divide</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>&#123;undefined</span><br><span class="line">        <span class="keyword">try</span> &#123;undefined</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> a / b;</span><br><span class="line">            <span class="keyword">return</span> Result.SUCCESS;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;undefined</span><br><span class="line">            <span class="keyword">return</span> Result.FAIL;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    SUCCESS, FAIL</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE · 面向对象篇②</title>
      <link href="/2022/04/02/JAVA/1.Java/JavaSE/JavaSE%20%C2%B7%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87%E2%91%A1/"/>
      <url>/2022/04/02/JAVA/1.Java/JavaSE/JavaSE%20%C2%B7%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%AF%87%E2%91%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="11-面向对象基础"><a href="#11-面向对象基础" class="headerlink" title="11 面向对象基础"></a>11 面向对象基础</h1><h2 id="11-1-面向过程和面向对象"><a href="#11-1-面向过程和面向对象" class="headerlink" title="11.1 面向过程和面向对象"></a>11.1 面向过程和面向对象</h2><ul><li>面向过程关注：实现步骤及整个过程</li><li>面向对象关注：对象A，对象B…以及对象之间的关系<ul><li>OOA：面向对象分析（Object-Oriented Analysis）</li><li>OOD：面向对象设计（Object-Oriented Design）</li><li>OOP：面向对象编程（Object-Oriented Programming）</li></ul></li><li>面向对象的三大特征：每个面向对象的语言都具有这三大特征。eg：Python、Java<ul><li>封装（Encapsulation）：保护内部的操作不被破坏</li><li>继承（Inheritance）：在原本的基础之上继续进行扩充</li><li>多态（Polymorphism）：在一个指定的范围之内进行概念的转换</li></ul></li></ul><h2 id="11-2-类和对象"><a href="#11-2-类和对象" class="headerlink" title="11.2 类和对象"></a>11.2 类和对象</h2><ul><li><p>类：是抽象的概念集合，是JAVA程序的基本组成单位，表示的是一个共性的产物，类之中定义的是属性和行为</p><ul><li><p>类的属性（状态，多见于名词）：成员变量（类中方法外的变量）</p></li><li><p>类的行为（动作，多见于动作）：成员方法（去掉static关键字的方法）</p></li><li><p>类的定义：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[修饰符列表（<span class="keyword">public</span>）] class 类名（学生）&#123;</span><br><span class="line"><span class="comment">// 类的属性：成员变量</span></span><br><span class="line">变量<span class="number">1</span>的数据类型 变量<span class="number">1</span>;（姓名）</span><br><span class="line">变量<span class="number">2</span>的数据类型 变量<span class="number">2</span>;（身高）</span><br><span class="line">...</span><br><span class="line"><span class="comment">// 类的行为：成员方法</span></span><br><span class="line">方法<span class="number">1</span>;（学习）</span><br><span class="line">方法<span class="number">2</span>;（打篮球）</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类 = 属性 + 方法</span></span><br><span class="line"><span class="comment">// 定义一个学生类：Student </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 类的属性：成员变量</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">boolean</span> gender;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 类的行为：成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;好好学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHomeWork</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;认真写作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>对象：是实际存在的个体，又称为实例，每个对象拥有自己独立的属性，依靠属性来区分不同对象</p><ul><li><p>对象的属性： 对象具有的各种特征，每个对象的每个属性都拥有特定的值</p></li><li><p>对象的行为： 对象能够执行的操作</p></li><li><p>对象的创建和使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象的创建：</span></span><br><span class="line">类型（类名） 变量名 = <span class="keyword">new</span> 类名();</span><br><span class="line"><span class="type">student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">student</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 对象的使用：</span></span><br><span class="line">使用成员变量：对象名.变量名; </span><br><span class="line">使用成员方法：对象名.方法名();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个学生测试类：StudentDemo</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 对象的创建：</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  </span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(); </span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对象的使用：</span></span><br><span class="line">        s1.name = <span class="string">&quot;MJ&quot;</span>;   </span><br><span class="line">s1.age = <span class="number">18</span>;</span><br><span class="line">        </span><br><span class="line">        s1.study();   </span><br><span class="line">s1.doHomeWork();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>类和对象的关系：</p><ul><li>类是对象的抽象，对象是通过类创建出的个体</li><li>通过类创建对象的过程，称为“创建”，又称为“实例化”</li><li>通过对象找共同特征的类的过程：称为“抽象”</li></ul></li><li><p>类和对象的注意事项：</p><ul><li>Java中所有的类都属于“引用数据类型”（数据类型的一种）</li><li>成员变量可以不赋值，有默认值，但局部变量必须赋值</li><li>必须创建对象new才能访问变量，不能直接通过类名来访问</li></ul></li></ul><h2 id="11-3-变量和引用"><a href="#11-3-变量和引用" class="headerlink" title="11.3 变量和引用"></a>11.3 变量和引用</h2><ul><li><p>关于：Student s1 &#x3D; new Student()</p><ul><li>在main方法中，所以s1是局部变量，在栈内存的main方法栈帧中</li><li>new出的Student类型的对象，在堆内存中存储，开辟了一块存储空间地址</li><li>此堆内存中对象的内存地址，赋值给局部变量s1，若main方法结束，此内存空间就会释放</li><li>像这种s1变量，保存了对象内存地址的变量，有一个特殊的名字“引用”</li><li>程序员没有权利直接操作堆内存，只能通过这种“引用”访问</li></ul></li><li><p>String是一种引用数据类型，自己创建的类也是一种引用数据类型，默认值均为null</p></li><li><p>（代码内存图详见：8.4）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;  <span class="comment">// 1.</span></span><br><span class="line">    <span class="comment">// 成员变量：不用赋值也有默认值</span></span><br><span class="line">    <span class="type">int</span> age;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="type">boolean</span> gender;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123; </span><br><span class="line">        System.out.println(<span class="string">&quot;好好学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doHomeWork</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;认真写作业&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;  <span class="comment">//1.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  <span class="comment">// 2.</span></span><br><span class="line">        <span class="comment">// 创建对象：s1和s2不是创建的对象，只是“引用”</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  <span class="comment">// 3.4.</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;  <span class="comment">// 5.</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用对象：可以通过赋值更改内存中实例变量的值</span></span><br><span class="line">        s1.name = <span class="string">&quot;MJ&quot;</span>;  <span class="comment">//6.</span></span><br><span class="line">s1.age = <span class="number">18</span>; </span><br><span class="line">        </span><br><span class="line">        s1.study();   </span><br><span class="line">s1.doHomeWork();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  <span class="comment">// 7.8.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>成员变量（类变量、实例变量）和局部变量的区别：</p><table><thead><tr><th>区别</th><th>成员变量</th><th>局部变量</th></tr></thead><tbody><tr><td>类中位置</td><td>类中方法外</td><td>类中方法内</td></tr><tr><td>内存位置</td><td>堆内存（的对象内部中）</td><td>栈内存（的方法栈帧中）</td></tr><tr><td>生命周期</td><td>随着对象的存在或消失</td><td>随着方法调用存在或消失</td></tr><tr><td>初始值</td><td>有默认的初值</td><td>无默认值，必须先定义在赋值才能使用</td></tr></tbody></table></li><li><p>类变量和实例变量的区别：</p><table><thead><tr><th>区别</th><th>类变量（static 静态变量）</th><th>实例变量（非静态变量）</th></tr></thead><tbody><tr><td>存储位置</td><td>随着类的加载而存在于方法区中</td><td>随着对象的建立而存在于堆内存中</td></tr><tr><td>生命周期</td><td>最长，随着类的存在或消失</td><td>随着对象的存在或消失（对象变量）</td></tr></tbody></table></li></ul><h2 id="11-4-内存图"><a href="#11-4-内存图" class="headerlink" title="11.4 内存图"></a>11.4 内存图</h2><ul><li><p>内存图上主要体现的是数据，是对于Java运行机制的一种理解</p></li><li><p>栈内存：</p><ul><li>2.调用StudentDemo类的main方法（main方法是入口，方法调用要压栈）</li><li>4.Student s1 &#x3D; new Student();  在栈内存的main方法中，创建引用数据类型s1，指向3.创建的Student类型对象（引用数据类型s1存储的是堆内存对象的内存地址，而基本数据类型存储的是数据）</li><li>5.int i &#x3D; 100;  在栈内存的main方法，创建局部变量i，存储的是赋值的数据100</li><li>8.Student s2 &#x3D; new Student();  main方法中，创建引用数据类型s2，指向7.创建的对象</li></ul></li><li><p>堆内存：</p><ul><li>3.new Student()  创建了一个Student类型的对象（每个成员变量都有内存空间和默认值）</li><li>6.s1.age &#x3D; 18;  …通过赋值更改了堆内存中对应成员变量的值</li><li>7.new Student()  再创建一个Student类型的对象，并分配存储空间</li></ul></li><li><p>方法区：</p><ul><li>1.类加载（StudentDemo.class，Student.class，String.class，System.class）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;  <span class="comment">// 1.</span></span><br><span class="line">    String city;  </span><br><span class="line">    String stress;</span><br><span class="line">    String zipcode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;  <span class="comment">// 1.</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String username;</span><br><span class="line">    Address addr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDemo</span> &#123;  <span class="comment">// 1.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;  <span class="comment">// 2.</span></span><br><span class="line">        <span class="type">Address</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Address</span>();  <span class="comment">// 3.4.</span></span><br><span class="line">        a.city = <span class="string">&quot;北京&quot;</span>;  <span class="comment">// 5.</span></span><br><span class="line">        a.street = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        a.zipcode = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();  <span class="comment">// 6.7.</span></span><br><span class="line">        <span class="comment">//System.out.println(u.addr);  // （Address是一种引用数据类型，addr此时为默认值null）</span></span><br><span class="line">        u.id = <span class="number">001</span>;</span><br><span class="line">        u.username = <span class="string">&quot;MJ&quot;</span>;</span><br><span class="line">        u.addr = a;</span><br><span class="line">        System.out.println(u.addr.city);  <span class="comment">// 8.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>栈内存：</p><ul><li>2.调用UserDemo中的main方法</li><li>4.Address a &#x3D; new Address();  创建局部变量a存储3.对象的内存地址，称为引用</li></ul></li><li><p>堆内存：</p><ul><li>3.new Address();  创建Address类型的对象，每个实例变量分配空间和赋默认值</li><li>5.a.city &#x3D; “北京”;  a.street &#x3D; “”;  …赋值更改对象的值</li><li>6.new User();  创建User类型的对象，每个实例变量分配空间和赋默认值（Address是一种引用数据类型，此时为默认值null）</li><li>7….u.addr &#x3D; a;  Address类型的引用数据类型addr，存储的是new Address();在堆内存的存储地址，也就等于a<ul><li>Address是一个类，new Address();  创建了一个此类的对象，a为此类的对象的引用</li><li>在User类中，Address也是一种引用数据类型，addr为此种类型的变量名</li><li>在main方法中，u.addr &#x3D; a;  说明把a中存储的对象地址，赋值给addr</li></ul></li><li>8.System.out.println(u.addr.city);  可以访问城市，等价于a.city因为u.addr已经赋值a</li></ul></li><li><p>方法区：</p><ul><li>1.类加载（UserDemo.class，User.class，Address.class……）</li></ul></li><li><p>注意事项：引用数据类型存储的都是对象</p><ul><li>User u——&gt;存储的是new User();的存储地址 &#x3D; u</li></ul></li><li><p>new User();中的Address addr——&gt;存储的是new Address();的存储地址 &#x3D; a</p><ul><li>u和a是User和Address引用数据类型的变量，可以通过引用点.的方式访问</li></ul></li><li><p>属性（成员变量.实例变量）是引用数据类型怎么访问：</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">  FIRST first;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 成员变量中的实例变量，必须先创建对象，通过引用来访问</span></span><br><span class="line">        <span class="type">THIRD</span> <span class="variable">t3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">THIRD</span>();</span><br><span class="line">        <span class="type">SECOND</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SECOND</span>();</span><br><span class="line">        <span class="type">FIRST</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FIRST</span>();</span><br><span class="line">        <span class="type">Test</span> <span class="variable">t0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若不赋值，会出现NullPointerException空指针异常</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            NullPointerException</span></span><br><span class="line"><span class="comment">            编译器没问题，因为编译器只检查语法</span></span><br><span class="line"><span class="comment">            但是运行的时候需要对象存在，就会出现空指针异常</span></span><br><span class="line"><span class="comment">            异常条件：空指针访问“实例（对象）”相关数据时</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        t0.first = f1;</span><br><span class="line">        f1.second = s2;</span><br><span class="line">        s2.third = t3;</span><br><span class="line"></span><br><span class="line">        System.out.println(t0.first.second.third.i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">FIRST</span> &#123;</span><br><span class="line">    SECOND second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">SECOND</span> &#123;</span><br><span class="line">    THIRD third;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">THIRD</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关于垃圾回收器GC：<ul><li>在Java中，垃圾回收器主要针对的是堆内存</li></ul></li><li>当一个Java对象没有“引用”指向它，会被垃圾回收器释放回收</li></ul><h2 id="11-5-参数的传递"><a href="#11-5-参数的传递" class="headerlink" title="11.5 参数的传递"></a>11.5 参数的传递</h2><ul><li><p>基本数据类型的参数：形参的改变，不影响实际参数的值（见9.4）</p></li><li><p>引用类型的参数：形参的改变，影响实际参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        p.age = <span class="number">18</span>;</span><br><span class="line">        add(p);  <span class="comment">// p是引用数据类型，存储的是地址</span></span><br><span class="line">        System.out.println(p.age);  <span class="comment">// 19</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Person p)</span> &#123;</span><br><span class="line">        p.age++;</span><br><span class="line">        System.out.println(p.age);  <span class="comment">// 19</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="11-6-构造方法"><a href="#11-6-构造方法" class="headerlink" title="11.6 构造方法"></a>11.6 构造方法</h2><ul><li><p>构造方法：是一种特殊的方法，通过构造方法可以完成对象的创建，以及实例变量的初始化</p></li><li><p>构造方法的作用：</p><ul><li>创建对象，同时给对象的属性赋值</li><li>（成员变量中的实例变量不能手动赋值，系统会在构造方法中默认赋值，或者在有参构造方法中进行赋值。这就解释了为什么必须通过构造方法给类创建对象之后，才能进行赋值修改）</li><li>new Student();  实际使用的是默认的无参构造方法，创建对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造方法的结构</span></span><br><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">[修饰符列表] 构造方法名(形式参数列表)&#123;</span><br><span class="line">        构造方法体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span>&#123;&#125;  <span class="comment">// 无参构造方法</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span>&#123;  <span class="comment">// 有参构造方法</span></span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法的调用</span></span><br><span class="line"><span class="keyword">new</span> 构造方法名(实际参数列表);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对比普通方法的语法结构：没有返回值类型</span></span><br><span class="line"><span class="keyword">public</span> class 类名&#123;</span><br><span class="line">[修饰符列表] 返回值类型 方法名(形式参数列表)&#123;</span><br><span class="line">        方法体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>构造方法的注意事项：</p><ul><li>修饰符列表目前统一写public，不同与方法public static</li><li>构造方法名和类名必须一致</li><li>构造方法不需要返回值类型，也不能写void</li></ul></li><li><p>构造方法的创建：</p><ul><li><p>如果没有定义构造方法，系统将给出一个默认的无参数构造方法（缺省构造器）</p></li><li><p>如果定义了构造方法，系统将不再提供默认的构造方法（因此都手写无参+有参构造方法）</p></li><li><p>无参和有参构造方法名都与类名相同，默认支持方法重载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();  <span class="comment">// 无参构造方法的调用</span></span><br><span class="line"><span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;MJ&quot;</span>, <span class="number">18</span>);  <span class="comment">//有参构造方法的调用</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="12-封装（Encapsulation）"><a href="#12-封装（Encapsulation）" class="headerlink" title="12 封装（Encapsulation）"></a>12 封装（Encapsulation）</h1><h2 id="12-1-封装概述"><a href="#12-1-封装概述" class="headerlink" title="12.1 封装概述"></a>12.1 封装概述</h2><ul><li><p>面向对象的三大特征：封装、继承、多态（递进）</p></li><li><p>封装：实现面向对象程序设计的第一步</p><ul><li>将数据或函数等集合在一个个单元中（称为类）</li><li>被封装的对象通常被称为抽象数据类型</li></ul></li><li><p>封装的作用：</p><ul><li>保证内部结构的安全，防止类的属性被随意的修改和访问</li><li>隐藏实现的细节，使用者只需要作用，不需要知道过程</li><li>有效减少耦合（关联程度），并提高了代码的复用性和可维护性</li></ul></li><li><p>封装的方法：</p><ul><li>第一步：属性私有化（private）<ul><li>private是一个权限修饰符，可以修饰成员变量</li><li>作用是保护成员不被别的类使用，被private修饰的成员仅在本类中才能访问</li></ul></li><li>第二步：对外提供简单的操作入口（setter and getter）<ul><li>提供两个入口：读方法get()和写方法set()，且都为无static的实例方法</li><li>方法名格式规范： get&#x2F;set+属性首字母大写<ul><li>getXxx()读方法：public，基本数据类型，无参数，有return需变量接收</li><li>setXxx()写方法：public，void类型，有一个参数，无return</li></ul></li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 第一步：属性私有化（private）</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二部：提供get/set方法（public）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        name = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> a)</span>&#123;</span><br><span class="line">        age = a;</span><br><span class="line">        <span class="keyword">if</span> (a&lt;<span class="number">0</span> || a&gt;<span class="number">120</span>)&#123;  <span class="comment">// 在set方法中设立关卡，保证数据的安全性</span></span><br><span class="line">            System.out.println(<span class="string">&quot;输入的年龄有误！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="12-2-static初步"><a href="#12-2-static初步" class="headerlink" title="12.2 static初步"></a>12.2 static初步</h2><ul><li>static（静态）：修饰变量和方法，可以定义静态代码块，直接通过类名就可以访问</li><li>无static（实例）：实例相关的都需要创建对象，否则会出现空指针异常</li><li>变量的分类：<ul><li>局部变量：在方法体当中声明的变量</li><li>成员变量：在方法体外声明的变量，又分为实例变量、静态变量：<ul><li>类变量（static）：又称为静态变量，通过“类名.”的方式访问</li><li>实例变量：必须创建实例对象，通过“对象引用.”的方式访问</li></ul></li></ul></li><li>方法的分类：<ul><li>类方法（static）：又称为静态方法，通过“类名.”的方式访问</li><li>实例方法：必须创建实例对象，通过“对象引用.”的方式访问</li></ul></li><li>静态变量的使用：局部变量（栈）、实例变量（堆）、类&#x2F;静态变量（方法区）<ul><li>条件：此类型的所有对象的某个属性值都是一样的</li><li>优点：静态变量在方法区只保留一份，节省内存开销</li><li>静态变量存储在方法区，在类加载时初始化。eg：方法区在加载Chinese.class时，发现类中有静态变量country，会给静态变量初始化赋值</li><li>构造方法无需传入静态变量，静态变量无需构造方法创建对象和初始化赋值</li><li>静态变量可以直接通过“类.”访问，也可以通过“对象引用.”，并且引用为空时也不会出现空指针异常</li></ul></li><li>静态方法的使用：所有类型的方法（栈）<ul><li>条件：该方法描述的行为不需要对象触发。通常方法如果是工具类的，一般都是静态的</li><li>优点：不需要new对象，直接采用类名就可以调用，非常方便</li><li>当一个方法访问了实例变量，此方法一定是实例方法</li><li>get和set方法都是实例方法，不能带static，调用必须先new对象</li></ul></li></ul><h2 id="12-3-静态和实例代码块"><a href="#12-3-静态和实例代码块" class="headerlink" title="12.3 静态和实例代码块"></a>12.3 静态和实例代码块</h2><ul><li><p>静态代码块（不常用）：static {}</p><ul><li>一个类中可以编写多个静态代码块，存储在方法区，在类加载时执行执行一次</li><li>静态代码块一般自上而下顺序执行，并且在main方法之前执行</li><li>作用：可以用一个静态代码块来记录类加载的日志信息</li><li>Java程序的顺序要求总结：<ul><li>方法体中代码是有顺序的，遵循自上而下顺序</li><li>静态代码块之间、静态代码块和静态变量是有先后顺序的</li><li>（定义和调用方法没有顺序要求，可以先调用后定义）</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticTest1</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">B</span></span><br><span class="line"><span class="comment">C</span></span><br><span class="line"><span class="comment">Hello World  //静态代码块在main方法之前执行</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticTest2</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(i);  <span class="comment">// 可以访问i，i在类加载时就执行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(j);  <span class="comment">// 不可以访问j，j是实例变量还未加载，在构造方法执行时才会开辟空间</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(k);  <span class="comment">// 不可以访问k，静态代码块和变量有先后顺序要求</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实例代码块（不常用）：{}</p><ul><li>实例代码块在类加载的时候并没有执行，在构造方法执行之前执行</li><li>作用：若每个构造方法都有相同的代码块，可以放入实例代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceTest1</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;C&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hello World</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InstanceCode</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstanceCode</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InstanceCode</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hello World</span></span><br><span class="line"><span class="comment">A</span></span><br><span class="line"><span class="comment">无参构造</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>代码执行顺序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeOrder</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块1&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法1&quot;</span>);</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CodeOrder</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;main方法2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">InstanceCode</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;无参构造&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实例代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;静态代码块2&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">静态代码块1</span></span><br><span class="line"><span class="comment">静态代码块2</span></span><br><span class="line"><span class="comment">main方法1</span></span><br><span class="line"><span class="comment">实例代码块</span></span><br><span class="line"><span class="comment">无参构造</span></span><br><span class="line"><span class="comment">main代码块2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="12-4-this关键字"><a href="#12-4-this关键字" class="headerlink" title="12.4 this关键字"></a>12.4 this关键字</h2><ul><li><p>this关键字：用来表示当前对象</p></li><li><p>this的内存结构：</p><ul><li>是一种引用，存在于堆内存每个对象的内部，保存当前对象的地址</li><li>从内存图上来看，this中存储的内容和引用c1存储的相同</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.this在实例方法中的使用，访问实例变量可以通过“this.”，或者直接访问</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Customer</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        c1.shopping();  <span class="comment">// ...System.out prinln(c1.name + &quot;is shopping&quot;);...</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">Customer</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Customer</span>();</span><br><span class="line">        c1.shopping();  <span class="comment">// ...System.out prinln(c2.name + &quot;is shopping&quot;);...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Customer</span>() &#123;</span><br><span class="line">        String name;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String name)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;  <span class="comment">// </span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shopping</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out <span class="title function_">prinln</span><span class="params">(name + <span class="string">&quot;is shopping&quot;</span>)</span>;  <span class="comment">//System.out prinln(this.name + &quot;is shopping&quot;); 实例变量name的访问必须通过“引用.”，此处的this就表示当前引用，而且this可以省略</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out <span class="title function_">prinln</span><span class="params">(name + <span class="string">&quot;is doing&quot;</span>)</span>;  <span class="comment">// 只有这一句的话，错误：这里的name一定不是this.name，因为若方法直接访问了实例变量（不是通过new一个对象），此方法一定是实例方法  </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.this不能在静态方法中使用，访问实例变量只能new一个对象，再“引用.”</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThisTest2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">// 实例变量</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">static</span> <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">1</span>;  <span class="comment">// 静态变量</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">            <span class="comment">//System.out prinln(1);  //错误：无法从静态上下文中引用非静态变量</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">ThisTest2</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThisTest</span>();  <span class="comment">// 正确：静态方法中必须new一个对象，才能访问实例变量，并且只能通过“引用.”，不能在静态方法中使用“this.”</span></span><br><span class="line">            System.out <span class="title function_">prinln</span><span class="params">(t2.i)</span>;</span><br><span class="line">            </span><br><span class="line">            System.out <span class="title function_">prinln</span><span class="params">(k)</span>;  <span class="comment">// 等价于System.out prinln(ThisTest2.k); 在同一个类中，类名可以省略</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.this在构造方法和成员方法中使用，用来区分局部变量和实例变量</span></span><br><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;  <span class="comment">// 不加this.会就近原则都是局部变量，this.name表示当前对象的name变量，把局部变量的值赋值给当前对象的变量</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;  <span class="comment">// 省略了this.，等同于this.name</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">// 4.this()在构造方法第一行使用，代码复用</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Date</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> year;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> month;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> day;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Date</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(<span class="number">2002</span>, <span class="number">8</span>, <span class="number">1</span>)  <span class="comment">// 通过调用有参构造方法，实现了初始化日期是2002年8月1日</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Date</span> <span class="params">(<span class="type">int</span> year, <span class="type">int</span> month, <span class="type">int</span> day)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.year = year;</span><br><span class="line">        <span class="built_in">this</span>.month = month;</span><br><span class="line">        <span class="built_in">this</span>.day = day;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>this的使用：</p><ul><li>this可以使用在实例方法（包括get&#x2F;set方法）中，也可以使用在构造方法中</li><li>this不可以使用在静态方法static中</li><li>this.绝大多数可以进行省略，但用来区分局部变量和实例变量时不能省略</li></ul></li><li><p>this()的使用:</p><ul><li>在构造方法中，表示本构造方法调用当前类的其他构造方法，目的是代码复用</li><li>这种语法只能出现在构造方法的第一行</li></ul></li></ul><h2 id="12-5-标准类的制作"><a href="#12-5-标准类的制作" class="headerlink" title="12.5 标准类的制作"></a>12.5 标准类的制作</h2><ul><li><p>成员变量：使用private修饰</p></li><li><p>构造方法：</p><ul><li>提供一个无参构造方法</li><li>提供一个带多个参数的构造方法</li></ul></li><li><p>成员方法：</p><ul><li>提供每一个成员变量对应的setXxx() &#x2F; getXxx()</li><li>提供一个显示对象信息的show()</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;,&quot;</span> + age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    创建对象并为其成员变量赋值的两种方法：</span></span><br><span class="line"><span class="comment">        方法一：无参数构造方法创建对象后使用set赋值</span></span><br><span class="line"><span class="comment">        方法二：使用带参数构造方法直接创建带有属性值的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 方法一：无参构造+set赋值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.setName(<span class="string">&quot;MJ&quot;</span>);</span><br><span class="line">        s1.setAge(<span class="number">18</span>);</span><br><span class="line">        s1.show();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 方法二：有参构造赋值</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;MJ&quot;</span>, <span class="number">18</span>);</span><br><span class="line">        s2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="12-6-类的总结"><a href="#12-6-类的总结" class="headerlink" title="12.6 类的总结"></a>12.6 类的总结</h2><ul><li><p>类中的成分：</p><ul><li>变量：实例变量、静态变量、局部变量</li><li>方法：实例方法、静态方法</li><li>构造方法：有参构造、无参构造</li><li>代码块：实例代码块、静态代码块</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Review</span> &#123;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 局部变量</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Student</span> <span class="variable">s1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        s1.study();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="comment">// 实例变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 静态变量</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">String</span> <span class="variable">job</span> <span class="operator">=</span> <span class="string">&quot;学生&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span> <span class="params">()</span> &#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span> <span class="params">(<span class="type">int</span> id, String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实例方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        System.out.println(this.name + &quot;is studying&quot;);  </span></span><br><span class="line"><span class="comment">        System.out.println(name + &quot;is studying&quot;);</span></span><br><span class="line"><span class="comment">        System.out.println(this.getName + &quot;is studying&quot;);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(getName + <span class="string">&quot;is studying&quot;</span>);  <span class="comment">// 在同一个类中，private变量是可以用“this.”访问的，但是在其他类中访问，必须使用set/get方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;method execute&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>private变量：在同一个类中，是可以用“this.”访问的（或省略），但是在其他类中访问，必须使用set&#x2F;get方法</p></li><li><p>在实例方法中：</p><ul><li>实例方法&#x2F;变量：直接使用“this.”调用，或者省略</li><li>静态方法&#x2F;变量：直接使用“类名.”调用，在一个类中，可以省略类名</li><li>总的来说：在方法同一个类中，互相就直接可以“方法名()”使用</li></ul></li><li><p>在静态方法中:</p><ul><li>静态方法&#x2F;变量：使用“类名.”调用，在一个类中，可以省略类名</li><li>实例方法&#x2F;变量：必须要new一个对象，再用“引用.”访问</li></ul></li><li><p>总结（“引用.”“this.”“类名.”的本质）：</p><ul><li>访问实例相关：创建对象，再用“引用.”来访问<ul><li>在同一个类中，实例间调用访问，可以用“this.”，并且可省略</li><li>特别地，静态访问实例，不能用“this.”，必须new创建对象</li></ul></li><li>访问静态相关：直接采用“类名.”来访问<ul><li>在同一个类中，可以省略“类名.”</li></ul></li></ul></li></ul><h1 id="13-继承（Inheritance）"><a href="#13-继承（Inheritance）" class="headerlink" title="13 继承（Inheritance）"></a>13 继承（Inheritance）</h1><h2 id="13-1-继承概述"><a href="#13-1-继承概述" class="headerlink" title="13.1 继承概述"></a>13.1 继承概述</h2><ul><li><p>继承：是面向对象的三大特征之一，可以使得子类具有父类的属性和方法，还可以在子类中重新定义，追加属性和方法</p><ul><li>子类继承父类的属性、get&#x2F;set方法、其他方法</li><li>但是子类不继承父类的构造方法</li></ul></li><li><p>继承的使用：</p><ul><li>继承体现的关系是：is a。eg：Cat is a animal</li><li>特别地，有重复的代码不一定就适合继承</li></ul></li><li><p>继承的优点：</p><ul><li>提高了代码的复用性和可维护性</li><li>有了继承，才能有方法的覆盖和多态机制</li></ul></li><li><p>继承的缺点：</p><ul><li>继承让类与类之间产生了关系，类的耦合性增强了</li><li>当父类发生变化时，子类也不得不跟着变化，削弱了子类的独立性</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> &#123;  <span class="comment">// 父类：银行账户</span></span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String actno;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span> &#123;undefined</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String actno, <span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.actno = actno;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setActno</span><span class="params">(String actno)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.actno = actno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getActno</span><span class="params">()</span> &#123;undefined</span><br><span class="line">        <span class="keyword">return</span> actno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;undefined</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditAccount</span> <span class="keyword">extends</span> <span class="title class_">Account</span> &#123;  <span class="comment">//子类：信用卡账户</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 成员变量（子类）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> credit;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CreditAccount</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter方法（子类）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCredit</span><span class="params">(<span class="type">double</span> credit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.credit = credit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCredit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> credit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承的相关特性：</p><ul><li><p>若B类继承A类：</p><ul><li>称A类（superclass）为父类、基类、超类</li><li>称B类（subclass）为：子类、派生类</li></ul></li><li><p>Java中继承只支持单继承，不支持多继承，即一个子类不能继承两个父类</p></li><li><p>虽然Java不支持多继承，但支持多重继承，产生间接继承效果</p></li><li><p>子类不继承父类的构造方法，其他都继承，也可以继承私有属性和方法的，但子类不能直接访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在上述子类中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span> &#123;undefined</span><br><span class="line">        <span class="comment">// 不可以直接访问</span></span><br><span class="line">        <span class="comment">//System.out.println(actno);  // 错误: actno在Account中是private访问控制，子类不能直接访问父类私有属性</span></span><br><span class="line">        <span class="comment">// 可以间接访问</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getActno());  <span class="comment">// 正确：子类中此实例方法可以使用“引用.”访问，同时子类可以使用this.来访问父类方法，此父类方法实现返回其私有属</span></span><br><span class="line">        System.out.println(getActno());  <span class="comment">// 并且此处的this.可以省略</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="13-2-Object类"><a href="#13-2-Object类" class="headerlink" title="13.2 Object类"></a>13.2 Object类</h2><ul><li>Object类：是所有类的父类，没有明确继承的父类的类，就是Object类的子类<ul><li>public String toString()是一个实例方法，在静态方法（main）中使用，必须先创建对象</li><li>System.out.print(引用); 等同于自动调用 System.out.print(引用.toString());</li><li>若没有重写，返回：getClass().getName()+”@”+Integer.toHexString(hashCode());</li><li>toString的作用：将对象转换为字符串</li></ul></li><li>JDK源代码：C:\Program File\Java\jdk\lib\src.zip<ul><li>String是SUN编写的字符串类，System是SUN编写的系统类</li><li>System.out.println(); “类名.静态变量.方法()”<ul><li>out通过类名System访问，说明为静态变量，并引用指向System类的一个对象</li><li>System.out调用对象中的println方法，实现输出</li></ul></li></ul></li></ul><h2 id="13-3-方法覆盖（Override）"><a href="#13-3-方法覆盖（Override）" class="headerlink" title="13.3 方法覆盖（Override）"></a>13.3 方法覆盖（Override）</h2><ul><li>方法覆盖：又称方法重写（Override&#x2F;Overwrite），当父类无法满足子类的业务需求时，子类重新定义父类的方法。使用方法覆盖后，子类一定只执行覆盖之后的方法<ul><li>两个类必须是继承关系</li><li>方法名相同、返回类型（相同&#x2F;不相同）（与多态有关）、参数列表相同</li><li>重写方法的访问权限只能更高，不能更低</li><li>重写方法的抛出异常只能更少，不能更多</li></ul></li><li>对比方法重载：若子类中错编写成方法重载的形式，是可以实现方法重载<ul><li>同一个类中</li><li>功能相似，方法名相同</li><li>参数列表类型、顺序或数量不同</li></ul></li><li>方法覆盖的注意事项（与多态有关）：<ul><li>方法覆盖只针对方法，和属性无关</li><li>构造方法不能被继承，所以也不能覆盖</li><li>只针对于实例方法，静态方法覆盖没有意义</li><li>私有方法无法覆盖</li></ul></li><li>覆盖toString方法：<ul><li>作用：将Java对象转换成字符串形式</li><li>默认实现：return 类全名@十六进制的hashCode值</li><li>覆盖实现：重写后，System.out.println(引用); 可直接实现</li></ul></li></ul><h1 id="14-多态（Polymorphism）"><a href="#14-多态（Polymorphism）" class="headerlink" title="14 多态（Polymorphism）"></a>14 多态（Polymorphism）</h1><h2 id="14-1-多态概述"><a href="#14-1-多态概述" class="headerlink" title="14.1 多态概述"></a>14.1 多态概述</h2><ul><li>多态：一个实体具有多种形态，即同一对象在不同时刻，代表的对象不一样</li><li>分析编译与运行：<ul><li>编译阶段：对于编译器，引用变量的类型为父类，会在父类.class字节码文件中寻找方法，编译通过，静态绑定成功（静态绑定父类方法）</li><li>运行阶段：执行的时候会自动调用堆内存中创建的对象的方法，所以真正参与执行的是子类方法，运行阶段会动态执行子类方法（动态绑定子类方法）</li><li>多态的体现在于：编译和运行的形态不同</li></ul></li></ul><h2 id="14-2-向上-x2F-向下转型"><a href="#14-2-向上-x2F-向下转型" class="headerlink" title="14.2 向上&#x2F;向下转型"></a>14.2 向上&#x2F;向下转型</h2><ul><li><p>基础概念：</p><ul><li>向上转型：父类的引用变量指向子类实例（类似自动类型转换）</li><li>向下转型：子类引用指向父类实例，此实例对象必须为子类向上转型得来的（类似强制类型转换，需要加强制类型转换符）</li></ul></li><li><p>向下转型的使用：</p><ul><li>当访问的是子类的特有方法时，必须强制类型转换才能使用</li><li>没有向下转型就访问子类特有方法时，会编译报错，编译器无法在父类中找到方法</li><li>强制类型转换不会报错，因为存在继承关系，并且前面已经向上转型</li><li>向下转型有风险，可能出现类型转换异常，可使用instanceof运算符避免</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时，想使用子类特有方法catchMouse()</span></span><br><span class="line"><span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;</span><br><span class="line">c.catchMouse();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Bird b = (Bird)a;  // ClassException，类型转换异常报错</span></span><br><span class="line"><span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">    <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;</span><br><span class="line">c.catchMouse();</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">    <span class="type">Cat</span> <span class="variable">c</span> <span class="operator">=</span> (Cat)a;</span><br><span class="line">c.catchMouse();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>instanceof运算符：</p><ul><li>作用：可以在运行阶段动态判断，引用指向的对象的类型</li><li>语法：（引用 instanceof 类型）</li><li>运算结果：True或False</li><li>结果为True表示：引用a指向的堆内存的对象类型是Cat类型，可以安全进行强制类型转换</li></ul></li></ul><h2 id="14-3-多态与开发"><a href="#14-3-多态与开发" class="headerlink" title="14.3 多态与开发"></a>14.3 多态与开发</h2><ul><li><p>降低程序的耦合度，提高程序的扩展力</p></li><li><p>面向抽象编程，不建议面向具体编程</p></li><li><p>符合软件开发原则：OCP（对扩展开放，对修改关闭）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 测试类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">Cat</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="type">Master</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>();</span><br><span class="line"></span><br><span class="line">m1.feed(c1);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主人类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Cat c)</span>&#123;</span><br><span class="line">c.eat();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 每多一个宠物时，都需要添加新的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Dog d)</span>&#123;</span><br><span class="line"> d.eat();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 猫类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">system.out.println(<span class="string">&quot;小猫在吃鱼&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 再写一个狗类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;小狗在啃骨头&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用“多态”优化代码，降低耦合度</span></span><br><span class="line"><span class="comment">/* 测试类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">Pet</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="type">Master</span> <span class="variable">m1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Master</span>();</span><br><span class="line"></span><br><span class="line">m1.feed(c1);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 主人类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Master</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Pet pet)</span> &#123; </span><br><span class="line">pet.eat();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 宠物类 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 猫狗类（继承宠物类） */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">Systen.out.println(<span class="string">&quot;小狗在啃骨头&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Pet</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;小猫在吃鱼&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="14-4-解释方法覆盖"><a href="#14-4-解释方法覆盖" class="headerlink" title="14.4 解释方法覆盖"></a>14.4 解释方法覆盖</h2><ul><li>（13.3）只针对于实例方法，静态方法覆盖没有意义：<ul><li>静态方法也可以使用“引用.”调用，但本质还是“类名.”</li><li>静态方法覆盖后，“引用.”调用的仍然是父类方法，没有意义</li><li>方法覆盖和多态机制联合才有意义，而多态是值对象的多种形态</li></ul></li><li>私有方法无法覆盖：<ul><li>私有尝试覆盖，最终调用的也是父类的私有方法，所以无法覆盖</li><li>注意事项：私有方法只能在同一个类中访问</li></ul></li><li>方法名相同、返回类型（相同&#x2F;不相同）、参数列表相同<ul><li>基本数据类型：返回类型必须相同</li><li>引用数据类型：返回类型可以不相同，但意义不大不常用（父类返回值为某父类方法，子类方法覆盖时用对应子类做返回值类型，方法覆盖返回值类型只能变小）</li><li>一般方法覆盖时，建议直接复制粘贴修改方法体</li></ul></li></ul><h1 id="15-super-x2F-this"><a href="#15-super-x2F-this" class="headerlink" title="15 super&#x2F;this"></a>15 super&#x2F;this</h1><h2 id="15-1-super关键字"><a href="#15-1-super关键字" class="headerlink" title="15.1 super关键字"></a>15.1 super关键字</h2><ul><li>this关键字：<ul><li>能出现在实例方法和构造方法中，不能使用在静态方法中</li><li>使用this的语法有“this.”和“this()”</li><li>除（区分局部变量和实例变量）时，大部分情况this.可以省略</li><li>this()只能出现在构造方法的首行，目的是（代码复用）</li></ul></li><li>super关键字：<ul><li>能出现在实例方法和构造方法中，不能使用在静态方法中</li><li>使用super的语法有“super.”和“super()”</li><li>除（父类和子类中有同名属性变量）时，大部分情况可以省略</li><li>super()只能出现在构造方法的首行，目的是（创建子类对象时，先初始化父类特征）</li></ul></li></ul><h2 id="15-2-super-使用"><a href="#15-2-super-使用" class="headerlink" title="15.2 super()使用"></a>15.2 super()使用</h2><ul><li><p>super()的使用：</p><ul><li>子类构造方法调用时，必然调用父类构造方法（Object是所有类的父类）</li><li>若子类构造方法，既无this()又没有super()时，默认首行有super()，会调用父类的无参构造</li><li>若子类构造方法第一行为super()，会调用父类的无参构造</li><li>若子类构造方法第一行为super(参数)时，会调用父类的有参构造</li><li>若子类构造方法第一行为this(参数)时，会调用子类的另一有参构造，此有参构造的第一行有默认的super()，会调用父类方法</li></ul></li><li><p>super()的注意事项：</p><ul><li>不管new任何一个对象，Object类的构造方法一定会执行，并且最先执行结束</li><li>无论如何，父类的构造方法一定会被调用，建议父类均写上无参构造方法</li><li>this()和super()均只能出现在首行，所以只能有一个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">C</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Object&#123;  </span></span><br><span class="line"><span class="comment">    public Object()&#123;  // 最后调用，但最先执行结束 </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">A</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1&quot;</span>);  <span class="comment">// 1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;2&quot;</span>);  <span class="comment">// 2</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">B</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3&quot;</span>);  <span class="comment">// 3</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">()</span> &#123;  <span class="comment">// 最先调用，但最后执行结束</span></span><br><span class="line">        <span class="built_in">this</span>(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;4&quot;</span>);  <span class="comment">// 4</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(name, <span class="number">20</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;5&quot;</span>);  <span class="comment">// 5</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">C</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        System.out.println(<span class="string">&quot;6&quot;</span>);  <span class="comment">// 6</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行顺序：1——&gt;3——&gt;6——&gt;5——&gt;4</span></span><br></pre></td></tr></table></figure></li><li><p>super(参数列表)的使用：</p><ul><li>父类的私有属性，只能在本类中访问，但子类可以通过super()构造</li><li>super代表的是“当前对象this”的父类型特征</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Account</span> <span class="keyword">extends</span> <span class="title class_">Object</span> &#123;</span><br><span class="line">    <span class="comment">// 成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String actno;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        默认调用父类构造方法，和初始化变量</span></span><br><span class="line"><span class="comment">        super();</span></span><br><span class="line"><span class="comment">        this.actno = null;</span></span><br><span class="line"><span class="comment">        this.balance = 0.0;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(String actno, <span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.actno = actno;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setActno</span><span class="params">(String actno)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.actno = actno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getActno</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> actno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditAccount</span> <span class="keyword">extends</span> <span class="title class_">Account</span>&#123;</span><br><span class="line">    <span class="comment">// 成员变量（子类特有）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> credit;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CreditAccount</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CreditAccount</span><span class="params">(String actno, <span class="type">double</span> balance, <span class="type">double</span> credit)</span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        私有属性，只能在本类中访问</span></span><br><span class="line"><span class="comment">        this.actno = actno;</span></span><br><span class="line"><span class="comment">        this.balance = balance;</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="built_in">super</span>(actno, balance);</span><br><span class="line">        <span class="built_in">this</span>.credit = credit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCredit</span><span class="params">(<span class="type">double</span> credit)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.credit = credit;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getCredit</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> credit;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="15-3-super-使用"><a href="#15-3-super-使用" class="headerlink" title="15.3 super.使用"></a>15.3 super.使用</h2><ul><li><p>super.的使用：</p><ul><li>若父类和子类中没有同名属性变量，使用super.变量&#x2F;this.变量，和直接使用变量结果都相同，此时super可以省略（可以理解为super为this指向的对象的一部分空间，是包含在内的）</li><li>若父类和子类中有同名属性，使用super.变量，可以在子类中访问父类属性，使用this.变量&#x2F;变量，表示访问子类属性，此时super不能省略</li></ul></li><li><p>super.属性和super.方法：</p><ul><li>同名属性：super.访问父类属性，this.访问子类属性</li><li>同名方法（方法重写）：super.调用父类方法，this.调用子类方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperTest05</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">Vip</span> <span class="variable">v</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Vip</span>(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        v.shopping();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Customer</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot; do some!&quot;</span>);</span><br><span class="line">        System.out.println(name + <span class="string">&quot; do some!&quot;</span>);</span><br><span class="line">        <span class="comment">//错误: Customer父类Object中没有name变量</span></span><br><span class="line">        <span class="comment">//System.out.println(super.name + &quot; do some!&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Vip</span> <span class="keyword">extends</span> <span class="title class_">Customer</span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Vip</span><span class="params">()</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Vip</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(name);</span><br><span class="line">        <span class="comment">// this.name = null;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shopping</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name + <span class="string">&quot;正在购物&quot;</span>);  <span class="comment">// null 正在购物</span></span><br><span class="line">        System.out.println(<span class="built_in">super</span>.name + <span class="string">&quot;正在购物&quot;</span>);  <span class="comment">// 张三正在购物</span></span><br><span class="line">        System.out.println(name + <span class="string">&quot;正在购物!&quot;</span>);  <span class="comment">// null 正在购物，等同于this.name</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="15-4-super内存图"><a href="#15-4-super内存图" class="headerlink" title="15.4 super内存图"></a>15.4 super内存图</h2><ul><li>super(参数列表)：<ul><li>每new一个对象，此对象中层层包含父类特征，但是堆内存实际只会出现一个对象</li><li>初始化当前对象的父类特征，并不是创建新对象</li></ul></li><li>super关键字：<ul><li>super与this同在堆内存子类内部，super为this指向的对象的一部分</li><li>super表示当前对象的部分父类特征，this指向当前对象自己本身</li></ul></li></ul><h2 id="15-5-super-x2F-this"><a href="#15-5-super-x2F-this" class="headerlink" title="15.5 super.&#x2F;this"></a>15.5 super.&#x2F;this</h2><ul><li><p>this：可以单独使用</p><ul><li>this可以表示引用，存储的是当前对象的地址</li><li>单独使用是表示引用，等同于调用了toString方法</li></ul></li><li><p>super：必须加“.”，不能单独使用</p><ul><li>super 不是引用，也不保存内存地址，super也不指向任何对象</li><li>super 只是代表当前对象内部的那一块父类型的特征</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperTest06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>);  <span class="comment">// SuperTest06@2f92e0f4，等同于System.out.println(this.toString());  </span></span><br><span class="line">        <span class="comment">//System.out.println(super);  // 错误，super需要.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 静态方法：不能使用this.和super.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">SuperTest06</span> <span class="variable">st</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SuperTest06</span>();</span><br><span class="line">        st.doSome();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        System.out.println(this);</span></span><br><span class="line"><span class="comment">        System.out.println(super.xxxx);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="16-final关键字"><a href="#16-final关键字" class="headerlink" title="16 final关键字"></a>16 final关键字</h1><h2 id="16-1-final概述"><a href="#16-1-final概述" class="headerlink" title="16.1 final概述"></a>16.1 final概述</h2><ul><li>final关键字：表示最终的、不可变的，可以修饰变量、方法和类</li></ul><h2 id="16-2-修饰变量"><a href="#16-2-修饰变量" class="headerlink" title="16.2 修饰变量"></a>16.2 修饰变量</h2><ul><li>final局部变量：只能进行赋值一次</li><li>final实例变量：必须手动赋值， 并只赋值一次<ul><li>一般实例变量会在构造方法中默认赋值，而final实例变量需手动</li><li>可以直接在变量后赋值，或在构造方法中手动赋值</li></ul></li><li>final引用：只指向一个对象，并永远指向此对象<ul><li>该方法执行过程中，指向的对象不会被垃圾回收期回收，直至方法结束</li><li>引用不能更改指向的对象，但是此对象的内部数据可以改变</li></ul></li><li>final常量：只能赋值一次<ul><li>static final联合修饰的变量会变成常量</li><li>final修饰的固定值，一般会添加static变为静态，存储在方法区，类加载初始化</li><li>常量一般都是公开的public，即使公开也无法更改，无需封装</li><li>public static final 常量名（全部大写，用下划线_连接）</li></ul></li></ul><h2 id="16-3-修饰方法"><a href="#16-3-修饰方法" class="headerlink" title="16.3 修饰方法"></a>16.3 修饰方法</h2><ul><li>final修饰方法：表示无法被覆盖、重写</li><li>final方法的使用：<ul><li>方法的功能已经足够完整，在子类不希望被改变</li><li>final方法比非final方法快，因为在编译时已经静态绑定，无需运行时动态绑定</li></ul></li></ul><h2 id="16-3-修饰类"><a href="#16-3-修饰类" class="headerlink" title="16.3 修饰类"></a>16.3 修饰类</h2><ul><li>final修饰类：表示无法被继承</li><li>final类的使用：<ul><li>final类通常功能完整，不能被继承</li><li>final类只是不能继承，仍然可以更改对象的字段</li><li>eg：String和Interger类，以及其他包装类</li></ul></li></ul><h1 id="17-抽象类和接口"><a href="#17-抽象类和接口" class="headerlink" title="17 抽象类和接口"></a>17 抽象类和接口</h1><h2 id="17-1-抽象类（abstract）"><a href="#17-1-抽象类（abstract）" class="headerlink" title="17.1 抽象类（abstract）"></a>17.1 抽象类（abstract）</h2><ul><li><p>抽象类：在普通类中增加抽象方法，用来描述抽象概念的类</p><ul><li>类和类之间有共同特征，将这些具有共同特征的类再进一步抽象</li><li>数据类型：引用数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[修饰符列表] <span class="keyword">abstract</span> class 类名 &#123;</span><br><span class="line">    类体;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类继承抽象类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">CreditAccount</span> <span class="keyword">extends</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抽象类的使用：</p><ul><li>final和abstract不能同时出现，是对立的非法修饰符组合</li><li>抽象类的子类也可以是抽象类，也可以是非抽象类</li><li>抽象类虽然无法实例化，但是有构造方法，是供子类使用的</li><li>抽象类中不一定有抽象方法，但抽象方法一定在抽象类中</li></ul></li><li><p>抽象类的作用：</p><ul><li>由于类本身是不存在的，所以抽象类无法创建对象，无法实例化</li><li>抽象类就是用来被子类继承的，非抽象子类继承抽象类，可以被实例化</li></ul></li><li><p>面试题：Java语言中凡是没有方法体的都是抽象方法</p><ul><li>错误，Object类中就有很多方法没有方法体，且都已;结尾</li><li>eg：public native int hashCode(); 该方法底层调用了C++写的动态链接库程序</li><li>native：表示调用JVM本地程序</li></ul></li></ul><h2 id="17-2-抽象方法"><a href="#17-2-抽象方法" class="headerlink" title="17.2 抽象方法"></a>17.2 抽象方法</h2><ul><li><p>抽象方法：抽象方法一定在抽象类中</p><ul><li>表示没有方体、没有实现的方法</li><li>有abstract关键字，去掉大括号，直接分号结束</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doSome</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure></li><li><p>非抽象类实现：</p><ul><li>非抽象类继承抽象类，必须将抽象方法实现，否则编译器报错</li><li>实现就是子类将从父类继承过来的方法进行方法覆盖、重写</li></ul></li><li><p>面向对象编程：</p><ul><li>面向抽象编程，降低程序的耦合度，提高程序的扩展里，符合OCP原则</li><li>多态的向上转型，即父类引用指向子类型对象，这就是面向对象编程</li><li>eg：父类为抽象类Animal，子类为非抽象类Cat、Dog…</li></ul></li></ul><h2 id="17-3-接口（interface）"><a href="#17-3-接口（interface）" class="headerlink" title="17.3 接口（interface）"></a>17.3 接口（interface）</h2><ul><li><p>接口：是一系列方法的声明，是一些方法特征的集合</p><ul><li>接口中只包含两部分：常量和抽象方法，没有其他部分</li><li>编译之后也是一个class字节码文件，可以看成一种特殊的抽象类</li><li>数据类型：引用数据类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[修饰符列表] interface 接口名 &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="type">double</span> PI;  <span class="comment">// public static final double PI;</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;  <span class="comment">// public static int sum(int a, int b);</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">C</span> <span class="keyword">extends</span> <span class="title class_">A</span>, B &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口的使用：</p><ul><li>接口之间是可以继承的，并且支持多继承</li><li>抽象类的public static，常量的public static final都可以省略</li><li>编译器在interface中，会自动添加省略的部分</li></ul></li><li><p>接口的作用：</p><ul><li>Java类不支持多继承，但可以通过实现接口来弥补这个局限</li><li>接口同抽象类被用来实现抽象，但其中存在的变量一定是final，public，static的</li></ul></li><li><p>面向接口编程：</p><ul><li>每个层次不直接向上提供服务，通过定义接口，仅向上暴露其接口功能</li><li>上层对于下层仅仅时接口依赖，而不依赖具体类</li></ul></li></ul><h2 id="17-4-接口与抽象类"><a href="#17-4-接口与抽象类" class="headerlink" title="17.4 接口与抽象类"></a>17.4 接口与抽象类</h2><ul><li>抽象类是半抽象的，接口是完全抽象的</li><li>抽象类中有构造方法，接口没有</li><li>类和类之间只能单继承，接口之间可以多继承</li><li>一个类只能继承一个抽象类，一个类可以实现多个接口</li><li>抽象类既可以抽象行为和数据，接口一般只对行为的抽象</li><li>接口中只能出现常量和抽象方法</li><li>（开发中，接口使用多于抽象类）</li></ul><h2 id="17-5-接口实现（implements）"><a href="#17-5-接口实现（implements）" class="headerlink" title="17.5 接口实现（implements）"></a>17.5 接口实现（implements）</h2><ul><li><p>接口是特殊的、完全抽象的抽象类，接口中的方法时抽象方法</p></li><li><p>类和接口之间叫做实现（implements），类和类之间叫做继承（entends）：</p><ul><li>当一个非抽象的类实现接口时，必须将接口中的抽象方法全部实现（重写、覆盖）</li><li>实现的类中，重写方法时必须写public，访问权限只能更高，缺少修饰符也不行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        MyMath m=<span class="keyword">new</span> <span class="title class_">MyMathImpl</span>();</span><br><span class="line">        System.out.println( m.sum(<span class="number">10</span>,<span class="number">9</span>));</span><br><span class="line">        System.out.println( m.sub(<span class="number">10</span>,<span class="number">9</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">MyMath</span>&#123;</span><br><span class="line">    <span class="type">double</span> PI=<span class="number">3.1415926</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyMathImpl</span> <span class="keyword">implements</span> <span class="title class_">MyMath</span>&#123;</span><br><span class="line">    <span class="comment">//错误：正在尝试分配更低的访问权限：以前为public</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        int sum(int a,int b)&#123;</span></span><br><span class="line"><span class="comment">        return a+b;</span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a-b;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>一个类和多个接口：</p><ul><li>一个类可以同时实现多个接口，弥补了单继承局限，类似于接口之间的多继承</li><li>若多个接口的方法名重复，实现的类中只需要重写一次即可</li><li>此时多个接口之间是一个类实现，没有继承关系也能强制类型转换，来调用不同接口的方法</li><li>若多个接口之间不是同一个类实现，也能通过编译，但运行可能出现：ClassCastException</li><li>因此，使用向下转型的判断：instanceof</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[]args)</span>&#123;</span><br><span class="line">        A a=<span class="keyword">new</span> <span class="title class_">D</span>();  </span><br><span class="line">        B b=<span class="keyword">new</span> <span class="title class_">D</span>();  </span><br><span class="line">        C c=<span class="keyword">new</span> <span class="title class_">D</span>();  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">// a.m2();  // 错误，多态可以是不同的接口引用，但不能直接去调用其他接口方法，此处A接口中没有m2方法</span></span><br><span class="line">        <span class="type">B</span> <span class="variable">b2</span> <span class="operator">=</span> (B)a;  <span class="comment">// 正确，当调用其他接口的方法时，需要强制类型转换</span></span><br><span class="line">        b2.m2();</span><br><span class="line">        </span><br><span class="line">        M m=<span class="keyword">new</span> <span class="title class_">E</span>();  </span><br><span class="line">        <span class="comment">//K k = (K)m;  // 编译正确，没有继承关系也可以强转；运行错误，出现ClassCastException(类型转化)异常</span></span><br><span class="line">       <span class="keyword">if</span>(m <span class="keyword">instanceof</span> K)&#123;</span><br><span class="line">        <span class="type">K</span> <span class="variable">k</span> <span class="operator">=</span> (K)m;</span><br><span class="line">       &#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">K</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">M</span>()&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">E</span> <span class="keyword">implements</span> <span class="title class_">M</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">-----------------------------------------------------</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">B</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">C</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">D</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B,C&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m1&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m2</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;m2&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">m3</span><span class="params">()</span>&#123;&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>extends和implements同时存在：继承在前，实现在后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span>&#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;undefined</span><br><span class="line">        <span class="type">Flyable</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>(); </span><br><span class="line">        f.fly();</span><br><span class="line">                                           </span><br><span class="line">        <span class="type">Flyable</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Pig</span>();</span><br><span class="line">        f2.fly();  </span><br><span class="line">         </span><br><span class="line">       <span class="type">Flyable</span> <span class="variable">f3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Snake</span>(); </span><br><span class="line"></span><br><span class="line">        <span class="type">Flyable</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Fish</span>();</span><br><span class="line">        f3.fly();  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父类：动物类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span>&#123;undefined</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口：通常提取的是行为动作</span></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Flyable</span>&#123;undefined</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猫类：Flyable是一对翅膀的接口，通过接口插让猫变的可以飞翔。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>&#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;undefined</span><br><span class="line">        System.out.println(<span class="string">&quot;翱翔太空的一只猫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 猪类：方法重写，会调用同一个fly()方法，但最后的执行效果不同</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Pig</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>&#123;undefined</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;undefined</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一只会飞的猪！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 蛇类：如果你不想让它飞，可以不实现Flyable接口</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snake</span> <span class="keyword">extends</span> <span class="title class_">Animal</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;undefined</span><br><span class="line">        System.out.println(<span class="string">&quot;不会飞的蛇&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 鱼类：默认实际上是存在继承Object类的</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Fish</span> <span class="keyword">implements</span> <span class="title class_">Flyable</span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fly</span><span class="params">()</span>&#123;undefined</span><br><span class="line">        System.out.println(<span class="string">&quot;我是六眼飞鱼&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="17-6-接口与开发"><a href="#17-6-接口与开发" class="headerlink" title="17.6 接口与开发"></a>17.6 接口与开发</h2><ul><li>接口在开发中的作用：接口的使用离不开多态机制，接口在类似于多态在开发中的作用<ul><li>多态是面向抽象编程，降低程序的耦合度，提高程序的扩展力</li><li>接口是面向接口编程，有了接口就可插拔，具有低耦合度、高扩展性</li></ul></li><li>面向接口编程：<ul><li>任何一个接口都有调用者和实现者，接口可以将调用者和实现者解耦合</li><li>调用者面向接口调用，实现者面向接口编写实现</li><li>大项目的开发，一般都分离成多个模块，调用者模块和实现者模块之间采用接口衔接</li></ul></li><li>在开发中的eg：接口是FoodMenu、调用者是Customer，实现者是ChinaCooker和AmericCookrt<ul><li><a href="https://blog.csdn.net/dangerous156/article/details/107283604#t6">Customer.java</a></li><li><a href="https://blog.csdn.net/dangerous156/article/details/107283604#t7">FoodMenu.java</a></li><li><a href="https://blog.csdn.net/dangerous156/article/details/107283604#t8">ChinaCooker.java</a></li><li><a href="https://blog.csdn.net/dangerous156/article/details/107283604#t9">AmericCooker.java</a></li><li><a href="https://blog.csdn.net/dangerous156/article/details/107283604#t10">Test.java</a></li></ul></li></ul><h2 id="17-7-类和类之间的关系"><a href="#17-7-类和类之间的关系" class="headerlink" title="17.7 类和类之间的关系"></a>17.7 类和类之间的关系</h2><ul><li>is a：表示“继承关系”<ul><li>eg：Cat is a Animal</li><li>Cat extends Animal</li></ul></li><li>has a：表示“关联关系”，以“属性”的形式存在<ul><li>eg：Customer has a FoodMenu</li><li>class Customer { FoodMenu foodmenu; }</li></ul></li><li>like a：表示“实现关系”，以类实现“接口”<ul><li>eg：Cooker like a FoodMenu</li><li>Cooker implements FoodMenu</li></ul></li></ul><h1 id="18-packet和import"><a href="#18-packet和import" class="headerlink" title="18 packet和import"></a>18 packet和import</h1><h2 id="18-1-package"><a href="#18-1-package" class="headerlink" title="18.1 package"></a>18.1 package</h2><ul><li>package：是一个关键字，后面加包名<ul><li>不同的软件包有不同的功能，包下还可以有子包</li><li>package语句只允许出现在Java源代码的第一行</li><li>在不同的包下，类名相同不影响运行，完整类名是带包名的</li></ul></li><li>包名的命名：<ul><li>公司域名倒序+项目名+模块名+功能名</li><li>eg：com.ClikeMJ.javase.chapter18</li></ul></li><li>编译和运行：<ul><li>编译：javac -d . HelloWorld.java</li><li>运行：java com.ClikeMJ.javase.chapter18.HelloWorld</li></ul></li></ul><h2 id="18-2-import"><a href="#18-2-import" class="headerlink" title="18.2 import"></a>18.2 import</h2><ul><li>类在同一个包下，包名可以省略，不需要import导包</li><li>类在不同包下，包名不能直接省略，需要使用import将需要的类导入</li><li>import com.ClikeMJ.javase.chapter18.HelloWorld;</li><li>import的使用：<ul><li>两个类在不同包内，但要互相使用</li><li>只能出现在package语句之下，class语句之上</li><li>还可采用*形式， *可以省略具体的类名</li></ul></li><li>Scanner的使用：Test类和Scanner类不在一个包下<ul><li>import java.utill.Scanner; &#x2F; import java.utill.*</li><li>Scanner s &#x3D; new Scanner(System.in);</li><li>String str &#x3D; s.next();</li></ul></li><li>String的使用：java.lang包自动导入，同System</li></ul><h1 id="19-访问权限设置"><a href="#19-访问权限设置" class="headerlink" title="19 访问权限设置"></a>19 访问权限设置</h1><ul><li><p>访问权限的范围：public &gt; protect &gt; “默认” &gt; private </p><ul><li>public：表示公开的，在任何位置都可以访问</li><li>private：表示私有的，只能在本类中访问</li><li>protect：表示只能在本类、同包、子类中也可以访问</li><li>“默认”：表示只能在本类，以及同包下访问</li></ul></li><li><p>访问权限的使用：</p><ul><li>属性：四个都可以</li><li>方法：四个都可以</li><li>类：public和默认可以，protect和private不行</li><li>接口：public和默认可以，protect和private不行</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjpowernode3; </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjpowernode.User;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    User在com.bjpowernode包下，Vip在com.bjpowernode3包下</span></span><br><span class="line"><span class="comment">    User和Vip不在同一个包下，但是Vip是User的子类，使用import导包</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Vip</span> <span class="keyword">extends</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">shopping</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.age);  <span class="comment">// 正确，protected int age;</span></span><br><span class="line">        System.out.println(<span class="built_in">this</span>.name);  <span class="comment">// 错误，public int weight;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaSE · 基础篇①</title>
      <link href="/2022/04/01/JAVA/1.Java/JavaSE/JavaSE%20%C2%B7%20%E5%9F%BA%E7%A1%80%E7%AF%87%E2%91%A0/"/>
      <url>/2022/04/01/JAVA/1.Java/JavaSE/JavaSE%20%C2%B7%20%E5%9F%BA%E7%A1%80%E7%AF%87%E2%91%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="01-Java概述"><a href="#01-Java概述" class="headerlink" title="01 Java概述"></a>01 Java概述</h1><h2 id="1-1-Java语言发展史"><a href="#1-1-Java语言发展史" class="headerlink" title="1.1 Java语言发展史"></a>1.1 Java语言发展史</h2><ul><li>Java语言是美国Sun公司（Stanford University Network）在1995年推出的计算机语言， 2009年Oracle甲骨文公司收购Sun公司</li><li>Java之父：詹姆斯·高斯林（James Gosling）</li><li>Java的三大版本：<ul><li>Java SE（J2SE，Java 2 Platform Standard Edition，标准版）</li><li>Java EE（J2EE，Java 2 Platform Enterprise Edition，企业版）</li><li>Java ME（J2ME，Java 2 Platform Micro Edition，微型版）</li></ul></li></ul><h2 id="1-2-JDK、JRE和JVM"><a href="#1-2-JDK、JRE和JVM" class="headerlink" title="1.2 JDK、JRE和JVM"></a>1.2 JDK、JRE和JVM</h2><ul><li><p>JDK（Java Development Kit） ：Java工具箱</p><ul><li>是Java程序的开发工具包，包含JRE和开发人员使用的工具</li><li>其中的开发工具包括：编译工具（javac.exe）和运行工具（java.exe）</li><li>如果想开发一个全新的Java程序，必须安装JDK</li></ul></li><li><p>JRE（Java Runtime Environment） ：Java运行环境</p><ul><li>是Java程序的运行时环境，它包括JVM和运行时所需要的核心类库</li><li>JRE是包含JVM的，因此只安装JRE也是可以实现Java的跨平台使用的</li></ul></li><li><p>JVM（Java Virtual Machine）：Java虚拟机</p><ul><li>用C++语言实现的，Java字节码通过虚拟机翻译解释给不同的平台</li><li>操作系统安装一个对应的JVM就可以实现Java的跨平台使用</li></ul></li><li><p>JDK、JRE和JVM的关系：JDK包含JRE和开发工具，JRE包含JVM和核心类库。对于开发人员来说，只需要使用JDK就可以满足一切开发和应用的需求</p></li></ul><blockquote><p>CHART：JDK、JRE和JVM的关系</p></blockquote><h2 id="1-3-编译与执行原理"><a href="#1-3-编译与执行原理" class="headerlink" title="1.3 编译与执行原理"></a>1.3 编译与执行原理</h2><ul><li><p>开发Java程序的三个步骤：编写程序、编译程序、运行程序</p><ul><li><p>编写阶段：源代码的文件扩展名必须是：xxx.java</p></li><li><p>编译阶段 javac：编译生成的字节码文件扩展名是：xxx.class</p><ul><li><p>将Java源代码这种普通文本变成“字节码”的过程，JVM可以识别的是字节码</p></li><li><p>一个源代码文件可以编译生成多个class文件的</p></li><li><p>（在源文件文件夹目录下）javac 文件名.java。eg：javac HelloWorld.java</p></li></ul></li><li><p>运行阶段 java.exe：参与执行过程的是字节码</p><ul><li>.class文件的文件名就是编译生成的类名</li><li>（在源文件文件夹目录下）java 类名。eg：java HelloWorld</li></ul></li></ul></li><li><p>Java开发到运行的过程：</p><ul><li>第一步：在硬盘某个位置，新建一个xxx.java文件，编写代码</li><li>第二步：使用编译器javac对xxx.java文件进行编译生成字节码，语法正确编译通过，即会生成.class文件（编译器实质上是检查语法）</li><li>第三步：（运行期，JRE起作用）使用JDK自带的命令&#x2F;工具java来执行字节码</li><li>第四步：JVM将字节码文件装载进去，然后JVM对字节码进行解释（解释器将字节码解释为二进制）</li><li>第五步：JVM将生成的二进制码交给OS操作系统，执行二进制和硬件的交互</li></ul></li><li><p>JDK新特性：java 文件名.java &#x2F; java 源文件路径 （编译直接运行，不生成.class文件）</p></li></ul><h2 id="1-4-常用DOS命令"><a href="#1-4-常用DOS命令" class="headerlink" title="1.4 常用DOS命令"></a>1.4 常用DOS命令</h2><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>win键 + r（组合键）</td><td>打开“运行”窗口</td></tr><tr><td>mkdir test</td><td>创建一个目录“test”</td></tr><tr><td>盘符名称：</td><td>盘符切换。eg：E：回车，表示切换到E盘</td></tr><tr><td>dir</td><td>查看当前目录下的内容</td></tr><tr><td>cd 路径</td><td>切换到指定目录</td></tr><tr><td>cd ..</td><td>回退到上一级目录</td></tr><tr><td>cd \</td><td>回退到根目录</td></tr><tr><td>del 文件名</td><td>删除文件</td></tr><tr><td>cls</td><td>清屏</td></tr><tr><td>exit</td><td>退出命令提示符窗口</td></tr><tr><td>ipconfig</td><td>查看本机IP网络配置</td></tr><tr><td>ping</td><td>测试网络连通</td></tr><tr><td>Ctrl + C</td><td>强制终止</td></tr></tbody></table><ul><li>DOS命令窗口复制内容：左键直接选中，右键单击就复制到剪切板了</li><li>DOS命令窗口打开默认位置：C:\Users\lenovo&gt;</li><li>cd：change directory</li><li>路径：相对路径（相对于当前所在位置）和绝对路径（路径起点是盘符）</li></ul><h2 id="1-5-常用快捷键"><a href="#1-5-常用快捷键" class="headerlink" title="1.5 常用快捷键"></a>1.5 常用快捷键</h2><table><thead><tr><th>文本编辑快捷键</th><th>说明</th></tr></thead><tbody><tr><td>回到行首&#x2F;行尾</td><td>home&#x2F;end</td></tr><tr><td>光标在行尾&#x2F;行首，选中一行</td><td>Shift + home&#x2F;end</td></tr><tr><td>回到文件头&#x2F;文件尾</td><td>Ctrl + home&#x2F;end</td></tr><tr><td>选中一个单词</td><td>Ctrl + Shift + 左&#x2F;右箭头</td></tr></tbody></table><h2 id="1-6-环境变量"><a href="#1-6-环境变量" class="headerlink" title="1.6 环境变量"></a>1.6 环境变量</h2><ul><li>Path环境变量：是Windows操作系统的机制，与java实际上没有关系<ul><li>用户变量：范围比较小，这个变量只是作用于当前用户</li><li>系统变量：范围比较大，系统变量会让计算机所有用户都起作用</li></ul></li><li>JAVA_HOME环境变量：是JDK所属的环境变量，在JavaWeb安装Tomcat服务器时需要进行配置</li><li>classpath环境变量（不用）：是Java特有的，会给类加载器指定一个路径加载字节码文件</li></ul><h1 id="02-程序的解释"><a href="#02-程序的解释" class="headerlink" title="02 程序的解释"></a>02 程序的解释</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span> <span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-1-类体的概念"><a href="#2-1-类体的概念" class="headerlink" title="2.1 类体的概念"></a>2.1 类体的概念</h2><ul><li>public表示公开，class表示一个类，Test是一个类名</li><li>类体：类名后面的一个成对的大括号及其中间内容</li><li>class类的注意事项：<ul><li>类体中不能直接编写输出语句</li><li>源文件中只要有一个class的定义，就会生成一个.class文件</li><li>public不是必须的，但若有public修饰的类名，就必须和源文件名一致</li><li>一个源文件中可以有多个类，但public的类就只能有一个，</li></ul></li></ul><h2 id="2-2-main方法"><a href="#2-2-main方法" class="headerlink" title="2.2 main方法"></a>2.2 main方法</h2><ul><li>main方法：又称主方法，程序的入口，sun公司java语言规定的</li><li>类体中若没有main方法，语法正确也只能编译成功，但JVM无法执行程序</li><li>一个源文件中若有多个类，每个类都允许有main方法，但不会这样使用</li></ul><h2 id="2-3-方法体"><a href="#2-3-方法体" class="headerlink" title="2.3 方法体"></a>2.3 方法体</h2><ul><li>方法体：方法后面的一对大括号以及中间的内容</li><li>方法体由java语句构成，必须以英文分号;结尾，代表一条语句结束</li></ul><h1 id="03-基础语法"><a href="#03-基础语法" class="headerlink" title="03 基础语法"></a>03 基础语法</h1><h2 id="3-1-注释"><a href="#3-1-注释" class="headerlink" title="3.1 注释"></a>3.1 注释</h2><ul><li><p>注释：是在程序指定位置添加的说明性信息。注释不参与程序运行，仅起到说明作用</p></li><li><p>注释的分类：</p><table><thead><tr><th>注释类别</th><th>格式</th></tr></thead><tbody><tr><td>单行注释</td><td>&#x2F;&#x2F; 注释信息</td></tr><tr><td>多行注释</td><td>&#x2F;* 注释信息 *&#x2F;</td></tr><tr><td>文档注释</td><td>&#x2F;** 注释信息 *&#x2F;</td></tr></tbody></table></li><li><p>文档注释：可以自动被javadoc.exe注释解析提取到帮助文档中</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 类的注释信息</span></span><br><span class="line"><span class="comment">* <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Cheng</span></span><br><span class="line"><span class="comment">* ......</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="3-2-标识符"><a href="#3-2-标识符" class="headerlink" title="3.2 标识符"></a>3.2 标识符</h2><ul><li>标识符（identifier）：是给类、方法、变量等起名字的符号，程序员有权利命名的单词</li><li>标识符的命名规则：<ul><li>由数字、字母、下划线_和美元符$ 组成</li><li>不能以数字开头</li><li>不能是关键字</li><li>要区分大小写</li></ul></li><li>标识符的常见命名规范：<ul><li>项目名：全部小写，多个单词之间用横杆-分割。eg：demo，spring-boot</li><li>包名：全部小写，多级包用.隔开。eg：com.jourwon</li><li>类、接口：大骆峰命名法<ul><li>约定1：是一个单词的时候，首字母大写。eg：Student</li><li>约定2：由多个单词组成的时候，每个单词的首字母大写。eg：GoodStudent</li></ul></li><li>方法、变量：小骆峰命名法<ul><li>约定1：是一个单词的时候，首字母小写。eg：name</li><li>约定2：由多个单词组成的时候，第一个单词首字母小写，其他单词首字母大写。eg：firstNAME</li></ul></li><li>常量：一个单词所有字母大写；多个单词大写，再用下划线区分每个单词。eg：DATE，MAX_AGE</li></ul></li><li>标识符的注意事项：<ul><li>虽然命名时严格区分大小写，但也要避免同时出现Hello和hello的类名</li><li>同时出现大小写类名时的编译，谁在前面就只会生成谁的.class文件</li><li>源文件可以命名为123.java，但此源文件中不能有public类，因为123不能做标识符</li></ul></li></ul><h2 id="3-3-关键字"><a href="#3-3-关键字" class="headerlink" title="3.3 关键字"></a>3.3 关键字</h2><ul><li>关键字（keywards）：在开发Java语言时，提前定义好的一些具有特殊含义的单词</li><li>关键字的特点：<ul><li>关键字的字母全部小写</li><li>常用的代码编辑器，针对关键字有特殊的颜色标记</li></ul></li><li>关键字的注意事项：<ul><li>true，false和，null看起来像关键字，但它们实际上是文字， 但也不能在程序中将它们用作标识符</li><li>保留字（reserved words）是语言已经定义过的字，考虑扩展性和未来向后兼容。eg：const和goto</li></ul></li></ul><h2 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h2><ul><li><p>计算机存储单元：</p><ul><li>位（bit）：又称为比特位，计算机存储设备的最小信息单元，常用小写字母“b”表示</li><li>字节（byte）：计算机中最小的存储单元，通常用大写字母“B”表示，字节是由连续的8个位组成</li><li>其他常用的存储单位关系如下：<ul><li>1B &#x3D; 8bit；</li><li>1KB &#x3D; 1024B；</li><li>1MB &#x3D; 1024KB；</li><li>1GB &#x3D; 1024MB；</li><li>1TB &#x3D; 1024GB</li></ul></li></ul></li><li><p>数据类型：Java语言是强类型语言，不同的数据类型分配了不同的内存空间</p></li><li><p>数据类型的分类：</p><ul><li>基本数据类型（4大类8小类）：<ul><li>整型（byte、short、int、long）</li><li>浮点型（float、double）</li><li>字符型（char）</li><li>布尔型（boolean）</li></ul></li><li>引用数据类型：<ul><li>类（class）</li><li>接口（interface）</li><li>数组（[ ]）</li></ul></li></ul></li><li><p>数据类型详解、内存占用和取值范围：</p><table><thead><tr><th>数据类型</th><th></th><th>内存占用</th><th>取值范围</th></tr></thead><tbody><tr><td>byte</td><td></td><td>1bit</td><td>-128~127</td></tr><tr><td>short</td><td></td><td>2bit</td><td>-32768-32767</td></tr><tr><td>int</td><td></td><td>4bit</td><td>-2的31次方~2的31次方-1（2147483647）</td></tr><tr><td>long</td><td></td><td>8bit</td><td>-2的63次方~2的63次方-1（9223372036854775807）</td></tr><tr><td>float</td><td></td><td>4bit</td><td>负数：-3.402823E+38<del>-1.401298E-45； 正数：1.401298E-45</del>3.402823E+38</td></tr><tr><td>double</td><td></td><td>8bit</td><td>负数：-1.797693E+308<del>-4.9000000E-324； 正数：4.9000000E-324</del>1.797693E+308</td></tr><tr><td>char</td><td></td><td>2bit</td><td>0~65535</td></tr><tr><td>boolean</td><td></td><td>1bit</td><td>true；false</td></tr></tbody></table></li><li><p>数据类型的注意事项：</p><ul><li>char类型可以存储一个汉字，2bit内存占用</li><li>字符串String类型无法转换为字符char类型，String是双引号，char为单引号</li><li>long &#x3D; 2147483648; 会报错，因为超过了int的最大范围，所以在没有赋值前就报错了</li><li>解决方法：long &#x3D; 2147483648L（不加L，默认所有数字为int类型）</li><li>任何一个浮点型都比整型空间大，float容量 &gt; long类型（关于底层原理）</li><li>boolean类型和C语言不同，只有true和false两种值，不能用1和0表示</li></ul></li><li><p>字符编码ASCII码：</p><ul><li>‘a’ ——&gt; 97（01100001）</li><li>‘A’ ——&gt; 65（01000001）</li><li>‘0’ ——&gt; 48（11000000）</li></ul></li><li><p>类型转换的分类：自动类型转换、强制类型转换</p><ul><li><p>自动类型转换（隐式转换）：在运算过程中，由于不同的数据类型会转换成同一种数据类型，所以整型、浮点型以及字符型都可以参与混合运算。自动转换的规则是从低级类型数据转换成高级类型数据</p><ul><li><p>数值型数据的转换：byte→short→int→long→float→double</p></li><li><p>字符型转换为整型：char→int</p></li><li><p>eg：double d &#x3D; 10;  —&gt;10.0</p></li></ul></li><li><p>强制类型转换（显式转换）：当两种数据类型不兼容，或目标类型的取值范围小于源类型时，自动转换将无法进行，这时就需要进行强制类型转换</p><ul><li>目标类型 变量名 &#x3D; (目标类型) (被转换的数据);</li><li>eg：int k &#x3D; (int)88.88;   —&gt;88</li><li>不建议使用，因为会有精度的损失（存储形式：二进制补码）</li></ul></li><li><p>byte、short和char的注意事项：</p><ul><li>在整数不超范围的情况下，可以直接赋值此三种类型变量，可不加强制转换</li><li>它们做混合运算时，会各自转换为int再运算（char转换ASCII），运算结果也为int</li><li>可以直接赋值不超过范围的整数，但不能赋值包含变量进行运算的表达式或者变量</li></ul></li></ul></li></ul><h2 id="3-5-常量和变量"><a href="#3-5-常量和变量" class="headerlink" title="3.5 常量和变量"></a>3.5 常量和变量</h2><ul><li><p>常量：在程序运行过程中，其值不可以发生改变的量</p></li><li><p>常量的分类：</p><table><thead><tr><th>常量类型</th><th>说明</th><th>举例</th></tr></thead><tbody><tr><td>整数常量</td><td>不带小数的数字</td><td>100、200、0、-250</td></tr><tr><td>浮点数常量</td><td>带小数的数字</td><td>2.5、-3.14、0.0</td></tr><tr><td>字符串常量</td><td>用双引号引起来的内容</td><td>“abc”、”123”、”Hello”</td></tr><tr><td>字符常量</td><td>用单引号括起来的内容</td><td>‘a’、’B’、’9’、’中’</td></tr><tr><td>布尔常量</td><td>布尔值，表示真假</td><td>只有两个值：ture、false</td></tr><tr><td>空常量</td><td>一个特殊的值，空值</td><td>值是：null</td></tr></tbody></table></li><li><p>变量：在程序执行的过程中，在某个范围内其值可以发生改变的量。从本质上讲，变量其实是内存中的一小块区域</p></li><li><p>变量的使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">variableDemo</span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"><span class="comment">// 定义变量：声明了三个变量，但只有c赋值了</span></span><br><span class="line"><span class="type">int</span> a, b, c = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// 输出变量：此时输出a和b会报错，未赋值</span></span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="comment">// 修改变量：必须先定义再使用</span></span><br><span class="line">c = <span class="number">20</span>;</span><br><span class="line">System.out.println(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>变量的分类：</p><ul><li>成员变量：在方法外定义的变量，直接写在类中<ul><li>若没有赋值会有默认值</li><li>默认值：整数0、浮点数0.0、布尔false、字符 空字符、引用数据类型null</li></ul></li><li>局部变量：在方法中定义的变量<ul><li>没有默认值，想要使用必须先赋值</li><li>main方法结束，变量的内存空间释放</li></ul></li></ul></li><li><p>变量的作用域：</p><ul><li>每个变量的作用域：在其所在的大括号内</li><li>不同域中的变量名可以同名</li></ul></li><li><p>变量的注意事项：</p><ul><li>同一个域中变量名称不能重复，必须先赋值再使用</li><li>整数默认是int类型，定义long类型的数据时，要在数据后面加L&#x2F;l</li><li>浮点数默认是double类型，定义float类型的数据时，要在数据后面加F&#x2F;f</li><li>类外面不能有变量的声明</li></ul></li></ul><h2 id="3-6-分隔符"><a href="#3-6-分隔符" class="headerlink" title="3.6 分隔符"></a>3.6 分隔符</h2><ul><li>分隔符：空格、逗号、分号以及行结束符都被称为分隔符，规定任意两个相邻标识符、数字、保留字或语句之间必须至少有一个分隔符，以便程序编译时能够识别</li><li>分隔符的分类：<ul><li>; 分号 用来终止一个语句</li><li>{} 花括号、大括号 用来包括自动初始化的数组的值，也用来定义程序块、类、方法以及局部范围</li><li>[] 方括号、中括号 用来声明数组的类型，也用来表示撤消对数组值的引用</li><li>, 逗号 在变量声明中，区分变量说明的各个变量。在for控制语句中，用来将圆括号内的语句连接起来</li><li>. 原点 用来将软件包的名字与它的子包或类分隔。也用来将引用变量与变量或方法分隔</li><li>() 圆括号 在定义和调用方法时用来容纳参数表。在控制语句或强制类型转换组成的表达式中用来表示执行或计算的优先权</li></ul></li><li>分隔符的注意事项：必须都是半角下的英文符号</li></ul><h2 id="3-7-转义字符"><a href="#3-7-转义字符" class="headerlink" title="3.7 转义字符"></a>3.7 转义字符</h2><ul><li><p>转义字符：是一种特殊的字符常量。转义字符以反斜线””开头，后跟一个或几个字符。转义字符具有特定的含义，不同于字符原有的意义，故称“转义”字符</p></li><li><p>转义字符的分类（常见）：</p><table><thead><tr><th>转义字符</th><th>说明</th><th>ASCII码</th></tr></thead><tbody><tr><td>\b</td><td>退格，将当前位置移到前一列</td><td>8</td></tr><tr><td>\f</td><td>换页，将当前位置移到下页开头</td><td>12</td></tr><tr><td>\n</td><td>换行，将当前位置移到下一行开头</td><td>10</td></tr><tr><td>\r</td><td>回车，将当前位置移到本行开头</td><td>13</td></tr><tr><td>\t</td><td>水平制表（跳到下一个TAB位置）</td><td>9</td></tr><tr><td>\v</td><td>垂直制表</td><td>11</td></tr><tr><td>\\</td><td>代表一个反斜线字符</td><td>92</td></tr><tr><td>\‘和\“</td><td>代表一个单&#x2F;双引号字符（英文）</td><td>39&#x2F;34</td></tr><tr><td>\0</td><td>空字符（NULL）</td><td>0</td></tr></tbody></table></li><li><p>转义字符的使用：</p><ul><li>String.split()和正则表达式中，有一些特殊字符需要转义，这些字符是( [ { &#x2F; ^ - $ ¦ } ] ) ? * + .</li><li>转义方法为字符前面加上”\“，这样在split、replaceAll时就不会报错</li><li>String.contains()方法不需要转义</li></ul></li></ul><h1 id="04-运算符"><a href="#04-运算符" class="headerlink" title="04 运算符"></a>04 运算符</h1><ul><li>运算符和表达式：<ul><li>运算符：对常量或者变量进行操作的符号</li><li>表达式：用运算符把常量或者变量连接起来符合java语法的式子即为表达式</li><li>eg：int a &#x3D;10;  int b &#x3D; 20;  int c &#x3D; a + b;<ul><li>+：是运算符，并且是算术运算符</li><li>a + b：是表达式，由于+是算术运算符，所以这个表达式称为算术表达式</li></ul></li></ul></li></ul><h2 id="4-1-算数运算符"><a href="#4-1-算数运算符" class="headerlink" title="4.1 算数运算符"></a>4.1 算数运算符</h2><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>+</td><td>加</td></tr><tr><td>-</td><td>减</td></tr><tr><td>*</td><td>乘</td></tr><tr><td>&#x2F;</td><td>除</td></tr><tr><td>%</td><td>取余（取模）</td></tr></tbody></table><ul><li><p>算术运算符的注意事项：</p><ul><li><p>+可以表示加运算，也可以表示字符串的拼接（常用于输出）</p></li><li><p>%最后的正负符号和被模数相同</p></li></ul></li><li><p>字符的 ‘+’ 操作：是字符在计算机底层对应的数值来进行计算的</p><ul><li><p>CHART： ‘A’——65；’a’——97；’0’——48</p></li><li><p>字符 + 字符 &#x2F; 字符 + 数字——&gt;数字；字符串 + 字符——&gt;字符串</p></li><li><p>算术表达式中包含多个基本数据类型的值的时候，整个表达式会自动进行提升到最大容量类型</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">y</span> <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">System.out.println(x + y);  <span class="comment">// 195，字符 + 字符</span></span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> <span class="string">&quot;a&quot;</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">y</span> <span class="operator">=</span> <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">System.out.println(x + y);  <span class="comment">// ab，字符串 + 字符</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">char</span> <span class="variable">c</span> <span class="operator">=</span> <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">System.out.println(c + <span class="number">1</span>);  <span class="comment">// 107，字符 + 数字</span></span><br><span class="line"><span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> c + i;  <span class="comment">// 报错，int + char会提升到最大容量的int类型</span></span><br><span class="line"></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> (<span class="type">short</span>)c + b;  <span class="comment">// 报错，short + byte混合运算，慧转换为int类型再运算，且运算结果为int类型</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> (<span class="type">short</span>)(c + b);  <span class="comment">// 正确写法</span></span><br><span class="line"><span class="type">short</span> <span class="variable">s</span> <span class="operator">=</span> i;  <span class="comment">// 报错，i为int变量不能直接赋值给short类型变量，只有整数常量可以直接类型转换</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符串的 ‘+’ 操作：</p><ul><li>当 ‘+’ 操作中，先出现字符串时，表示字符串连接符，而不是算术运算</li><li>在 ‘+’ 操作中，先出现数字时，先表示算术运算；但如果出现了字符串，就是字符串连接运算符</li><li>字符串 + 数字1 + 数字2——&gt;字符串数字1数字2；数字1 + 数字2 + 字符串——&gt;数字3字符串</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + a + b);  <span class="comment">// 100+200=100200</span></span><br><span class="line">System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));  <span class="comment">// 100+200=300</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>+<span class="string">&quot;earth&quot;</span>);  <span class="comment">// helloearth</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>+<span class="number">6666</span>);  <span class="comment">// hello6666</span></span><br><span class="line">    System.out.println(<span class="number">6666</span>+ <span class="string">&quot;hello&quot;</span>);  <span class="comment">// 6666hello</span></span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>+<span class="number">6</span>+<span class="number">666</span>);  <span class="comment">// hello6666</span></span><br><span class="line">    System.out.println(<span class="number">6</span>+<span class="number">666</span>+<span class="string">&quot;hello&quot;</span>);  <span class="comment">// 672hello</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-2-赋值运算符"><a href="#4-2-赋值运算符" class="headerlink" title="4.2 赋值运算符"></a>4.2 赋值运算符</h2><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>&#x3D;</td><td>赋值</td></tr><tr><td>+&#x3D;</td><td>加后赋值</td></tr><tr><td>-&#x3D;</td><td>减后赋值</td></tr><tr><td>*&#x3D;</td><td>乘后赋值</td></tr><tr><td>&#x2F;&#x3D;</td><td>除后赋值</td></tr><tr><td>%&#x3D;</td><td>取余后赋值</td></tr></tbody></table><ul><li><p>赋值运算符的注意事项：</p><ul><li><p>&#x3D;与&#x3D;&#x3D;容易混淆，在比较时建议使用数字 &#x3D;&#x3D; 变量的形式</p></li><li><p>扩展的赋值运算符隐含了强制转换，永远都不会改变运算结果类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">short</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">a += <span class="number">20</span>;<span class="comment">// 正确，赋值运算符隐含了强制类型转换，等同于a = (short)(a + 20)</span></span><br><span class="line">a = a + <span class="number">20</span>;<span class="comment">// 错误，a + 20被提升到int类型，不能直接赋值short a</span></span><br><span class="line">a =(<span class="type">short</span>)(a + <span class="number">20</span>)<span class="comment">// 正确，使用了强制类型转换</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="4-3-自增自减运算符"><a href="#4-3-自增自减运算符" class="headerlink" title="4.3 自增自减运算符"></a>4.3 自增自减运算符</h2><table><thead><tr><th>符号</th><th>作用</th><th></th></tr></thead><tbody><tr><td>++</td><td>自增</td><td></td></tr><tr><td>–</td><td>自减</td><td></td></tr></tbody></table><ul><li><p>单独使用的时候，++和–无论放在前面还算后面，结果是是一样的</p></li><li><p>参与操作的时候，如果放在变量的后边，先拿变量参与操作，后拿变量做++或者–</p></li><li><p>参与操作的时候，如果放在变量的前边，先拿变量做++或者–-，后拿变量参与操作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">90</span>;</span><br><span class="line">    System.out.println(i++);  <span class="comment">// 90</span></span><br><span class="line">    System.out.println(i);  <span class="comment">// 91</span></span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">80</span>;</span><br><span class="line">    System.out.println(++j);  <span class="comment">// 81</span></span><br><span class="line">    System.out.println(j);  <span class="comment">// 81</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-4-关系运算符"><a href="#4-4-关系运算符" class="headerlink" title="4.4 关系运算符"></a>4.4 关系运算符</h2><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>&#x3D;&#x3D;</td><td>等于</td></tr><tr><td>!&#x3D;</td><td>不等于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr></tbody></table><h2 id="4-5-逻辑运算符"><a href="#4-5-逻辑运算符" class="headerlink" title="4.5 逻辑运算符"></a>4.5 逻辑运算符</h2><table><thead><tr><th>符号</th><th>作用</th></tr></thead><tbody><tr><td>&amp;</td><td>逻辑与</td></tr><tr><td>|</td><td>逻辑或</td></tr><tr><td>^</td><td>逻辑异或</td></tr><tr><td>!</td><td>逻辑非</td></tr><tr><td>&amp;&amp;</td><td>短路与</td></tr><tr><td>||</td><td>短路或</td></tr></tbody></table><ul><li><p>逻辑运算符的注意事项：</p><ul><li>短路与&amp;&amp;，如果左边为真，右边执行；如果左边为假，右边不执行</li><li>短路或||，如果左边为假，右边执行；如果左边为真，右边不执行</li><li>与、或运算需要左右各自有一个Boolean值，但是取反只需要有一个booolean即可</li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String args[])</span> &#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">System.out.println(<span class="number">3</span> &gt; <span class="number">4</span> &amp;&amp; ++a &lt; <span class="number">100</span>);  <span class="comment">// false</span></span><br><span class="line">System.out.println(a);  <span class="comment">// 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line">System.out.println(<span class="number">3</span> &lt; <span class="number">4</span> || ++b &lt; <span class="number">100</span>);  <span class="comment">// true</span></span><br><span class="line">System.out.println(b);  <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="4-6-三元运算符"><a href="#4-6-三元运算符" class="headerlink" title="4.6 三元运算符"></a>4.6 三元运算符</h2><ul><li><p>格式：关系（布尔）表达式？表达式1：表达式2</p></li><li><p>计算规则：首先计算关系表达式的值</p><ul><li>如果值为true，表达式1的值就是运算结果</li><li>如果值为false，表达式2的值就是运算结果</li><li>注意：要根据表达式返回的类型，定义一个变量接收结果，或者直接输出</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OperatorDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 定义两个变量</span></span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 获取两个数据中的较大值</span></span><br><span class="line"><span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> a &gt; b ? a : b;</span><br><span class="line"><span class="comment">// 输出结果</span></span><br><span class="line">System.out.println(<span class="string">&quot;max:&quot;</span> + max);  <span class="comment">// out&gt;&gt;max:20</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="05-输出和输入"><a href="#05-输出和输入" class="headerlink" title="05 输出和输入"></a>05 输出和输入</h1><h2 id="5-1-数据输出"><a href="#5-1-数据输出" class="headerlink" title="5.1 数据输出"></a>5.1 数据输出</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">System.out.print(<span class="string">&quot;Hello World&quot;</span>); </span><br><span class="line">System.out.println(<span class="string">&quot;Hello World&quot;</span>);  <span class="comment">// 输出默认换行</span></span><br><span class="line">System.out.print(<span class="string">&quot;Hello World\n&quot;</span>);  <span class="comment">// 使用转义字符，输出换行</span></span><br></pre></td></tr></table></figure><h2 id="5-2-数据输入"><a href="#5-2-数据输入" class="headerlink" title="5.2 数据输入"></a>5.2 数据输入</h2><ul><li><p>Scanner的使用：</p><ul><li><p>导包：import java.util.Scanner;（必须在类定义的上方）</p><ul><li>方法一：手动导包</li><li>方法二：IDEA快捷键导报：Alt+Enter</li><li>方法三：IDEA自动导报：输入Scan+Enter</li></ul></li><li><p>创建对象：Scanner sc &#x3D; new Scanner(System.in); </p><ul><li>sc是变量名可以改变，其他的都不能变</li></ul></li><li><p>接收数据：int i &#x3D; sc.nextInt();             </p><ul><li>i是变量名可以改变，其他的都不能变（输入的必须为int类型）</li><li>String i &#x3D; sc.next();  （输入为必须字符串）</li></ul></li></ul> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScannerDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="06-分支语句"><a href="#06-分支语句" class="headerlink" title="06 分支语句"></a>06 分支语句</h1><h2 id="6-1-流程控制"><a href="#6-1-流程控制" class="headerlink" title="6.1 流程控制"></a>6.1 流程控制</h2><ul><li>流程控制的分类：<ul><li>顺序结构</li><li>分支结构（if, switch）</li><li>循环结构（for, while, do…while）</li></ul></li><li>顺序结构：顺序结构是程序中最简单、最基本的流程控制，没用特定的语法结构，按照代码的先后顺序，依次执行，程序中大多数的代码都是这样执行的</li></ul><h2 id="6-2-if分支语句"><a href="#6-2-if分支语句" class="headerlink" title="6.2 if分支语句"></a>6.2 if分支语句</h2><ul><li><p>格式一：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">   语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>格式二：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式) &#123;</span><br><span class="line">语句体<span class="number">1</span>；</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">语句体<span class="number">2</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>格式三：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (布尔表达式<span class="number">1</span>) &#123;</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (布尔表达式<span class="number">2</span>) &#123;</span><br><span class="line">语句体<span class="number">2</span>;</span><br><span class="line">···</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>if语句的注意事项：</p><ul><li>一旦满足某个条件表达式，则进入其执行语句块执行，执行完毕后不会执行其一下的条件语句</li><li>如果多个条件表达式之间为“互斥”关系，多个语句之间可以上下调换顺序，一旦是包含关系，要求条件表达式范围小的写到范围大的上边</li></ul></li></ul><h2 id="6-3-switch分支语句"><a href="#6-3-switch分支语句" class="headerlink" title="6.3 switch分支语句"></a>6.3 switch分支语句</h2><ul><li><p>switch语句的格式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>：</span><br><span class="line">语句体<span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>：</span><br><span class="line">语句体<span class="number">2</span>；</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">···</span><br><span class="line"><span class="keyword">default</span>：</span><br><span class="line">语句体n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>switch语句的注意事项：</p><ul><li>swich（表达式）中表达式的返回值必须是以下几种类型之一：int，byte，short，char（这三种自动类型转换），枚举(jdk1.5)，String(jdk1.7)</li><li>case子句中的值必须是常量，且所有case子句中的值应是不同的；</li><li>default子句是可任选的，当没有匹配的case时，执行default；</li><li>break语句用来在执行完一个case分支后使程序跳出swich语句块；如果没有break程序会顺序执行到swich结尾，出现case穿透现象</li></ul></li><li><p>if分支结构和switch分支结构区别：</p><ul><li>如果判断的具体数值不多，且复合byte、short、int、char四种类型，建议使用swich语句，效率稍高</li><li>其他情况：对区间进行判断，对结果为boolean类型进行判断时，if的使用范围比较广泛</li></ul></li></ul><h1 id="07-循环语句"><a href="#07-循环语句" class="headerlink" title="07 循环语句"></a>07 循环语句</h1><h2 id="7-1-for循环语句"><a href="#7-1-for循环语句" class="headerlink" title="7.1 for循环语句"></a>7.1 for循环语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (初始化语句; 条件判断语句; 条件控制语句) &#123;</span><br><span class="line">循环体语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-while循环语句"><a href="#7-2-while循环语句" class="headerlink" title="7.2 while循环语句"></a>7.2 while循环语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span> (条件判断语句)&#123;</span><br><span class="line">循环体语句;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-3-do…while循环语句"><a href="#7-3-do…while循环语句" class="headerlink" title="7.3 do…while循环语句"></a>7.3 do…while循环语句</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">循环体语句;</span><br><span class="line">条件控制语句;</span><br><span class="line">&#125; <span class="keyword">while</span> (条件判断语句);</span><br></pre></td></tr></table></figure><ul><li><p>三种循环的区别：</p><ul><li>do…while循环至少先执行一次循环体，然后判断条件是否成立，是否继续执行循环体（先执行后判断）</li><li>for循环和while循环先判断条件是否成立，然后决定是否执行循环体（先判断后执行）</li><li>for循环语句和while循环语句的使用区别：<ul><li>控制条件语句的变量，在for循环结束后，就不能再被访问到了，而while循环结束还可以继续使用</li><li>若想继续使用就用while，否则推荐使用for，循环结束时让变量就从内存中消失，能够提高内存的使用效率</li></ul></li></ul></li><li><p>死循环格式：while的死循环结构是最常见的，命令提示符窗口中Crtl+C可以结束死循环</p><ul><li>for(   ;    ;   ) {   }</li><li>while (true) {   }</li><li>do {   } while (true);</li></ul></li></ul><h2 id="7-4-跳转控制语句"><a href="#7-4-跳转控制语句" class="headerlink" title="7.4 跳转控制语句"></a>7.4 跳转控制语句</h2><ul><li>break：在选择结构switch语句中，在循环语句中；跳出单层循环</li><li>continue：在循环语句中；结束一次循环，继续下一次的循环</li><li>return：在循环语句、方法中；可以从一个方法返回，并把控制权交给调用它的语句。直接结束整个方法，从而结束循环</li></ul><h2 id="7-5-Random"><a href="#7-5-Random" class="headerlink" title="7.5 Random"></a>7.5 Random</h2><ul><li><p>Random的作用： 产生一个随机数</p></li><li><p>Random的使用：</p><ul><li>导包：import java.util.Random;<ul><li>导包必须在类的定义的上方</li></ul></li><li>创建对象：Random r &#x3D; new Random();<ul><li>r是变量名可以变，其他的都不允许变</li></ul></li><li>获取随机数：int number &#x3D; r.nextInt(10); &#x2F;&#x2F;获取数据的范围：[0,10]，包括0，不包括10<ul><li>number是变量名可以变，数字10可以变，其他的都不允许变</li></ul></li></ul></li><li><p>Random的eg：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导包</span></span><br><span class="line"><span class="keyword">import</span> java.util.Random</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="type">Random</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用循环获取10个随机数</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 获取随机数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> r.nextInt(<span class="number">10</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;number:&quot;</span> + number);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求：获取一个1-100之间的随机数</span></span><br><span class="line"><span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> r.nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">System.out.println(x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="08-内存分配"><a href="#08-内存分配" class="headerlink" title="08 内存分配"></a>08 内存分配</h1><ul><li>JVM中主要的内存空间：堆内存、栈内存、方法区</li><li>内存分配过程：内存图（见11.4）</li></ul><h2 id="8-1-堆内存"><a href="#8-1-堆内存" class="headerlink" title="8.1 堆内存"></a>8.1 堆内存</h2><ul><li>堆内存：存储所有的类实例和数组对象<ul><li>凡是通过new运算创建的对象，都存储在堆内存中</li><li>每一个new出来的东西都会开辟一块空间，使用完毕会在垃圾回收器空闲时被收回</li></ul></li></ul><h2 id="8-2-栈内存"><a href="#8-2-栈内存" class="headerlink" title="8.2 栈内存"></a>8.2 栈内存</h2><ul><li>栈内存：提供所有方法执行需要的内存，以及存储方法的局部变量<ul><li>方法调用定义时压栈，在栈中给该方法分配空间</li><li>方法调用结束时弹栈，将该方法占用的空间释放，局部变量的内存也释放</li></ul></li></ul><h2 id="8-3-方法区"><a href="#8-3-方法区" class="headerlink" title="8.3 方法区"></a>8.3 方法区</h2><ul><li><p>方法区：又叫静态区，跟堆一样被所有的线程共享</p><ul><li>类加载器classloader，将硬盘上的xxx.class字节码文件装载到JVM的时候，会将字节码文件存放到方法区当中</li><li>方法区中包含的是在整个程序中永远唯一的元素，eg：class，static变量</li><li>因为类需要加载，所以方法区当中最先有数据，存储的是代码字节码。eg：Student.class，StudentTest.class，String.class</li></ul></li></ul><h1 id="09-方法"><a href="#09-方法" class="headerlink" title="09 方法"></a>09 方法</h1><h2 id="9-1-方法概述"><a href="#9-1-方法概述" class="headerlink" title="9.1 方法概述"></a>9.1 方法概述</h2><ul><li>方法（Method）：是将具有独立功能的代码块组织成为一个整体，使其具有特殊功能的代码集<ul><li>方法必须先创建才可以使用，该过程称为方法定义</li><li>方法创建后并不是直接运行的，需要手动使用后才执行，该过程称为方法调用</li></ul></li></ul><h2 id="9-2-方法的定义和调用"><a href="#9-2-方法的定义和调用" class="headerlink" title="9.2 方法的定义和调用"></a>9.2 方法的定义和调用</h2><ul><li><p>方法的定义与调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    修饰符列表，eg：public static</span></span><br><span class="line"><span class="comment">    返回值类型：通常为基本数据类型、引用数据类型和void</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    方法名：调用方法的时候使用的标识，小驼峰命名法</span></span><br><span class="line"><span class="comment">  参数：由数据类型和变量名组成，多个参数之间使用逗号隔开</span></span><br><span class="line"><span class="comment">    方法体：完成功能的代码块</span></span><br><span class="line"><span class="comment">return：若执行结束有数据返回，用于把数据返回给调用者</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">[修饰符列表] 返回值类型 方法名(参数) &#123;  </span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method_name</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">method_name();</span><br></pre></td></tr></table></figure></li><li><p>方法的eg：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethodDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">isEvenNumber();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法：判断该数据是否是偶数</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">isEvenNumber</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">number = <span class="number">9</span>;</span><br><span class="line"><span class="keyword">if</span>(number%<span class="number">2</span> ==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="literal">true</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">Systm.println(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="9-3-方法的注意事项"><a href="#9-3-方法的注意事项" class="headerlink" title="9.3 方法的注意事项"></a>9.3 方法的注意事项</h2><ul><li><p>方法的注意事项：</p><ul><li>方法不能嵌套定义</li><li>void表示无返回值，可以省略return，也可以只单独书写return</li><li>定义方法可以写在调用方法后面</li><li>调用程序不一定要写在main方法中，其他方法也可以调用</li><li>非void类型的方法，必须有返回值return（特别地，注意if语句中的return）</li></ul></li><li><p>方法的定义：（要做到两个明确）</p><ul><li>返回值类型：明确方法操作完毕之后数据的返回类型，如果没用返回值为void</li><li>参数：明确参数的类型和数量</li></ul></li><li><p>方法的调用：</p><ul><li>void类型的方法可以直接调用</li><li>非void类型的方法，推荐用变量接收调用，也可以直接写在输出中</li><li>同一个类里面的方法调用可以直接使用：方法名();</li><li>不同类里面的方法调用必须要：类名.方法();</li></ul></li></ul><h2 id="9-4-方法参数的传递"><a href="#9-4-方法参数的传递" class="headerlink" title="9.4 方法参数的传递"></a>9.4 方法参数的传递</h2><ul><li><p>基本数据类型的参数：形参的改变，不影响实际参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">        System.out.println(i);  <span class="comment">// 10</span></span><br><span class="line">        add(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        i++;</span><br><span class="line">        System.out.println(i);  <span class="comment">// 11</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>引用类型的参数：形参的改变，影响实际参数的值（见11.5）</p></li></ul><h2 id="9-5-方法重载"><a href="#9-5-方法重载" class="headerlink" title="9.5 方法重载"></a>9.5 方法重载</h2><ul><li><p>方法重载（overload）：同一个类中，定义了多个名字相同、功能相似的方法</p><ul><li>在同一个类中，且具有相同的方法名</li><li>每个方法的参数不相同（类型或数量不同）</li><li>注意事项：与“修饰符列表public static”、“返回值类型void”和“参数名称”无关</li></ul></li><li><p>方法重载的特点：</p><ul><li>重载仅对应方法的定义，与方法的调用无关，调用方式参照标准格式</li><li>重载仅针对同一个类中方法的名称与参数进行识别，与返回值无关，换句话说不能通过返回值来判断两个方法是否相互构成重载</li><li>println()方法一定进行方法重载了，可以传入不同类型和数量的参数</li></ul></li><li><p>方法重载的eg：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MethoDemo</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line"><span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> sum(a:<span class="number">10</span>, b:<span class="number">20</span>);</span><br><span class="line">System.out.println(result1);</span><br><span class="line"></span><br><span class="line"><span class="type">double</span> <span class="variable">result2</span> <span class="operator">=</span> sum(a:<span class="number">10.0</span>, b:<span class="number">20.0</span>);</span><br><span class="line">System.out.println(result2);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">reslult3</span> <span class="operator">=</span> sum(a:<span class="number">10</span>, b:<span class="number">20</span>, c:<span class="number">30</span>);</span><br><span class="line">System.out.println(result3);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义方法1：求两个int类型数据和的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义方法2：求两个double类型数据和的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 定义方法3：求三个int类型数据和的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="9-6-方法递归"><a href="#9-6-方法递归" class="headerlink" title="9.6 方法递归"></a>9.6 方法递归</h2><ul><li>方法递归：一个方法在执行过程中调用自身</li><li>方法递归的使用：<ul><li>一个问题可以拆分成多个子问题的解</li><li>拆分后的子问题和原问题除了数据规模不同，解决思路完全相同</li><li>存在递归终止条件</li></ul></li><li>方法递归的注意事项：<ul><li>递归若没有结束条件，会发生栈内存溢出错误</li><li>递归条件正确，也有可能出现栈内存溢出错误，递归层数太深</li><li>存在空间复杂度高、有栈溢出风险、存在重复计算和耗时较多等缺点</li><li>递归代码一般可以改为迭代循环的非递归方法</li></ul></li><li>若出现StackOverflowError，解决方案：<ul><li>检查递归的结束条件</li><li>手动调整JVM的栈内存初始化大小（java-X）</li></ul></li></ul><h1 id="10-IEDA"><a href="#10-IEDA" class="headerlink" title="10 IEDA"></a>10 IEDA</h1><h2 id="10-1-IDEA概述"><a href="#10-1-IDEA概述" class="headerlink" title="10.1 IDEA概述"></a>10.1 IDEA概述</h2><ul><li>IDEA：全称IntelliJ IDEA，是用于Java语言开发的集成环境，是业界公认的目前用于Java程序开发最好的工具</li><li>集成环境：把代码编写、编译、执行、调试等多种功能综合到一起的开发工具</li></ul><h2 id="10-2-IDEA中的HelloWorld"><a href="#10-2-IDEA中的HelloWorld" class="headerlink" title="10.2 IDEA中的HelloWorld"></a>10.2 IDEA中的HelloWorld</h2><ul><li>创建一个空项目（JavaSE_Code）</li><li>创建一个新模块（idea_test）</li><li>在idea_test模块下的src下创建一个包（com.chapter）</li><li>在com.chapter包下新建一个类（Helloworld）</li><li>在Helloworld类中编写代码，右键可以执行程序</li></ul><h2 id="10-3-IDEA中项目结构"><a href="#10-3-IDEA中项目结构" class="headerlink" title="10.3 IDEA中项目结构"></a>10.3 IDEA中项目结构</h2><ul><li>Project–&gt;模块–&gt;包–&gt;类</li></ul><h2 id="10-4-IDEA中辅助快捷键"><a href="#10-4-IDEA中辅助快捷键" class="headerlink" title="10.4 IDEA中辅助快捷键"></a>10.4 IDEA中辅助快捷键</h2><ul><li><p>IDEA快速生成语句：</p><ul><li><p>psvm+回车：快速生成main()方法</p></li><li><p>sout+回车（Ctrl+Alt可解决无法使用的情况）：快速生成输出语句</p></li></ul></li><li><p>IDEA的内容辅助键：</p><ul><li>Ctrl+Alt+space：内容提示，代码补全等</li><li>Ctrl+p：查看可使用参数列表</li></ul></li><li><p>IDEA的快捷键：</p><ul><li>运行：<ul><li>某个文件：Ctrl+Shift+F10</li><li>当前文件：Shift+F10</li><li>断电调试：Shift+F9</li></ul></li><li>注释：<ul><li>单行：选中代码，Ctrl+&#x2F;</li><li>多行：选址代码，Ctrl+Shift+&#x2F;</li></ul></li><li>格式化：Ctrl+Alt+L</li><li>窗口大小：Ctrl+Shift+F12</li><li>切换窗口：Alt+</li><li>切换程序：Alt+左&#x2F;右箭头</li></ul></li><li><p>构造方法、get&#x2F;set方法（见11.6）：</p><ul><li>构造方法：Alt+Insert，选Constructor，再选择无参构造&#x2F;带参构造</li><li>get&#x2F;set方法：Alt+Insert，选Getters and Setters</li><li>（重写方法、toString）</li></ul></li></ul><h2 id="10-5-IDEA中模块操作"><a href="#10-5-IDEA中模块操作" class="headerlink" title="10.5 IDEA中模块操作"></a>10.5 IDEA中模块操作</h2><ul><li>IDEA中模块操作的分类：新建模块、删除模块、导入模块</li></ul><h1 id="基础案例"><a href="#基础案例" class="headerlink" title="基础案例"></a>基础案例</h1><h2 id="Test-1-减肥计划"><a href="#Test-1-减肥计划" class="headerlink" title="Test_1 减肥计划"></a>Test_1 减肥计划</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例一：减肥计划</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 键盘录入一个星期数，用一个变量接收</span></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入一个星期数： &quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">week</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对星期数进行判断，这里用if语句实现</span></span><br><span class="line">        <span class="keyword">if</span> (week &lt; <span class="number">1</span> || week &gt; <span class="number">7</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你输入的星期数有误 &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">1</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;跑步&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">2</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;游泳&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">3</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;慢走&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">4</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;动感单车&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">5</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;拳击&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (week == <span class="number">6</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;爬山&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;好好吃一顿&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        switch (week) &#123;</span></span><br><span class="line"><span class="comment">            case 1:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;跑步&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 2:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;游泳&quot;);</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            case 3:</span></span><br><span class="line"><span class="comment">                //...</span></span><br><span class="line"><span class="comment">            default:</span></span><br><span class="line"><span class="comment">                System.out.println(&quot;你输入的星期数有误&quot;);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test-2-逢七过"><a href="#Test-2-逢七过" class="headerlink" title="Test_2 逢七过"></a>Test_2 逢七过</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE_01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例二：逢七过</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取数据，for循环实现</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>; x &lt;= <span class="number">100</span>; x++) &#123;</span><br><span class="line">            <span class="comment">// 个位是7，十位是7，能够被7整除</span></span><br><span class="line">            <span class="keyword">if</span> (x % <span class="number">10</span> == <span class="number">7</span> || (x / <span class="number">10</span> % <span class="number">10</span>) == <span class="number">7</span> || x % <span class="number">7</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 输出满足条件的数据</span></span><br><span class="line">                System.out.println(x);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test-3-不死神兔"><a href="#Test-3-不死神兔" class="headerlink" title="Test_3 不死神兔"></a>Test_3 不死神兔</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE_01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例三：不死神兔</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    1,1,2,3,5...</span></span><br><span class="line"><span class="comment">    从第三个数据开始，每一个数据时前两个数据之和</span></span><br><span class="line"><span class="comment">    第一个、第二个数据已知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test03</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 定义数组，存储兔子对数</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 第一个、第二个月已知，第三个月开始增加</span></span><br><span class="line">        arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        arr[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 循环实现计算每个月的兔子对数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">2</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            arr[x] = arr[x - <span class="number">1</span>] + arr[x - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出最后一个元素值</span></span><br><span class="line">        System.out.println(<span class="string">&quot;第二十个月兔子的对数是：&quot;</span> + arr[<span class="number">19</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test-4-百钱百鸟"><a href="#Test-4-百钱百鸟" class="headerlink" title="Test_4 百钱百鸟"></a>Test_4 百钱百鸟</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE_01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例四：百钱白鸡</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    公鸡：五文钱</span></span><br><span class="line"><span class="comment">    母鸡：三文钱</span></span><br><span class="line"><span class="comment">    三个鸡雏：一文钱</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test04</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 第一层循环：表示公鸡范围</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt;= <span class="number">20</span>; x++) &#123;</span><br><span class="line">            <span class="comment">// 第二层循环：表示母鸡的数量</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> <span class="number">0</span>; y &lt;= <span class="number">33</span>; y++) &#123;</span><br><span class="line">                <span class="comment">// 直接计算鸡雏数量，无需循环</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">z</span> <span class="operator">=</span> <span class="number">100</span> - x - y;</span><br><span class="line">                <span class="keyword">if</span> (z % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; <span class="number">5</span> * x + <span class="number">3</span> * y + z / <span class="number">3</span> == <span class="number">100</span>) &#123;</span><br><span class="line">                    System.out.println(x + <span class="string">&quot;,&quot;</span> + y + <span class="string">&quot;,&quot;</span> + z);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test-5-数组元素求和"><a href="#Test-5-数组元素求和" class="headerlink" title="Test_5 数组元素求和"></a>Test_5 数组元素求和</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE_01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例五：数组元素求和</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    求和元素：</span></span><br><span class="line"><span class="comment">    个位和十位都不能是7，并且只能是偶数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test05</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">68</span>, <span class="number">27</span>, <span class="number">95</span>, <span class="number">88</span>, <span class="number">171</span>, <span class="number">996</span>, <span class="number">51</span>, <span class="number">210</span>&#125;;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[x] % <span class="number">10</span> != <span class="number">7</span> &amp;&amp; arr[x] / <span class="number">10</span> % <span class="number">10</span> != <span class="number">7</span> &amp;&amp; arr[x] % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                sum += arr[x];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;sum：&quot;</span> + sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test-6-数组内容相同"><a href="#Test-6-数组内容相同" class="headerlink" title="Test_6 数组内容相同"></a>Test_6 数组内容相同</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE_01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例六：数组内容相同</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test06</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr1 = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] arr2 = &#123;<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> compare(arr1, arr2);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法：用于比较两个数组内容是否相同</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    两个明确：</span></span><br><span class="line"><span class="comment">        返回值：boolean</span></span><br><span class="line"><span class="comment">        参数：int[] arr1, int[] arr2</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span>[] arr1, <span class="type">int</span>[] arr2)</span> &#123;</span><br><span class="line">        <span class="comment">// 先比较长度</span></span><br><span class="line">        <span class="keyword">if</span> (arr1.length != arr2.length)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; arr1.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr1[x] != arr2[x])</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test-7-查找"><a href="#Test-7-查找" class="headerlink" title="Test_7 查找"></a>Test_7 查找</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例七：查找</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    查找数组：</span></span><br><span class="line"><span class="comment">        返回索引值</span></span><br><span class="line"><span class="comment">        不存在返回-1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test07</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">19</span>, <span class="number">28</span>, <span class="number">37</span>, <span class="number">46</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要查找的数据：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> sc.nextInt();</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        // 定义一个索引变量，初始值为-1</span></span><br><span class="line"><span class="comment">        int index = -1;</span></span><br><span class="line"><span class="comment">        for (int x = 0; x &lt; arr.length; x++) &#123;</span></span><br><span class="line"><span class="comment">            if (arr[x] == number) &#123;</span></span><br><span class="line"><span class="comment">                index = x;</span></span><br><span class="line"><span class="comment">                break;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">        <span class="comment">// 调用函数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> getIndex(arr,number);</span><br><span class="line">        System.out.println(<span class="string">&quot;index：&quot;</span> + index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义一个方法，用于查找数据在数组中的索引</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        返回类型：int</span></span><br><span class="line"><span class="comment">        参数：int[] arr, number</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getIndex</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> number)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[x] == number) &#123;</span><br><span class="line">                index = x;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//返回索引</span></span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test-8-反转"><a href="#Test-8-反转" class="headerlink" title="Test_8 反转"></a>Test_8 反转</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE_01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例八：反转</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    实现：首尾交换，使用临时空间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test08</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = &#123;<span class="number">19</span>, <span class="number">28</span>, <span class="number">37</span>, <span class="number">46</span>, <span class="number">50</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 定义两个索引变量循环</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">start</span> <span class="operator">=</span> <span class="number">0</span>, end = arr.length - <span class="number">1</span>; start &lt;= end; start++, end--) &#123;</span><br><span class="line">            <span class="comment">// 变量交换</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> arr[start];</span><br><span class="line">            arr[start] = arr[end];</span><br><span class="line">            arr[end] = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法：遍历数组</span></span><br><span class="line">        printArray(arr);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义方法：数组遍历模板</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(arr[x]);     <span class="comment">//最后一个元素，只输出数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(arr[x] + <span class="string">&quot;,&quot;</span>);     <span class="comment">//非最后一个，同时输出，</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Test-9-评委打分"><a href="#Test-9-评委打分" class="headerlink" title="Test_9 评委打分"></a>Test_9 评委打分</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> JavaSE_01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 案例九：评委打分</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    共6个评委</span></span><br><span class="line"><span class="comment">    去掉最高分、最低分，取平均值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test09</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] arr= <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line">        Scanner sc=<span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;arr.length;x++)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;请输入第&quot;</span>+(x+<span class="number">1</span>)+<span class="string">&quot;个评委的打分：&quot;</span>);</span><br><span class="line">            arr[x]=sc.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// printArray(arr);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用方法：数组最大值、数组最大值</span></span><br><span class="line">        <span class="type">int</span> max=getMax(arr);</span><br><span class="line">        <span class="type">int</span> min=getMin(arr);</span><br><span class="line">        <span class="comment">// 调用方法：求数组之和</span></span><br><span class="line">        <span class="type">int</span> sum=getSum(arr);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> avg=(sum-max-min)/(arr.length-<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;选手的最终得分是：&quot;</span>+avg);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义方法：求数组最大值、最小值</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        返回值类型：int</span></span><br><span class="line"><span class="comment">        参数：int[] arr</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> max=arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x=<span class="number">1</span>;x&lt;arr.length;x++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[x]&gt;max)</span><br><span class="line">                max=arr[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getMin</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> min=arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> x=<span class="number">1</span>;x&lt;arr.length;x++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[x]&lt;min)</span><br><span class="line">                min=arr[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义方法：数组求和</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        返回值类型：int</span></span><br><span class="line"><span class="comment">        参数：int[] arr</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">getSum</span><span class="params">(<span class="type">int</span>[] arr)</span>&#123;</span><br><span class="line">        <span class="type">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x=<span class="number">0</span>;x&lt;arr.length;x++)&#123;</span><br><span class="line">            sum+=arr[x];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义方法：数组遍历模板</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printArray</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">0</span>; x &lt; arr.length; x++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (x == arr.length - <span class="number">1</span>) &#123;</span><br><span class="line">                System.out.println(arr[x]);     <span class="comment">// 最后一个元素，只输出数据</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(arr[x] + <span class="string">&quot;,&quot;</span>);     <span class="comment">// 非最后一个，同时输出，</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> JavaSE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BEGIN</title>
      <link href="/2022/03/31/%EF%BC%88others%EF%BC%89/essays/WELCOME/"/>
      <url>/2022/03/31/%EF%BC%88others%EF%BC%89/essays/WELCOME/</url>
      
        <content type="html"><![CDATA[<h1 id="Java学习路线"><a href="#Java学习路线" class="headerlink" title="Java学习路线"></a>Java学习路线</h1><h2 id="一：Java基础阶段"><a href="#一：Java基础阶段" class="headerlink" title="一：Java基础阶段"></a>一：Java基础阶段</h2><ul><li>JavaSE</li><li>MySQL</li><li>JDBC</li></ul><h2 id="二、JavaWeb阶段"><a href="#二、JavaWeb阶段" class="headerlink" title="二、JavaWeb阶段"></a>二、JavaWeb阶段</h2><h2 id="三、JavaEE框架阶段"><a href="#三、JavaEE框架阶段" class="headerlink" title="三、JavaEE框架阶段"></a>三、JavaEE框架阶段</h2><h2 id="四、微服务核心生态"><a href="#四、微服务核心生态" class="headerlink" title="四、微服务核心生态"></a>四、微服务核心生态</h2><h2 id="五、企业级实战项目"><a href="#五、企业级实战项目" class="headerlink" title="五、企业级实战项目"></a>五、企业级实战项目</h2>]]></content>
      
      
      <categories>
          
          <category> others </category>
          
      </categories>
      
      
        <tags>
            
            <tag> essays </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
